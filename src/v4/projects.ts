export default (client: any, handler: any) => ({
  get: ({query,clientOptions}: {query:{order_by:string,sort:string,archived:string,visibility:string,search:string,search_namespaces:string,owned:string,starred:string,imported:string,membership:string,with_issues_enabled:string,with_merge_requests_enabled:string,with_programming_language:string,min_access_level:string,id_after:string,id_before:string,last_activity_after:string,last_activity_before:string,repository_storage:string,topic:string,topic_id:string,updated_before:string,updated_after:string,include_pending_delete:string,wiki_checksum_failed:string,repository_checksum_failed:string,include_hidden:string,page:string,per_page:string,simple:string,statistics:string,with_custom_attributes:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}]},{code:400}]> => handler.apply({method:'get',url:'api/v4/projects',resource:'api',variable:[],headers:{Accept:'application/json'},query:[{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'archived',type:'string'},{name:'visibility',type:'string'},{name:'search',type:'string'},{name:'search_namespaces',type:'string'},{name:'owned',type:'string'},{name:'starred',type:'string'},{name:'imported',type:'string'},{name:'membership',type:'string'},{name:'with_issues_enabled',type:'string'},{name:'with_merge_requests_enabled',type:'string'},{name:'with_programming_language',type:'string'},{name:'min_access_level',type:'string'},{name:'id_after',type:'string'},{name:'id_before',type:'string'},{name:'last_activity_after',type:'string'},{name:'last_activity_before',type:'string'},{name:'repository_storage',type:'string'},{name:'topic',type:'string'},{name:'topic_id',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'},{name:'include_pending_delete',type:'string'},{name:'wiki_checksum_failed',type:'string'},{name:'repository_checksum_failed',type:'string'},{name:'include_hidden',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'simple',type:'string'},{name:'statistics',type:'string'},{name:'with_custom_attributes',type:'string'}],data:null}, [client, {query, clientOptions}]),
  post: ({data,clientOptions}: {data:{name:string,path:string,default_branch:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outdated_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:string,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,repository_object_format:string,use_custom_template:boolean,group_with_project_templates_id:number,namespace_id:number,import_url:string,template_name:string,template_project_id:number},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:400},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects',resource:'api',variable:[],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',path:'string',default_branch:'string',description:'string',build_git_strategy:'string',build_timeout:'number',auto_cancel_pending_pipelines:'string',ci_config_path:'string',service_desk_enabled:'boolean',issues_enabled:'boolean',merge_requests_enabled:'boolean',wiki_enabled:'boolean',jobs_enabled:'boolean',snippets_enabled:'boolean',issues_access_level:'string',repository_access_level:'string',merge_requests_access_level:'string',forking_access_level:'string',wiki_access_level:'string',builds_access_level:'string',snippets_access_level:'string',pages_access_level:'string',analytics_access_level:'string',container_registry_access_level:'string',security_and_compliance_access_level:'string',releases_access_level:'string',environments_access_level:'string',feature_flags_access_level:'string',infrastructure_access_level:'string',monitor_access_level:'string',model_experiments_access_level:'string',model_registry_access_level:'string',emails_disabled:'boolean',emails_enabled:'boolean',show_default_award_emojis:'boolean',show_diff_preview_in_email:'boolean',warn_about_potentially_unwanted_characters:'boolean',enforce_auth_checks_on_uploads:'boolean',shared_runners_enabled:'boolean',group_runners_enabled:'boolean',resolve_outdated_diff_discussions:'boolean',remove_source_branch_after_merge:'boolean',container_registry_enabled:'boolean',container_expiration_policy_attributes:{cadence:'string',keep_n:'number',older_than:'string',name_regex:'string',name_regex_keep:'string',enabled:'boolean'},lfs_enabled:'boolean',visibility:'string',public_builds:'boolean',public_jobs:'boolean',request_access_enabled:'boolean',only_allow_merge_if_pipeline_succeeds:'boolean',allow_merge_on_skipped_pipeline:'boolean',only_allow_merge_if_all_discussions_are_resolved:'boolean',tag_list:['string','string'],topics:['string','string'],avatar:'binary',printing_merge_request_link_enabled:'boolean',merge_method:'string',suggestion_commit_message:'string',merge_commit_template:'string',squash_commit_template:'string',issue_branch_template:'string',initialize_with_readme:'boolean',auto_devops_enabled:'boolean',auto_devops_deploy_strategy:'string',autoclose_referenced_issues:'boolean',repository_storage:'string',packages_enabled:'boolean',squash_option:'string',mr_default_target_self:'boolean',only_allow_merge_if_all_status_checks_passed:'boolean',approvals_before_merge:'number',mirror:'boolean',mirror_trigger_builds:'boolean',external_authorization_classification_label:'string',requirements_access_level:'string',prevent_merge_without_jira_issue:'boolean',repository_object_format:'string',use_custom_template:'boolean',group_with_project_templates_id:'number',namespace_id:'number',import_url:'string',template_name:'string',template_project_id:'number'},options:{raw:{language:'json'}}}}, [client, {data, clientOptions}]),
  getOne: ({params,query,clientOptions}: {params:{id:string},query:{statistics:string,with_custom_attributes:string,license:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string,permissions:{project_access:{access_level:string,notification_level:string},group_access:{access_level:string,notification_level:string}}}}]> => handler.apply({method:'get',url:'api/v4/projects/:id',resource:'api',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'statistics',type:'string'},{name:'with_custom_attributes',type:'string'},{name:'license',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
  put: ({params,data,clientOptions}: {params:{id:string},data:{name:string,default_branch:string,path:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outdated_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:string,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,ci_default_git_depth:number,keep_latest_artifact:boolean,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,ci_separated_caches:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,allow_pipeline_trigger_approve_deployment:boolean,mirror_user_id:number,only_mirror_protected_branches:boolean,mirror_branch_regex:string,mirror_overwrites_diverged_branches:boolean,import_url:string,fallback_approvals_required:number,issues_template:string,merge_requests_template:string,merge_pipelines_enabled:boolean,merge_trains_enabled:boolean,merge_trains_skip_train_allowed:boolean,ci_restrict_pipeline_cancellation_role:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:400},{code:403}]> => handler.apply({method:'put',url:'api/v4/projects/:id',resource:'api',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',default_branch:'string',path:'string',description:'string',build_git_strategy:'string',build_timeout:'number',auto_cancel_pending_pipelines:'string',ci_config_path:'string',service_desk_enabled:'boolean',issues_enabled:'boolean',merge_requests_enabled:'boolean',wiki_enabled:'boolean',jobs_enabled:'boolean',snippets_enabled:'boolean',issues_access_level:'string',repository_access_level:'string',merge_requests_access_level:'string',forking_access_level:'string',wiki_access_level:'string',builds_access_level:'string',snippets_access_level:'string',pages_access_level:'string',analytics_access_level:'string',container_registry_access_level:'string',security_and_compliance_access_level:'string',releases_access_level:'string',environments_access_level:'string',feature_flags_access_level:'string',infrastructure_access_level:'string',monitor_access_level:'string',model_experiments_access_level:'string',model_registry_access_level:'string',emails_disabled:'boolean',emails_enabled:'boolean',show_default_award_emojis:'boolean',show_diff_preview_in_email:'boolean',warn_about_potentially_unwanted_characters:'boolean',enforce_auth_checks_on_uploads:'boolean',shared_runners_enabled:'boolean',group_runners_enabled:'boolean',resolve_outdated_diff_discussions:'boolean',remove_source_branch_after_merge:'boolean',container_registry_enabled:'boolean',container_expiration_policy_attributes:{cadence:'string',keep_n:'number',older_than:'string',name_regex:'string',name_regex_keep:'string',enabled:'boolean'},lfs_enabled:'boolean',visibility:'string',public_builds:'boolean',public_jobs:'boolean',request_access_enabled:'boolean',only_allow_merge_if_pipeline_succeeds:'boolean',allow_merge_on_skipped_pipeline:'boolean',only_allow_merge_if_all_discussions_are_resolved:'boolean',tag_list:['string','string'],topics:['string','string'],avatar:'binary',printing_merge_request_link_enabled:'boolean',merge_method:'string',suggestion_commit_message:'string',merge_commit_template:'string',squash_commit_template:'string',issue_branch_template:'string',initialize_with_readme:'boolean',auto_devops_enabled:'boolean',auto_devops_deploy_strategy:'string',autoclose_referenced_issues:'boolean',repository_storage:'string',packages_enabled:'boolean',squash_option:'string',mr_default_target_self:'boolean',only_allow_merge_if_all_status_checks_passed:'boolean',approvals_before_merge:'number',mirror:'boolean',mirror_trigger_builds:'boolean',external_authorization_classification_label:'string',requirements_access_level:'string',prevent_merge_without_jira_issue:'boolean',ci_default_git_depth:'number',keep_latest_artifact:'boolean',ci_forward_deployment_enabled:'boolean',ci_forward_deployment_rollback_allowed:'boolean',ci_allow_fork_pipelines_to_run_in_parent_project:'boolean',ci_separated_caches:'boolean',restrict_user_defined_variables:'boolean',ci_pipeline_variables_minimum_override_role:'string',allow_pipeline_trigger_approve_deployment:'boolean',mirror_user_id:'number',only_mirror_protected_branches:'boolean',mirror_branch_regex:'string',mirror_overwrites_diverged_branches:'boolean',import_url:'string',fallback_approvals_required:'number',issues_template:'string',merge_requests_template:'string',merge_pipelines_enabled:'boolean',merge_trains_enabled:'boolean',merge_trains_skip_train_allowed:'boolean',ci_restrict_pipeline_cancellation_role:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
  delete: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:202},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id',resource:'api',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
  "access_requests": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/access_requests',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/access_requests',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,user_id:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/access_requests/:user_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "approve": {
      put: ({params,data,clientOptions}: {params:{id:string,user_id:string},data:{access_level:30},clientOptions:any}): Promise<[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}]> => handler.apply({method:'put',url:'api/v4/projects/:id/access_requests/:user_id/approve',resource:'projects',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{access_level:30},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "badges": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,name:string},clientOptions:any}): Promise<[{code:200,data:[{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string},{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/badges',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'name',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{link_url:string,image_url:string,name:string},clientOptions:any}): Promise<[{code:201,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/badges',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{link_url:'string',image_url:'string',name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "render": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{link_url:string,image_url:string},clientOptions:any}): Promise<[{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/badges/render',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'link_url',type:'string'},{name:'image_url',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    getOne: ({params,clientOptions}: {params:{id:string,badge_id:string},clientOptions:any}): Promise<[{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/badges/:badge_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'badge_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,badge_id:string},data:{link_url:string,image_url:string,name:string},clientOptions:any}): Promise<[{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}]> => handler.apply({method:'put',url:'api/v4/projects/:id/badges/:badge_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'badge_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{link_url:'string',image_url:'string',name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,badge_id:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/badges/:badge_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'badge_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "repository": {
    "branches": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,search:string,regex:string,sort:string,page_token:string},clientOptions:any}): Promise<[{code:200,data:[{name:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string},{name:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/branches',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'search',type:'string'},{name:'regex',type:'string'},{name:'sort',type:'string'},{name:'page_token',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{branch:string,ref:string},clientOptions:any}): Promise<[{code:201,data:{name:string,commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:400}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/branches',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{branch:'string',ref:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,branch:string},clientOptions:any}): Promise<[{code:204},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/branches/:branch',resource:'projects',variable:[{name:'id',type:'string'},{name:'branch',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      head: ({params,clientOptions}: {params:{id:string,branch:string},clientOptions:any}): Promise<[{code:204},{code:404}]> => handler.apply({method:'head',url:'api/v4/projects/:id/repository/branches/:branch',resource:'projects',variable:[{name:'id',type:'string'},{name:'branch',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,branch:string},clientOptions:any}): Promise<[{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/branches/:branch',resource:'projects',variable:[{name:'id',type:'string'},{name:'branch',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      "protect": {
        put: ({params,data,clientOptions}: {params:{id:string,branch:string},data:{developers_can_push:boolean,developers_can_merge:boolean},clientOptions:any}): Promise<[{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/branches/:branch/protect',resource:'repository',variable:[{name:'id',type:'string'},{name:'branch',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{developers_can_push:'boolean',developers_can_merge:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      },
      "unprotect": {
        put: ({params,clientOptions}: {params:{id:string,branch:string},clientOptions:any}): Promise<[{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/branches/:branch/unprotect',resource:'repository',variable:[{name:'id',type:'string'},{name:'branch',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    "merged_branches": {
      delete: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:202},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/merged_branches',resource:'projects',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    },
    "commits": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{ref_name:string,since:string,until:string,path:string,author:string,all:string,with_stats:string,first_parent:string,order:string,trailers:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'ref_name',type:'string'},{name:'since',type:'string'},{name:'until',type:'string'},{name:'path',type:'string'},{name:'author',type:'string'},{name:'all',type:'string'},{name:'with_stats',type:'string'},{name:'first_parent',type:'string'},{name:'order',type:'string'},{name:'trailers',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{branch:string,commit_message:string,actions:[{action:string,file_path:string,previous_path:string,content:string,execute_filemode:boolean,encoding:string,last_commit_id:string},{action:string,file_path:string,previous_path:string,content:string,execute_filemode:boolean,encoding:string,last_commit_id:string}],start_branch:string,start_sha:string,start_project:number,author_email:string,author_name:string,stats:true,force:false},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{branch:'string',commit_message:'string',actions:[{action:'string',file_path:'string',previous_path:'string',content:'string',execute_filemode:'boolean',encoding:'text',last_commit_id:'string'},{action:'string',file_path:'string',previous_path:'string',content:'string',execute_filemode:'boolean',encoding:'text',last_commit_id:'string'}],start_branch:'string',start_sha:'string',start_project:'number',author_email:'string',author_name:'string',stats:true,force:false},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      getOne: ({params,query,clientOptions}: {params:{id:string,sha:string},query:{stats:string},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string}}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha',resource:'projects',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[{name:'stats',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      "diff": {
        get: ({params,query,clientOptions}: {params:{id:string,sha:string},query:{page:string,per_page:string,unidiff:string},clientOptions:any}): Promise<[{code:200,data:[{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/diff',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'unidiff',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "comments": {
        get: ({params,query,clientOptions}: {params:{id:string,sha:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{note:string,path:string,line:number,line_type:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date},{note:string,path:string,line:number,line_type:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/comments',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
        post: ({params,data,clientOptions}: {params:{id:string,sha:string},data:{note:string,line:number,line_type:string,path:string},clientOptions:any}): Promise<[{code:200,data:{note:string,path:string,line:number,line_type:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date}},{code:400},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits/:sha/comments',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{note:'string',line:'number',line_type:'new',path:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      },
      "sequence": {
        get: ({params,query,clientOptions}: {params:{id:string,sha:string},query:{first_parent:string},clientOptions:any}): Promise<[{code:200,data:{count:number}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/sequence',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[{name:'first_parent',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "cherry_pick": {
        post: ({params,data,clientOptions}: {params:{id:string,sha:string},data:{branch:string,dry_run:false,message:string},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}},{code:400},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits/:sha/cherry_pick',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{branch:'string',dry_run:false,message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      },
      "revert": {
        post: ({params,data,clientOptions}: {params:{id:string,sha:string},data:{branch:string,dry_run:false},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}},{code:400},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits/:sha/revert',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{branch:'string',dry_run:false},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      },
      "refs": {
        get: ({params,query,clientOptions}: {params:{id:string,sha:string},query:{type:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{type:string,name:string},{type:string,name:string}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/refs',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[{name:'type',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "merge_requests": {
        get: ({params,query,clientOptions}: {params:{id:string,sha:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/merge_requests',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "signature": {
        get: ({params,clientOptions}: {params:{id:string,sha:string},clientOptions:any}): Promise<[{code:200,data:{signature_type:string,signature:string,commit_source:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/signature',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      },
      "statuses": {
        get: ({params,query,clientOptions}: {params:{id:string,sha:string},query:{ref:string,stage:string,name:string,all:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:Date,started_at:Date,finished_at:Date,allow_failure:boolean,coverage:number,pipeline_id:number,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:Date,started_at:Date,finished_at:Date,allow_failure:boolean,coverage:number,pipeline_id:number,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/statuses',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{Accept:'application/json'},query:[{name:'ref',type:'string'},{name:'stage',type:'string'},{name:'name',type:'string'},{name:'all',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      }
    },
    "files": {
      head: ({params,query,clientOptions}: {params:{id:string,file_path:string},query:{ref:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'head',url:'api/v4/projects/:id/repository/files/:file_path',resource:'projects',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{},query:[{name:'ref',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      getOne: ({params,query,clientOptions}: {params:{id:string,file_path:string},query:{ref:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/files/:file_path',resource:'projects',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{},query:[{name:'ref',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string,file_path:string},data:{branch:string,commit_message:string,content:string,start_branch:string,author_email:string,author_name:string,encoding:string,last_commit_id:string,execute_filemode:boolean},clientOptions:any}): Promise<[{code:201}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/files/:file_path',resource:'projects',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{branch:'string',commit_message:'string',content:'string',start_branch:'string',author_email:'string',author_name:'string',encoding:'text',last_commit_id:'string',execute_filemode:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      put: ({params,data,clientOptions}: {params:{id:string,file_path:string},data:{branch:string,commit_message:string,content:string,start_branch:string,author_email:string,author_name:string,encoding:string,last_commit_id:string,execute_filemode:boolean},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/files/:file_path',resource:'projects',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{branch:'string',commit_message:'string',content:'string',start_branch:'string',author_email:'string',author_name:'string',encoding:'text',last_commit_id:'string',execute_filemode:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,query,clientOptions}: {params:{id:string,file_path:string},query:{branch:string,commit_message:string,start_branch:string,author_email:string,author_name:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/files/:file_path',resource:'projects',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{},query:[{name:'branch',type:'string'},{name:'commit_message',type:'string'},{name:'start_branch',type:'string'},{name:'author_email',type:'string'},{name:'author_name',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      "blame": {
        head: ({params,query,clientOptions}: {params:{id:string,file_path:string},query:{ref:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'head',url:'api/v4/projects/:id/repository/files/:file_path/blame',resource:'repository',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{},query:[{name:'ref',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
        get: ({ params, query, clientOptions }: { params: { id: string, file_path: string }, query: { ref: string, range: { start: string, end: string } },clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/files/:file_path/blame',resource:'repository',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{},query:[{name:'ref',type:'string'},{name:'range[start]',type:'string'},{name:'range[end]',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "raw": {
        get: ({params,query,clientOptions}: {params:{id:string,file_path:string},query:{ref:string,lfs:string},clientOptions:any}): Promise<[{code:200,data:string}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/files/:file_path/raw',resource:'repository',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],headers:{Accept:'application/json'},query:[{name:'ref',type:'string'},{name:'lfs',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      }
    },
    "tree": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{ref:string,path:string,recursive:string,page:string,per_page:string,pagination:string,page_token:string},clientOptions:any}): Promise<[{code:200,data:{id:string,name:string,type:string,path:string,mode:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tree',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'ref',type:'string'},{name:'path',type:'string'},{name:'recursive',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'pagination',type:'string'},{name:'page_token',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "blobs": {
      getOne: ({params,clientOptions}: {params:{id:string,sha:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/blobs/:sha',resource:'projects',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      "raw": {
        get: ({params,clientOptions}: {params:{id:string,sha:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/blobs/:sha/raw',resource:'repository',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    "archive": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{sha:string,format:string,path:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/archive',resource:'projects',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'sha',type:'string'},{name:'format',type:'string'},{name:'path',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "compare": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{from:string,to:string,from_project_id:string,straight:string,unidiff:string},clientOptions:any}): Promise<[{code:200,data:{commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},commits:[{id:string,short_id:string,created_at:Date,parent_ids:[{value:{}},{value:{}}],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},{id:string,short_id:string,created_at:Date,parent_ids:[{value:{}},{value:{}}],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}],diffs:[{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}],compare_timeout:boolean,compare_same_ref:boolean,web_url:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/compare',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'from',type:'string'},{name:'to',type:'string'},{name:'from_project_id',type:'string'},{name:'straight',type:'string'},{name:'unidiff',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "contributors": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string},clientOptions:any}): Promise<[{code:200,data:{name:string,email:string,commits:number,additions:number,deletions:number}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/contributors',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "merge_base": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{refs:string},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/merge_base',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'refs',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "changelog": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{version:string,from:string,to:string,date:string,trailer:string,config_file:string},clientOptions:any}): Promise<[{code:200,data:{notes:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/changelog',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'version',type:'string'},{name:'from',type:'string'},{name:'to',type:'string'},{name:'date',type:'string'},{name:'trailer',type:'string'},{name:'config_file',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{version:string,from:string,to:string,date:Date,trailer:string,branch:string,config_file:string,file:string,message:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/changelog',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{version:'string',from:'string',to:'string',date:'dateTime',trailer:'Changelog',branch:'string',config_file:'string',file:'CHANGELOG.md',message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "submodules": {
      put: ({params,data,clientOptions}: {params:{id:string,submodule:string},data:{commit_sha:string,branch:string,commit_message:string},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string}}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/submodules/:submodule',resource:'projects',variable:[{name:'id',type:'string'},{name:'submodule',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{commit_sha:'string',branch:'string',commit_message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "tags": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{sort:string,order_by:string,search:string,page_token:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{name:string,message:string,target:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},release:{tag_name:{value:{}},description:{value:{}}},protected:boolean,created_at:Date},{name:string,message:string,target:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},release:{tag_name:{value:{}},description:{value:{}}},protected:boolean,created_at:Date}]},{code:403},{code:404},{code:422},{code:503}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tags',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'sort',type:'string'},{name:'order_by',type:'string'},{name:'search',type:'string'},{name:'page_token',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{tag_name:string,ref:string,message:string},clientOptions:any}): Promise<[{code:201,data:{name:string,message:string,target:string,commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},release:{tag_name:string,description:string},protected:boolean,created_at:Date}},{code:400},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/tags',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{tag_name:'string',ref:'string',message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,tag_name:string},clientOptions:any}): Promise<[{code:200,data:{name:string,message:string,target:string,commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},release:{tag_name:string,description:string},protected:boolean,created_at:Date}},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tags/:tag_name',resource:'projects',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,tag_name:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404},{code:412}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/tags/:tag_name',resource:'projects',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      "signature": {
        get: ({params,clientOptions}: {params:{id:string,tag_name:string},clientOptions:any}): Promise<[{code:200,data:{signature_type:string,signature:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tags/:tag_name/signature',resource:'repository',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      }
    }
  },
  "jobs": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{scope:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    "artifacts": {
      "download": {
        get: ({params,query,clientOptions}: {params:{id:string,ref_name:string},query:{job:string,job_token:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/artifacts/:ref_name/download',resource:'jobs',variable:[{name:'id',type:'string'},{name:'ref_name',type:'string'}],headers:{},query:[{name:'job',type:'string'},{name:'job_token',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "raw": {
        "*artifact_path": {
          get: ({params,query,clientOptions}: {params:{id:string,ref_name:string},query:{job:string,artifact_path:string,job_token:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path',resource:'artifacts',variable:[{name:'id',type:'string'},{name:'ref_name',type:'string'}],headers:{},query:[{name:'job',type:'string'},{name:'artifact_path',type:'string'},{name:'job_token',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      },
      get: ({params,query,clientOptions}: {params:{id:string,job_id:string},query:{job_token:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/:job_id/artifacts',resource:'projects',variable:[{name:'id',type:'string'},{name:'job_id',type:'string'}],headers:{},query:[{name:'job_token',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,job_id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:403},{code:409}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/jobs/:job_id/artifacts',resource:'projects',variable:[{name:'id',type:'string'},{name:'job_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      "*artifact_path": {
        get: ({params,query,clientOptions}: {params:{id:string,job_id:string},query:{artifact_path:string,job_token:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/:job_id/artifacts/*artifact_path',resource:'jobs',variable:[{name:'id',type:'string'},{name:'job_id',type:'string'}],headers:{},query:[{name:'artifact_path',type:'string'},{name:'job_token',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "keep": {
        post: ({params,clientOptions}: {params:{id:string,job_id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/artifacts/keep',resource:'jobs',variable:[{name:'id',type:'string'},{name:'job_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    getOne: ({params,clientOptions}: {params:{job_id:string,id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/:job_id',resource:'v4',variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "trace": {
      get: ({params,clientOptions}: {params:{job_id:string,id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/:job_id/trace',resource:'projects',variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "cancel": {
      post: ({params,clientOptions}: {params:{job_id:string,id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/cancel',resource:'projects',variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "retry": {
      post: ({params,clientOptions}: {params:{job_id:string,id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/retry',resource:'projects',variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "erase": {
      post: ({params,clientOptions}: {params:{job_id:string,id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404},{code:409}]> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/erase',resource:'projects',variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "play": {
      post: ({params,data,clientOptions}: {params:{job_id:string,id:string},data:{job_variables_attributes:[{key:string,value:string},{key:string,value:string}]},clientOptions:any}): Promise<[{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/play',resource:'projects',variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{job_variables_attributes:[{key:'string',value:'string'},{key:'string',value:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "artifacts": {
    delete: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:202},{code:401},{code:403},{code:409}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/artifacts',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "resource_groups": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,key:string,process_mode:string,created_at:Date,updated_at:Date},{id:number,key:string,process_mode:string,created_at:Date,updated_at:Date}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/resource_groups',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,key:string},clientOptions:any}): Promise<[{code:200,data:{id:number,key:string,process_mode:string,created_at:Date,updated_at:Date}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/resource_groups/:key',resource:'v4',variable:[{name:'id',type:'string'},{name:'key',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,key:string},data:{process_mode:string},clientOptions:any}): Promise<[{code:200,data:{id:number,key:string,process_mode:string,created_at:Date,updated_at:Date}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/resource_groups/:key',resource:'v4',variable:[{name:'id',type:'string'},{name:'key',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{process_mode:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "upcoming_jobs": {
      get: ({params,query,clientOptions}: {params:{id:string,key:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/resource_groups/:key/upcoming_jobs',resource:'projects',variable:[{name:'id',type:'string'},{name:'key',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    }
  },
  "runners": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{scope:string,type:string,paused:string,status:string,tag_list:string,version_prefix:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}},{code:400},{code:403}]> => handler.apply({method:'get',url:'api/v4/projects/:id/runners',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'scope',type:'string'},{name:'type',type:'string'},{name:'paused',type:'string'},{name:'status',type:'string'},{name:'tag_list',type:'string'},{name:'version_prefix',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{runner_id:number},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}},{code:400},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/runners',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{runner_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,runner_id:string},clientOptions:any}): Promise<[{code:204,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}},{code:400},{code:403},{code:404},{code:412}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/runners/:runner_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'runner_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "reset_registration_token": {
      post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201,data:{token:string,token_expires_at:string}},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/runners/reset_registration_token',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "secure_files": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:Date,expires_at:Date,metadata:any,file_extension:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/secure_files',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,file:string},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:Date,expires_at:Date,metadata:any,file_extension:string}},{code:400}]> => handler.apply({method:'post',url:'api/v4/projects/:id/secure_files',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',file:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,secure_file_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:Date,expires_at:Date,metadata:any,file_extension:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/secure_files/:secure_file_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'secure_file_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,secure_file_id:string},clientOptions:any}): Promise<[{code:204},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/secure_files/:secure_file_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'secure_file_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "download": {
      get: ({params,clientOptions}: {params:{id:string,secure_file_id:string},clientOptions:any}): Promise<[{code:200},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/secure_files/:secure_file_id/download',resource:'projects',variable:[{name:'id',type:'string'},{name:'secure_file_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "pipelines": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,scope:string,status:string,ref:string,sha:string,yaml_errors:string,username:string,updated_before:string,updated_after:string,order_by:string,sort:string,source:string,name:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string}]},{code:401},{code:403}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'scope',type:'string'},{name:'status',type:'string'},{name:'ref',type:'string'},{name:'sha',type:'string'},{name:'yaml_errors',type:'string'},{name:'username',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'source',type:'string'},{name:'name',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    "latest": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{ref:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/latest',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'ref',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    getOne: ({params,clientOptions}: {params:{id:string,pipeline_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,pipeline_id:string},clientOptions:any}): Promise<[{code:204},{code:403}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/pipelines/:pipeline_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "jobs": {
      get: ({params,query,clientOptions}: {params:{id:string,pipeline_id:string},query:{include_retried:string,scope:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/jobs',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'include_retried',type:'string'},{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "bridges": {
      get: ({params,query,clientOptions}: {params:{id:string,pipeline_id:string},query:{scope:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},downstream_pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}}},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},downstream_pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/bridges',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "variables": {
      get: ({params,clientOptions}: {params:{id:string,pipeline_id:string},clientOptions:any}): Promise<[{code:200,data:[{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string},{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/variables',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "test_report": {
      get: ({params,clientOptions}: {params:{id:string,pipeline_id:string},clientOptions:any}): Promise<[{code:200,data:{total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,test_suites:[{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[{value:{}},{value:{}}]},{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[{value:{}},{value:{}}]}]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/test_report',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "test_report_summary": {
      get: ({params,clientOptions}: {params:{id:string,pipeline_id:string},clientOptions:any}): Promise<[{code:200,data:{total:number,test_suites:{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[{value:{}},{value:{}}],build_ids:[number,number]}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/test_report_summary',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "metadata": {
      put: ({params,data,clientOptions}: {params:{id:string,pipeline_id:string},data:{name:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/pipelines/:pipeline_id/metadata',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "retry": {
      post: ({params,clientOptions}: {params:{id:string,pipeline_id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pipelines/:pipeline_id/retry',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "cancel": {
      post: ({params,clientOptions}: {params:{id:string,pipeline_id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pipelines/:pipeline_id/cancel',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "pipeline": {
    post: ({params,data,clientOptions}: {params:{id:string},data:{ref:string,variables:[{key:string,value:string,variable_type:string},{key:string,value:string,variable_type:string}]},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{ref:'string',variables:[{key:'string',value:'string',variable_type:'env_var'},{key:'string',value:'string',variable_type:'env_var'}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
  },
  "pipeline_schedules": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,scope:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:Date,active:boolean,created_at:Date,updated_at:Date,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:Date,active:boolean,created_at:Date,updated_at:Date,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipeline_schedules',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'scope',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{description:string,ref:string,cron:string,cron_timezone:string,active:true},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:Date,active:boolean,created_at:Date,updated_at:Date,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{description:'string',ref:'string',cron:'string',cron_timezone:'UTC',active:true},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,pipeline_schedule_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:Date,active:boolean,created_at:Date,updated_at:Date,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,pipeline_schedule_id:string},data:{description:string,ref:string,cron:string,cron_timezone:string,active:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:Date,active:boolean,created_at:Date,updated_at:Date,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{description:'string',ref:'string',cron:'string',cron_timezone:'string',active:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,pipeline_schedule_id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:403},{code:404},{code:412}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "pipelines": {
      get: ({params,clientOptions}: {params:{id:string,pipeline_schedule_id:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/pipelines',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "take_ownership": {
      post: ({params,clientOptions}: {params:{id:string,pipeline_schedule_id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:Date,active:boolean,created_at:Date,updated_at:Date,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/take_ownership',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "play": {
      post: ({params,clientOptions}: {params:{id:string,pipeline_schedule_id:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/play',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    },
    "variables": {
      post: ({params,data,clientOptions}: {params:{id:string,pipeline_schedule_id:string},data:{key:string,value:string,variable_type:string},clientOptions:any}): Promise<[{code:201,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{key:'string',value:'string',variable_type:'env_var'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      put: ({params,data,clientOptions}: {params:{id:string,pipeline_schedule_id:string,key:string},data:{value:string,variable_type:string},clientOptions:any}): Promise<[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'},{name:'key',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{value:'string',variable_type:'env_var'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,pipeline_schedule_id:string,key:string},clientOptions:any}): Promise<[{code:202,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key',resource:'projects',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'},{name:'key',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "(ref": {
    ")trigger": {
      "pipeline": {
        post: ({params,data,clientOptions}: {params:{id:string,ref:string},data:{token:string,variables:any},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/(ref/:ref/)trigger/pipeline',resource:'(ref',variable:[{name:'id',type:'string'},{name:'ref',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',variables:'object'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      }
    }
  },
  "triggers": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,token:string,description:string,created_at:Date,updated_at:Date,last_used:Date,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},{id:number,token:string,description:string,created_at:Date,updated_at:Date,last_used:Date,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/triggers',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{description:string},clientOptions:any}): Promise<[{code:201,data:{id:number,token:string,description:string,created_at:Date,updated_at:Date,last_used:Date,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/triggers',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,trigger_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,token:string,description:string,created_at:Date,updated_at:Date,last_used:Date,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/triggers/:trigger_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'trigger_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,trigger_id:string},data:{description:string},clientOptions:any}): Promise<[{code:200,data:{id:number,token:string,description:string,created_at:Date,updated_at:Date,last_used:Date,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/triggers/:trigger_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'trigger_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,trigger_id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:403},{code:404},{code:412}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/triggers/:trigger_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'trigger_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "variables": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/variables',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{key:string,value:string,protected:boolean,masked:boolean,masked_and_hidden:boolean,raw:boolean,variable_type:string,environment_scope:string,description:string},clientOptions:any}): Promise<[{code:201,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:400}]> => handler.apply({method:'post',url:'api/v4/projects/:id/variables',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{key:'string',value:'string',protected:'boolean',masked:'boolean',masked_and_hidden:'boolean',raw:'boolean',variable_type:'string',environment_scope:'string',description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,query,clientOptions}: {params:{id:string,key:string},query:{filter:string},clientOptions:any}): Promise<[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/variables/:key',resource:'v4',variable:[{name:'id',type:'string'},{name:'key',type:'string'}],headers:{Accept:'application/json'},query:[{name:'filter[environment_scope]',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,key:string},data:{value:string,protected:boolean,masked:boolean,environment_scope:string,raw:boolean,variable_type:string,filter:{environment_scope:string},description:string},clientOptions:any}): Promise<[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/variables/:key',resource:'v4',variable:[{name:'id',type:'string'},{name:'key',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{value:'string',protected:'boolean',masked:'boolean',environment_scope:'string',raw:'boolean',variable_type:'string',filter:{environment_scope:'string'},description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,query,clientOptions}: {params:{id:string,key:string},query:{filter:string},clientOptions:any}): Promise<[{code:204,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/variables/:key',resource:'v4',variable:[{name:'id',type:'string'},{name:'key',type:'string'}],headers:{Accept:'application/json'},query:[{name:'filter[environment_scope]',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "cluster_agents": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},created_at:string,created_by_user_id:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string},clientOptions:any}): Promise<[{code:201,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},created_at:string,created_by_user_id:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/cluster_agents',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,agent_id:string},clientOptions:any}): Promise<[{code:200,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},created_at:string,created_by_user_id:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents/:agent_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,agent_id:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/cluster_agents/:agent_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "tokens": {
      get: ({params,query,clientOptions}: {params:{id:string,agent_id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens',resource:'projects',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string,agent_id:string},data:{name:string,description:string},clientOptions:any}): Promise<[{code:201,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string,last_used_at:string,token:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens',resource:'projects',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,agent_id:string,token_id:string},clientOptions:any}): Promise<[{code:200,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string,last_used_at:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens/:token_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'},{name:'token_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,agent_id:string,token_id:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens/:token_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'},{name:'token_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "statuses": {
    post: ({params,data,clientOptions}: {params:{id:string,sha:string},data:{state:string,ref:string,target_url:string,description:string,name:string,context:string,coverage:number,pipeline_id:number},clientOptions:any}): Promise<[{code:200,data:{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:Date,started_at:Date,finished_at:Date,allow_failure:boolean,coverage:number,pipeline_id:number,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/statuses/:sha',resource:'v4',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{state:'string',ref:'string',target_url:'string',description:'string',name:'default',context:'default',coverage:'float',pipeline_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
  },
  "deploy_keys": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,title:string,created_at:Date,expires_at:Date,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},projects_with_readonly_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},can_push:boolean},{id:number,title:string,created_at:Date,expires_at:Date,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},projects_with_readonly_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},can_push:boolean}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_keys',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{key:string,title:string,can_push:boolean,expires_at:Date},clientOptions:any}): Promise<[{code:201,data:{id:number,title:string,created_at:Date,expires_at:Date,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},can_push:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/deploy_keys',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{key:'string',title:'string',can_push:'boolean',expires_at:'dateTime'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,key_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,created_at:Date,expires_at:Date,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},can_push:boolean}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_keys/:key_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,key_id:string},data:{title:string,can_push:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,created_at:Date,expires_at:Date,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/deploy_keys/:key_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{title:'string',can_push:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,key_id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/deploy_keys/:key_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "enable": {
      post: ({params,clientOptions}: {params:{id:string,key_id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,title:string,created_at:Date,expires_at:Date,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date}}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/deploy_keys/:key_id/enable',resource:'projects',variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "deploy_tokens": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,active:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,name:string,username:string,expires_at:Date,revoked:boolean,expired:boolean},{id:number,name:string,username:string,expires_at:Date,revoked:boolean,expired:boolean}]},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_tokens',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'active',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,scopes:[string,string],expires_at:Date,username:string},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,username:string,expires_at:Date,revoked:boolean,expired:boolean,token:string}},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/deploy_tokens',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',scopes:['string','string'],expires_at:'dateTime',username:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,token_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,username:string,expires_at:Date,revoked:boolean,expired:boolean}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_tokens/:token_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,token_id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/deploy_tokens/:token_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "deployments": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string,updated_after:string,updated_before:string,finished_after:string,finished_before:string,environment:string,status:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string}]},{code:400},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/deployments',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'updated_after',type:'string'},{name:'updated_before',type:'string'},{name:'finished_after',type:'string'},{name:'finished_before',type:'string'},{name:'environment',type:'string'},{name:'status',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{environment:string,sha:string,ref:string,tag:boolean,status:string},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},status:string,created_at:Date,comment:string},approval_summary:{rules:{id:{value:{}},user_id:{value:{}},group_id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},required_approvals:{value:{}},group_inheritance_type:{value:{}},deployment_approvals:{value:{}}}}}},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/deployments',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{environment:'string',sha:'string',ref:'string',tag:'boolean',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,deployment_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},status:string,created_at:Date,comment:string},approval_summary:{rules:{id:{value:{}},user_id:{value:{}},group_id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},required_approvals:{value:{}},group_inheritance_type:{value:{}},deployment_approvals:{value:{}}}}}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/deployments/:deployment_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,deployment_id:string},data:{status:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:Date,started_at:Date,finished_at:Date,erased_at:Date,duration:number,queued_duration:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:Date,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},status:string,created_at:Date,comment:string},approval_summary:{rules:{id:{value:{}},user_id:{value:{}},group_id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},required_approvals:{value:{}},group_inheritance_type:{value:{}},deployment_approvals:{value:{}}}}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/deployments/:deployment_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,deployment_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:403}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/deployments/:deployment_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "merge_requests": {
      get: ({params,query,clientOptions}: {params:{id:string,deployment_id:string},query:{page:string,per_page:string,author_id:string,author_username:string,assignee_id:string,assignee_username:string,reviewer_username:string,labels:string,milestone:string,my_reaction_emoji:string,reviewer_id:string,state:string,order_by:string,sort:string,with_labels_details:string,with_merge_status_recheck:string,created_after:string,created_before:string,updated_after:string,updated_before:string,view:string,scope:string,source_branch:string,source_project_id:string,target_branch:string,search:string,in:string,wip:string,not:string,deployed_before:string,deployed_after:string,environment:string,approved:string,merge_user_id:string,merge_user_username:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/deployments/:deployment_id/merge_requests',resource:'projects',variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'author_id',type:'string'},{name:'author_username',type:'string'},{name:'assignee_id',type:'string'},{name:'assignee_username',type:'string'},{name:'reviewer_username',type:'string'},{name:'labels',type:'string'},{name:'milestone',type:'string'},{name:'my_reaction_emoji',type:'string'},{name:'reviewer_id',type:'string'},{name:'state',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'with_labels_details',type:'string'},{name:'with_merge_status_recheck',type:'string'},{name:'created_after',type:'string'},{name:'created_before',type:'string'},{name:'updated_after',type:'string'},{name:'updated_before',type:'string'},{name:'view',type:'string'},{name:'scope',type:'string'},{name:'source_branch',type:'string'},{name:'source_project_id',type:'string'},{name:'target_branch',type:'string'},{name:'search',type:'string'},{name:'in',type:'string'},{name:'wip',type:'string'},{name:'not[author_id]',type:'string'},{name:'not[author_username]',type:'string'},{name:'not[assignee_id]',type:'string'},{name:'not[assignee_username]',type:'string'},{name:'not[reviewer_username]',type:'string'},{name:'not[labels]',type:'string'},{name:'not[milestone]',type:'string'},{name:'not[my_reaction_emoji]',type:'string'},{name:'not[reviewer_id]',type:'string'},{name:'deployed_before',type:'string'},{name:'deployed_after',type:'string'},{name:'environment',type:'string'},{name:'approved',type:'string'},{name:'merge_user_id',type:'string'},{name:'merge_user_username',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "approval": {
      post: ({params,data,clientOptions}: {params:{id:string,deployment_id:string},data:{status:string,comment:string,represented_as:string},clientOptions:any}): Promise<[{code:201,data:{user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},status:string,created_at:Date,comment:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/deployments/:deployment_id/approval',resource:'projects',variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{status:'string',comment:'string',represented_as:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "merge_requests": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{author_id:string,author_username:string,assignee_id:string,assignee_username:string,reviewer_username:string,labels:string,milestone:string,my_reaction_emoji:string,reviewer_id:string,state:string,order_by:string,sort:string,with_labels_details:string,with_merge_status_recheck:string,created_after:string,created_before:string,updated_after:string,updated_before:string,view:string,scope:string,source_branch:string,source_project_id:string,target_branch:string,search:string,in:string,wip:string,not:string,deployed_before:string,deployed_after:string,environment:string,approved:string,merge_user_id:string,merge_user_username:string,approver_ids:string,approved_by_ids:string,approved_by_usernames:string,page:string,per_page:string,iids:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}},{code:401},{code:404},{code:422}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'author_id',type:'string'},{name:'author_username',type:'string'},{name:'assignee_id',type:'string'},{name:'assignee_username',type:'string'},{name:'reviewer_username',type:'string'},{name:'labels',type:'string'},{name:'milestone',type:'string'},{name:'my_reaction_emoji',type:'string'},{name:'reviewer_id',type:'string'},{name:'state',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'with_labels_details',type:'string'},{name:'with_merge_status_recheck',type:'string'},{name:'created_after',type:'string'},{name:'created_before',type:'string'},{name:'updated_after',type:'string'},{name:'updated_before',type:'string'},{name:'view',type:'string'},{name:'scope',type:'string'},{name:'source_branch',type:'string'},{name:'source_project_id',type:'string'},{name:'target_branch',type:'string'},{name:'search',type:'string'},{name:'in',type:'string'},{name:'wip',type:'string'},{name:'not[author_id]',type:'string'},{name:'not[author_username]',type:'string'},{name:'not[assignee_id]',type:'string'},{name:'not[assignee_username]',type:'string'},{name:'not[reviewer_username]',type:'string'},{name:'not[labels]',type:'string'},{name:'not[milestone]',type:'string'},{name:'not[my_reaction_emoji]',type:'string'},{name:'not[reviewer_id]',type:'string'},{name:'deployed_before',type:'string'},{name:'deployed_after',type:'string'},{name:'environment',type:'string'},{name:'approved',type:'string'},{name:'merge_user_id',type:'string'},{name:'merge_user_username',type:'string'},{name:'approver_ids',type:'string'},{name:'approved_by_ids',type:'string'},{name:'approved_by_usernames',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'iids',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{title:string,source_branch:string,target_branch:string,target_project_id:number,assignee_id:number,assignee_ids:[number,number],reviewer_ids:[number,number],description:string,labels:[string,string],add_labels:[string,string],remove_labels:[string,string],milestone_id:number,remove_source_branch:boolean,allow_collaboration:boolean,allow_maintainer_to_push:boolean,squash:boolean,approvals_before_merge:number},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:400},{code:401},{code:404},{code:409},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{title:'string',source_branch:'string',target_branch:'string',target_project_id:'number',assignee_id:'number',assignee_ids:['number','number'],reviewer_ids:['number','number'],description:'string',labels:['string','string'],add_labels:['string','string'],remove_labels:['string','string'],milestone_id:'number',remove_source_branch:'boolean',allow_collaboration:'boolean',allow_maintainer_to_push:'boolean',squash:'boolean',approvals_before_merge:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404},{code:412}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/merge_requests/:merge_request_iid',resource:'v4',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    getOne: ({params,query,clientOptions}: {params:{id:string,merge_request_iid:string},query:{render_html:string,include_diverged_commits_count:string,include_rebase_in_progress:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid',resource:'v4',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[{name:'render_html',type:'string'},{name:'include_diverged_commits_count',type:'string'},{name:'include_rebase_in_progress',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{title:string,target_branch:string,state_event:string,discussion_locked:boolean,assignee_id:number,assignee_ids:[number,number],reviewer_ids:[number,number],description:string,labels:[string,string],add_labels:[string,string],remove_labels:[string,string],milestone_id:number,remove_source_branch:boolean,allow_collaboration:boolean,allow_maintainer_to_push:boolean,squash:boolean,approvals_before_merge:number},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:400},{code:404},{code:409},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid',resource:'v4',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{title:'string',target_branch:'string',state_event:'string',discussion_locked:'boolean',assignee_id:'number',assignee_ids:['number','number'],reviewer_ids:['number','number'],description:'string',labels:['string','string'],add_labels:['string','string'],remove_labels:['string','string'],milestone_id:'number',remove_source_branch:'boolean',allow_collaboration:'boolean',allow_maintainer_to_push:'boolean',squash:'boolean',approvals_before_merge:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "draft_notes": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:any},{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:any}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{note:string,in_reply_to_discussion_id:string,commit_id:string,resolve_discussion:boolean,position:{base_sha:string,start_sha:string,head_sha:string,position_type:string,new_path:string,new_line:number,old_path:string,old_line:number,width:number,height:number,x:number,y:number,line_range:{start:{line_code:string,type:string,old_line:string,new_line:string},end:{line_code:string,type:string,old_line:string,new_line:string}}}},clientOptions:any}): Promise<[{code:201,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:any}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{note:'string',in_reply_to_discussion_id:'string',commit_id:'string',resolve_discussion:'boolean',position:{base_sha:'string',start_sha:'string',head_sha:'string',position_type:'string',new_path:'string',new_line:'number',old_path:'string',old_line:'number',width:'number',height:'number',x:'number',y:'number',line_range:{start:{line_code:'string',type:'string',old_line:'string',new_line:'string'},end:{line_code:'string',type:'string',old_line:'string',new_line:'string'}}}},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,merge_request_iid:string,draft_note_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:any}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      put: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string,draft_note_id:string},data:{note:string,position:{base_sha:string,start_sha:string,head_sha:string,position_type:string,new_path:string,new_line:number,old_path:string,old_line:number,width:number,height:number,x:number,y:number,line_range:{start:{line_code:string,type:string,old_line:string,new_line:string},end:{line_code:string,type:string,old_line:string,new_line:string}}}},clientOptions:any}): Promise<[{code:200,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:any}},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{note:'string',position:{base_sha:'string',start_sha:'string',head_sha:'string',position_type:'string',new_path:'string',new_line:'number',old_path:'string',old_line:'number',width:'number',height:'number',x:'number',y:'number',line_range:{start:{line_code:'string',type:'string',old_line:'string',new_line:'string'},end:{line_code:'string',type:'string',old_line:'string',new_line:'string'}}}},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,merge_request_iid:string,draft_note_id:string},clientOptions:any}): Promise<[{code:204,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:any}},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      "publish": {
        put: ({params,clientOptions}: {params:{id:string,merge_request_iid:string,draft_note_id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id/publish',resource:'merge_requests',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      },
      "bulk_publish": {
        post: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/bulk_publish',resource:'merge_requests',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    "time_estimate": {
      post: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{duration:string},clientOptions:any}): Promise<[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/time_estimate',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{duration:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "reset_time_estimate": {
      post: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reset_time_estimate',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "add_spent_time": {
      post: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{duration:string},clientOptions:any}): Promise<[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/add_spent_time',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{duration:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "reset_spent_time": {
      post: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reset_spent_time',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "time_stats": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/time_stats',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "participants": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/participants',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "reviewers": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},state:string,created_at:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reviewers',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "commits": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/commits',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "context_commits": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{commits:[string,string]},clientOptions:any}): Promise<[{code:201,data:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{commits:['string','string']},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,query,clientOptions}: {params:{id:string,merge_request_iid:string},query:{commits:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{},query:[{name:'commits',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "changes": {
      get: ({params,query,clientOptions}: {params:{id:string,merge_request_iid:string},query:{unidiff:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string},changes:{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},overflow:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/changes',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[{name:'unidiff',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "diffs": {
      get: ({params,query,clientOptions}: {params:{id:string,merge_request_iid:string},query:{page:string,per_page:string,unidiff:string},clientOptions:any}): Promise<[{code:200,data:{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/diffs',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'unidiff',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "pipelines": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/pipelines',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      post: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:any,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:400},{code:404},{code:405}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/pipelines',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "merge": {
      put: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{merge_commit_message:string,squash_commit_message:string,should_remove_source_branch:boolean,merge_when_pipeline_succeeds:boolean,sha:string,squash:boolean,skip_merge_train:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:400},{code:401},{code:404},{code:405},{code:409},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/merge',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{merge_commit_message:'string',squash_commit_message:'string',should_remove_source_branch:'boolean',merge_when_pipeline_succeeds:'boolean',sha:'string',squash:'boolean',skip_merge_train:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "merge_ref": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200},{code:400}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/merge_ref',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    },
    "cancel_merge_when_pipeline_succeeds": {
      post: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:Date,finished_at:Date,committed_at:Date,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:401},{code:404},{code:405},{code:406}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/cancel_merge_when_pipeline_succeeds',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "rebase": {
      put: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{skip_ci:boolean},clientOptions:any}): Promise<[{code:200},{code:403},{code:404},{code:409}]> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/rebase',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{skip_ci:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "closes_issues": {
      get: ({params,query,clientOptions}: {params:{id:string,merge_request_iid:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{note:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/closes_issues',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "versions": {
      get: ({params,query,clientOptions}: {params:{id:string,merge_request_iid:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string},{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/versions',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      getOne: ({params,query,clientOptions}: {params:{id:string,merge_request_iid:string,version_id:string},query:{unidiff:string},clientOptions:any}): Promise<[{code:200,data:{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string,commits:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},diffs:{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/versions/:version_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'version_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'unidiff',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "approvals": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approvals',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{approvals_required:number},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,merge_status:string,approved:boolean,approvals_required:number,approvals_left:number,require_password_to_approve:boolean,approved_by:[{user:{value:{}}},{user:{value:{}}}],suggested_approvers:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}],approvers:string,approver_groups:string,user_has_approved:boolean,user_can_approve:boolean,approval_rules_left:[{id:number,name:string,rule_type:string},{id:number,name:string,rule_type:string}],has_approval_rules:boolean,merge_request_approvers_available:boolean,multiple_approval_rules_available:boolean,invalid_approvers_rules:[{id:number,name:string,rule_type:string},{id:number,name:string,rule_type:string}]}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approvals',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{approvals_required:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "approve": {
      post: ({params,data,clientOptions}: {params:{id:string,merge_request_iid:string},data:{sha:string,approval_password:string},clientOptions:any}): Promise<[{code:201,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approve',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{sha:'string',approval_password:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "unapprove": {
      post: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:201,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/unapprove',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "reset_approvals": {
      put: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reset_approvals',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    },
    "approval_state": {
      get: ({params,clientOptions}: {params:{id:string,merge_request_iid:string},clientOptions:any}): Promise<[{code:200,data:{approval_rules_overwritten:boolean,rules:[{id:number,name:string,rule_type:string,eligible_approvers:[{value:{}},{value:{}}],approvals_required:number,users:[{value:{}},{value:{}}],groups:[{value:{}},{value:{}}],contains_hidden_groups:boolean,section:string,source_rule:{value:{}},overridden:boolean,code_owner:boolean,approved_by:[{value:{}},{value:{}}],approved:boolean},{id:number,name:string,rule_type:string,eligible_approvers:[{value:{}},{value:{}}],approvals_required:number,users:[{value:{}},{value:{}}],groups:[{value:{}},{value:{}}],contains_hidden_groups:boolean,section:string,source_rule:{value:{}},overridden:boolean,code_owner:boolean,approved_by:[{value:{}},{value:{}}],approved:boolean}]}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approval_state',resource:'projects',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "resource_milestone_events": {
      get: ({params,query,clientOptions}: {params:{id:string,eventable_id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string},{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:eventable_id/resource_milestone_events',resource:'projects',variable:[{name:'id',type:'string'},{name:'eventable_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,event_id:string,eventable_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date,resource_type:string,resource_id:number,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},action:string,state:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:eventable_id/resource_milestone_events/:event_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'event_id',type:'string'},{name:'eventable_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "environments": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,name:string,search:string,states:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date,tier:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},last_deployment:{id:{value:{}},iid:{value:{}},ref:{value:{}},sha:{value:{}},created_at:{value:{}},updated_at:{value:{}},user:{value:{}},environment:{value:{}},deployable:{value:{}},status:{value:{}}},state:string,auto_stop_at:Date},{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date,tier:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},last_deployment:{id:{value:{}},iid:{value:{}},ref:{value:{}},sha:{value:{}},created_at:{value:{}},updated_at:{value:{}},user:{value:{}},environment:{value:{}},deployable:{value:{}},status:{value:{}}},state:string,auto_stop_at:Date}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/environments',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'name',type:'string'},{name:'search',type:'string'},{name:'states',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,external_url:string,tier:string},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:Date}},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/environments',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',external_url:'string',tier:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,environment_id:string},data:{external_url:string,tier:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:Date}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/environments/:environment_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{external_url:'string',tier:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,environment_id:string},clientOptions:any}): Promise<[{code:204,data:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:Date}},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/environments/:environment_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,environment_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:Date}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/environments/:environment_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "stop": {
      post: ({params,data,clientOptions}: {params:{id:string,environment_id:string},data:{force:false},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:Date,updated_at:Date,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:Date}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/environments/:environment_id/stop',resource:'projects',variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{force:false},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "review_apps": {
      delete: ({params,query,clientOptions}: {params:{id:string},query:{limit:string,dry_run:string},clientOptions:any}): Promise<[{code:204,data:{id:number,name:string,slug:string,external_url:string,created_at:Date,updated_at:Date}},{code:400},{code:401},{code:404},{code:409}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/environments/review_apps',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'limit',type:'string'},{name:'dry_run',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "stop_stale": {
      post: ({params,data,clientOptions}: {params:{id:string},data:{beforeDate: Date},clientOptions:any}): Promise<[{code:201},{code:400},{code:401}]> => handler.apply({method:'post',url:'api/v4/projects/:id/environments/stop_stale',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{before:'dateTime'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "error_tracking": {
    "settings": {
      get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/error_tracking/settings',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      patch: ({params,data,clientOptions}: {params:{id:string},data:{active:boolean,integrated:boolean},clientOptions:any}): Promise<[{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'patch',url:'api/v4/projects/:id/error_tracking/settings',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{active:'boolean',integrated:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      put: ({params,data,clientOptions}: {params:{id:string},data:{active:boolean,integrated:boolean},clientOptions:any}): Promise<[{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/error_tracking/settings',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{active:'boolean',integrated:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "client_keys": {
      get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,active:boolean,public_key:string,sentry_dsn:string},{id:number,active:boolean,public_key:string,sentry_dsn:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/error_tracking/client_keys',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,active:boolean,public_key:string,sentry_dsn:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/error_tracking/client_keys',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,key_id:string},clientOptions:any}): Promise<[{code:204,data:{id:number,active:boolean,public_key:string,sentry_dsn:string}},{code:400},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/error_tracking/client_keys/:key_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "freeze_periods": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:Date,updated_at:Date},{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:Date,updated_at:Date}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/freeze_periods',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{freeze_start:string,freeze_end:string,cron_timezone:string},clientOptions:any}): Promise<[{code:201,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:Date,updated_at:Date}},{code:400},{code:401}]> => handler.apply({method:'post',url:'api/v4/projects/:id/freeze_periods',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{freeze_start:'string',freeze_end:'string',cron_timezone:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,freeze_period_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:Date,updated_at:Date}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/freeze_periods/:freeze_period_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'freeze_period_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,freeze_period_id:string},data:{freeze_start:string,freeze_end:string,cron_timezone:string},clientOptions:any}): Promise<[{code:200,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:Date,updated_at:Date}},{code:400},{code:401}]> => handler.apply({method:'put',url:'api/v4/projects/:id/freeze_periods/:freeze_period_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'freeze_period_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{freeze_start:'string',freeze_end:'string',cron_timezone:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,freeze_period_id:string},clientOptions:any}): Promise<[{code:204,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:Date,updated_at:Date}},{code:401}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/freeze_periods/:freeze_period_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'freeze_period_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "services": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean},{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/services',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "apple-app-store": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{app_store_issuer_id:string,app_store_key_id:string,app_store_private_key_file_name:string,app_store_private_key:string,app_store_protected_refs:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/apple-app-store',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{app_store_issuer_id:'string',app_store_key_id:'string',app_store_private_key_file_name:'string',app_store_private_key:'string',app_store_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "asana": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_key:string,restrict_to_branch:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/asana',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_key:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "assembla": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,subdomain:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/assembla',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',subdomain:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "bamboo": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{bamboo_url:string,build_key:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/bamboo',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{bamboo_url:'string',build_key:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "bugzilla": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/bugzilla',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "buildkite": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,project_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/buildkite',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',project_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "campfire": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,subdomain:string,room:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/campfire',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',subdomain:'string',room:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "confluence": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{confluence_url:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/confluence',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{confluence_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "custom-issue-tracker": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/custom-issue-tracker',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "datadog": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_key:string,datadog_site:string,api_url:string,archive_trace_events:boolean,datadog_service:string,datadog_env:string,datadog_tags:string,pipeline_events:boolean,build_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/datadog',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_key:'string',datadog_site:'string',api_url:'string',archive_trace_events:'boolean',datadog_service:'string',datadog_env:'string',datadog_tags:'string',pipeline_events:'boolean',build_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "diffblue-cover": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{diffblue_license_key:string,diffblue_access_token_name:string,diffblue_access_token_secret:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/diffblue-cover',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{diffblue_license_key:'string',diffblue_access_token_name:'string',diffblue_access_token_secret:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "discord": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/discord',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "drone-ci": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,drone_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/drone-ci',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',drone_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "emails-on-push": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{recipients:string,disable_diffs:boolean,send_from_committer_email:boolean,branches_to_be_notified:string,push_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/emails-on-push',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{recipients:'string',disable_diffs:'boolean',send_from_committer_email:'boolean',branches_to_be_notified:'string',push_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "external-wiki": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{external_wiki_url:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/external-wiki',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{external_wiki_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "gitlab-slack-application": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/gitlab-slack-application',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "google-play": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{package_name:string,service_account_key_file_name:string,service_account_key:string,google_play_protected_refs:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/google-play',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{package_name:'string',service_account_key_file_name:'string',service_account_key:'string',google_play_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "hangouts-chat": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/hangouts-chat',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "harbor": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,project_name:string,username:string,password:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/harbor',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',project_name:'string',username:'string',password:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "irker": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{recipients:string,default_irc_uri:string,server_host:string,server_port:number,colorize_messages:boolean,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/irker',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{recipients:'string',default_irc_uri:'string',server_host:'string',server_port:'number',colorize_messages:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "jenkins": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{jenkins_url:string,project_name:string,enable_ssl_verification:boolean,username:string,password:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/jenkins',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{jenkins_url:'string',project_name:'string',enable_ssl_verification:'boolean',username:'string',password:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "jira": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,password:string,api_url:string,jira_auth_type:number,username:string,jira_issue_transition_automatic:boolean,jira_issue_transition_id:string,jira_issue_prefix:string,jira_issue_regex:string,issues_enabled:boolean,project_keys:[string,string],comment_on_event_enabled:boolean,commit_events:boolean,merge_requests_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/jira',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',password:'string',api_url:'string',jira_auth_type:'number',username:'string',jira_issue_transition_automatic:'boolean',jira_issue_transition_id:'string',jira_issue_prefix:'string',jira_issue_regex:'string',issues_enabled:'boolean',project_keys:['string','string'],comment_on_event_enabled:'boolean',commit_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mattermost-slash-commands": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mattermost-slash-commands',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "slack-slash-commands": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/slack-slash-commands',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "packagist": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{username:string,token:string,server:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/packagist',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{username:'string',token:'string',server:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "phorge": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/phorge',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pipelines-email": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{recipients:string,notify_only_broken_pipelines:boolean,notify_only_default_branch:boolean,branches_to_be_notified:string,pipeline_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pipelines-email',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{recipients:'string',notify_only_broken_pipelines:'boolean',notify_only_default_branch:'boolean',branches_to_be_notified:'string',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pivotaltracker": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,restrict_to_branch:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pivotaltracker',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "prometheus": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_url:string,google_iap_audience_client_id:string,google_iap_service_account_json:string,manual_configuration:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/prometheus',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_url:'string',google_iap_audience_client_id:'string',google_iap_service_account_json:'string',manual_configuration:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pumble": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pumble',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pushover": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_key:string,user_key:string,priority:string,device:string,sound:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pushover',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_key:'string',user_key:'string',priority:'string',device:'string',sound:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "redmine": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/redmine',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "ewm": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/ewm',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "youtrack": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/youtrack',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "clickup": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/clickup',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "slack": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/slack',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "microsoft-teams": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/microsoft-teams',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mattermost": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mattermost',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "teamcity": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{teamcity_url:string,build_type:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/teamcity',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{teamcity_url:'string',build_type:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "telegram": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,room:string,hostname:string,thread:number,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/telegram',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',room:'string',hostname:'string',thread:'number',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "unify-circuit": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/unify-circuit',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "webex-teams": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/webex-teams',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "zentao": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,api_token:string,zentao_product_xid:string,api_url:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/zentao',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',api_token:'string',zentao_product_xid:'string',api_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "squash-tm": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,token:string,issues_events:boolean,confidential_issues_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/squash-tm',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',token:'string',issues_events:'boolean',confidential_issues_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "github": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,repository_url:string,static_context:boolean,pipeline_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/github',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',repository_url:'string',static_context:'boolean',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "git-guardian": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/git-guardian',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "google-cloud-platform-artifact-registry": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{artifact_registry_project_id:string,artifact_registry_repositories:string,artifact_registry_location:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/google-cloud-platform-artifact-registry',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{artifact_registry_project_id:'string',artifact_registry_repositories:'string',artifact_registry_location:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "google-cloud-platform-workload-identity-federation": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{workload_identity_federation_project_id:string,workload_identity_federation_project_number:string,workload_identity_pool_id:string,workload_identity_pool_provider_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/google-cloud-platform-workload-identity-federation',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{workload_identity_federation_project_id:'string',workload_identity_federation_project_number:'string',workload_identity_pool_id:'string',workload_identity_pool_provider_id:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mock-ci": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{mock_service_url:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mock-ci',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{mock_service_url:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mock-monitoring": {
      put: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mock-monitoring',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    delete: ({params,clientOptions}: {params:{id:string,slug:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/services/:slug',resource:'v4',variable:[{name:'id',type:'string'},{name:'slug',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,slug:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean,properties:any}},{code:400},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/services/:slug',resource:'v4',variable:[{name:'id',type:'string'},{name:'slug',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "mattermost_slash_commands": {
      "trigger": {
        post: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/services/mattermost_slash_commands/trigger',resource:'services',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      }
    },
    "slack_slash_commands": {
      "trigger": {
        post: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/services/slack_slash_commands/trigger',resource:'services',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      }
    }
  },
  "integrations": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean},{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/integrations',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "apple-app-store": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{app_store_issuer_id:string,app_store_key_id:string,app_store_private_key_file_name:string,app_store_private_key:string,app_store_protected_refs:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/apple-app-store',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{app_store_issuer_id:'string',app_store_key_id:'string',app_store_private_key_file_name:'string',app_store_private_key:'string',app_store_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "asana": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_key:string,restrict_to_branch:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/asana',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_key:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "assembla": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,subdomain:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/assembla',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',subdomain:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "bamboo": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{bamboo_url:string,build_key:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/bamboo',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{bamboo_url:'string',build_key:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "bugzilla": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/bugzilla',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "buildkite": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,project_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/buildkite',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',project_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "campfire": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,subdomain:string,room:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/campfire',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',subdomain:'string',room:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "confluence": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{confluence_url:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/confluence',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{confluence_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "custom-issue-tracker": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/custom-issue-tracker',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "datadog": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_key:string,datadog_site:string,api_url:string,archive_trace_events:boolean,datadog_service:string,datadog_env:string,datadog_tags:string,pipeline_events:boolean,build_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/datadog',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_key:'string',datadog_site:'string',api_url:'string',archive_trace_events:'boolean',datadog_service:'string',datadog_env:'string',datadog_tags:'string',pipeline_events:'boolean',build_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "diffblue-cover": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{diffblue_license_key:string,diffblue_access_token_name:string,diffblue_access_token_secret:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/diffblue-cover',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{diffblue_license_key:'string',diffblue_access_token_name:'string',diffblue_access_token_secret:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "discord": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/discord',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "drone-ci": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,drone_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/drone-ci',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',drone_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "emails-on-push": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{recipients:string,disable_diffs:boolean,send_from_committer_email:boolean,branches_to_be_notified:string,push_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/emails-on-push',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{recipients:'string',disable_diffs:'boolean',send_from_committer_email:'boolean',branches_to_be_notified:'string',push_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "external-wiki": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{external_wiki_url:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/external-wiki',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{external_wiki_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "gitlab-slack-application": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/gitlab-slack-application',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "google-play": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{package_name:string,service_account_key_file_name:string,service_account_key:string,google_play_protected_refs:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/google-play',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{package_name:'string',service_account_key_file_name:'string',service_account_key:'string',google_play_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "hangouts-chat": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/hangouts-chat',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "harbor": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,project_name:string,username:string,password:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/harbor',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',project_name:'string',username:'string',password:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "irker": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{recipients:string,default_irc_uri:string,server_host:string,server_port:number,colorize_messages:boolean,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/irker',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{recipients:'string',default_irc_uri:'string',server_host:'string',server_port:'number',colorize_messages:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "jenkins": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{jenkins_url:string,project_name:string,enable_ssl_verification:boolean,username:string,password:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/jenkins',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{jenkins_url:'string',project_name:'string',enable_ssl_verification:'boolean',username:'string',password:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "jira": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,password:string,api_url:string,jira_auth_type:number,username:string,jira_issue_transition_automatic:boolean,jira_issue_transition_id:string,jira_issue_prefix:string,jira_issue_regex:string,issues_enabled:boolean,project_keys:[string,string],comment_on_event_enabled:boolean,commit_events:boolean,merge_requests_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/jira',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',password:'string',api_url:'string',jira_auth_type:'number',username:'string',jira_issue_transition_automatic:'boolean',jira_issue_transition_id:'string',jira_issue_prefix:'string',jira_issue_regex:'string',issues_enabled:'boolean',project_keys:['string','string'],comment_on_event_enabled:'boolean',commit_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mattermost-slash-commands": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mattermost-slash-commands',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "slack-slash-commands": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/slack-slash-commands',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "packagist": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{username:string,token:string,server:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/packagist',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{username:'string',token:'string',server:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "phorge": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/phorge',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pipelines-email": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{recipients:string,notify_only_broken_pipelines:boolean,notify_only_default_branch:boolean,branches_to_be_notified:string,pipeline_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pipelines-email',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{recipients:'string',notify_only_broken_pipelines:'boolean',notify_only_default_branch:'boolean',branches_to_be_notified:'string',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pivotaltracker": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,restrict_to_branch:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pivotaltracker',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "prometheus": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_url:string,google_iap_audience_client_id:string,google_iap_service_account_json:string,manual_configuration:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/prometheus',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_url:'string',google_iap_audience_client_id:'string',google_iap_service_account_json:'string',manual_configuration:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pumble": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pumble',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "pushover": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{api_key:string,user_key:string,priority:string,device:string,sound:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pushover',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{api_key:'string',user_key:'string',priority:'string',device:'string',sound:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "redmine": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/redmine',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "ewm": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/ewm',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',new_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "youtrack": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/youtrack',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "clickup": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/clickup',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "slack": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/slack',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "microsoft-teams": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/microsoft-teams',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mattermost": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mattermost',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "teamcity": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{teamcity_url:string,build_type:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/teamcity',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{teamcity_url:'string',build_type:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "telegram": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,room:string,hostname:string,thread:number,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/telegram',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',room:'string',hostname:'string',thread:'number',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "unify-circuit": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/unify-circuit',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "webex-teams": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/webex-teams',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "zentao": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,api_token:string,zentao_product_xid:string,api_url:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/zentao',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',api_token:'string',zentao_product_xid:'string',api_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "squash-tm": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{url:string,token:string,issues_events:boolean,confidential_issues_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/squash-tm',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',token:'string',issues_events:'boolean',confidential_issues_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "github": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string,repository_url:string,static_context:boolean,pipeline_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/github',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string',repository_url:'string',static_context:'boolean',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "git-guardian": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/git-guardian',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "google-cloud-platform-artifact-registry": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{artifact_registry_project_id:string,artifact_registry_repositories:string,artifact_registry_location:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/google-cloud-platform-artifact-registry',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{artifact_registry_project_id:'string',artifact_registry_repositories:'string',artifact_registry_location:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "google-cloud-platform-workload-identity-federation": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{workload_identity_federation_project_id:string,workload_identity_federation_project_number:string,workload_identity_pool_id:string,workload_identity_pool_provider_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/google-cloud-platform-workload-identity-federation',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{workload_identity_federation_project_id:'string',workload_identity_federation_project_number:'string',workload_identity_pool_id:'string',workload_identity_pool_provider_id:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mock-ci": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{mock_service_url:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mock-ci',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{mock_service_url:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    },
    "mock-monitoring": {
      put: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mock-monitoring',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    delete: ({params,clientOptions}: {params:{id:string,slug:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/integrations/:slug',resource:'v4',variable:[{name:'id',type:'string'},{name:'slug',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,slug:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,slug:number,created_at:Date,updated_at:Date,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean,properties:any}},{code:400},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/integrations/:slug',resource:'v4',variable:[{name:'id',type:'string'},{name:'slug',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "mattermost_slash_commands": {
      "trigger": {
        post: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/integrations/mattermost_slash_commands/trigger',resource:'integrations',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      }
    },
    "slack_slash_commands": {
      "trigger": {
        post: ({params,data,clientOptions}: {params:{id:string},data:{token:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/integrations/slack_slash_commands/trigger',resource:'integrations',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      }
    }
  },
  "invitations": {
    post: ({params,data,clientOptions}: {params:{id:string},data:{access_level:number,email:[string,string],user_id:[string,string],expires_at:Date,invite_source:string},clientOptions:any}): Promise<[{code:201,data:{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/invitations',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{access_level:'number',email:['string','string'],user_id:['string','string'],expires_at:'dateTime',invite_source:'invitations-api'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,query:string},clientOptions:any}): Promise<[{code:200,data:[{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string},{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/invitations',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'query',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,email:string},data:{access_level:number,expires_at:Date},clientOptions:any}): Promise<[{code:200,data:{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}}]> => handler.apply({method:'put',url:'api/v4/projects/:id/invitations/:email',resource:'v4',variable:[{name:'id',type:'string'},{name:'email',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{access_level:'number',expires_at:'dateTime'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,email:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404},{code:409}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/invitations/:email',resource:'v4',variable:[{name:'id',type:'string'},{name:'email',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "issues": {
    "links": {
      get: ({params,clientOptions}: {params:{id:string,issue_iid:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string,has_tasks:string,task_status:string,_links:{self:string,notes:string,award_emoji:string,project:string,closed_as_duplicate_of:string},references:{short:{value:{}},relative:{value:{}},full:{value:{}}},severity:string,subscribed:string,moved_to_id:string,imported:string,imported_from:string,service_desk_reply_to:string,epic_iid:string,epic:{id:{value:{}},iid:{value:{}},title:{value:{}},url:{value:{}},group_id:{value:{}},human_readable_end_date:{value:{}},human_readable_timestamp:{value:{}}},iteration:{id:{value:{}},iid:{value:{}},sequence:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},start_date:{value:{}},due_date:{value:{}},web_url:{value:{}}},health_status:string,issue_link_id:string,link_type:string,link_created_at:string,link_updated_at:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string,has_tasks:string,task_status:string,_links:{self:string,notes:string,award_emoji:string,project:string,closed_as_duplicate_of:string},references:{short:{value:{}},relative:{value:{}},full:{value:{}}},severity:string,subscribed:string,moved_to_id:string,imported:string,imported_from:string,service_desk_reply_to:string,epic_iid:string,epic:{id:{value:{}},iid:{value:{}},title:{value:{}},url:{value:{}},group_id:{value:{}},human_readable_end_date:{value:{}},human_readable_timestamp:{value:{}}},iteration:{id:{value:{}},iid:{value:{}},sequence:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},start_date:{value:{}},due_date:{value:{}},web_url:{value:{}}},health_status:string,issue_link_id:string,link_type:string,link_created_at:string,link_updated_at:string}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:issue_iid/links',resource:'projects',variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string,issue_iid:string},data:{target_project_id:string,target_issue_iid:string,link_type:string},clientOptions:any}): Promise<[{code:201,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}},{code:400},{code:401}]> => handler.apply({method:'post',url:'api/v4/projects/:id/issues/:issue_iid/links',resource:'projects',variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{target_project_id:'string',target_issue_iid:'string',link_type:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,issue_iid:string,issue_link_id:string},clientOptions:any}): Promise<[{code:200,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:issue_iid/links/:issue_link_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'},{name:'issue_link_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,issue_iid:string,issue_link_id:string},clientOptions:any}): Promise<[{code:204,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:Date,updated_at:Date,closed_at:Date,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:Date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/issues/:issue_iid/links/:issue_link_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'},{name:'issue_link_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "resource_milestone_events": {
      get: ({params,query,clientOptions}: {params:{id:string,eventable_id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string},{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:eventable_id/resource_milestone_events',resource:'projects',variable:[{name:'id',type:'string'},{name:'eventable_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,event_id:string,eventable_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date,resource_type:string,resource_id:number,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},action:string,state:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:eventable_id/resource_milestone_events/:event_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'event_id',type:'string'},{name:'eventable_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "ci": {
    "lint": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{sha:string,content_ref:string,dry_run:string,include_jobs:string,ref:string,dry_run_ref:string},clientOptions:any}): Promise<[{code:200,data:{valid:boolean,errors:[string,string],warnings:[string,string],merged_yaml:string,includes:[object,object],jobs:[object,object]}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/ci/lint',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'sha',type:'string'},{name:'content_ref',type:'string'},{name:'dry_run',type:'string'},{name:'include_jobs',type:'string'},{name:'ref',type:'string'},{name:'dry_run_ref',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{content:string,dry_run:false,include_jobs:boolean,ref:string},clientOptions:any}): Promise<[{code:200,data:{valid:boolean,errors:[string,string],warnings:[string,string],merged_yaml:string,includes:[object,object],jobs:[object,object]}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/ci/lint',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{content:'string',dry_run:false,include_jobs:'boolean',ref:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "packages": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string,package_type:string,package_name:string,package_version:string,include_versionless:string,status:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:Date,last_downloaded_at:Date,project_id:number,project_path:string,tags:string,pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},versions:{id:{value:{}},version:{value:{}},created_at:{value:{}},tags:{value:{}},pipeline:{value:{}}}},{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:Date,last_downloaded_at:Date,project_id:number,project_path:string,tags:string,pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},versions:{id:{value:{}},version:{value:{}},created_at:{value:{}},tags:{value:{}},pipeline:{value:{}}}}]},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'package_type',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'include_versionless',type:'string'},{name:'status',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    "maven": {
      "*path": {
        getOne: ({params,query,clientOptions}: {params:{id:string,file_name:string},query:{path:string},clientOptions:any}): Promise<[{code:200},{code:302},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/maven/*path/:file_name',resource:'packages',variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],headers:{},query:[{name:'path',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
        put: ({params,data,clientOptions}: {params:{id:string,file_name:string},data:{path:string,file:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/maven/*path/:file_name',resource:'packages',variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{path:'string',file:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
        "authorize": {
          put: ({params,data,clientOptions}: {params:{id:string,file_name:string},data:{path:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/maven/*path/:file_name/authorize',resource:'maven',variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{path:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
        }
      }
    },
    getOne: ({params,clientOptions}: {params:{id:string,package_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:Date,last_downloaded_at:Date,project_id:number,project_path:string,tags:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},pipelines:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},versions:{id:string,version:string,created_at:string,tags:string,pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}}}}},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/:package_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,package_id:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/:package_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "package_files": {
      get: ({params,query,clientOptions}: {params:{id:string,package_id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,package_id:number,created_at:Date,file_name:string,size:number,file_md5:string,file_sha1:string,file_sha256:string,pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}}},{id:number,package_id:number,created_at:Date,file_name:string,size:number,file_md5:string,file_sha1:string,file_sha256:string,pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}}}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/:package_id/package_files',resource:'projects',variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,package_id:string,package_file_id:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/:package_id/package_files/:package_file_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'package_id',type:'string'},{name:'package_file_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    },
    "pipelines": {
      get: ({params,query,clientOptions}: {params:{id:string,package_id:string},query:{page:string,per_page:string,cursor:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:Date,updated_at:Date,web_url:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/:package_id/pipelines',resource:'projects',variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'cursor',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "composer": {
      post: ({params,data,clientOptions}: {params:{id:string},data:{branch:string,tag:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/composer',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{branch:'string',tag:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      "archives": {
        "*package_name": {
          get: ({params,query,clientOptions}: {params:{id:string},query:{sha:string,package_name:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/composer/archives/*package_name',resource:'composer',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'sha',type:'string'},{name:'package_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      }
    },
    "conan": {
      "v1": {
        "ping": {
          get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/ping',resource:'conan',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
        },
        "conans": {
          "search": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{q:string},clientOptions:any}): Promise<[{code:200},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/search',resource:'v1',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'q',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          getOne: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:any}): Promise<[{code:200,data:{recipe_snapshot:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel',resource:'conan',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
          delete: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel',resource:'conan',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
          "packages": {
            getOne: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:any}): Promise<[{code:200,data:{package_snapshot:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
            "digest": {
              get: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:any}): Promise<[{code:200,data:{package_urls:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/digest',resource:'conans',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
            },
            "download_urls": {
              get: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:any}): Promise<[{code:200,data:{package_urls:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/download_urls',resource:'conans',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
            },
            "upload_urls": {
              post: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:any}): Promise<[{code:200,data:{upload_urls:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/upload_urls',resource:'conans',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
            }
          },
          "digest": {
            get: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:any}): Promise<[{code:200,data:{recipe_urls:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/digest',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
          },
          "download_urls": {
            get: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:any}): Promise<[{code:200,data:{recipe_urls:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/download_urls',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
          },
          "upload_urls": {
            post: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:any}): Promise<[{code:200,data:{upload_urls:any}},{code:400},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/upload_urls',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
          }
        },
        "users": {
          "authenticate": {
            get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/users/authenticate',resource:'v1',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
          },
          "check_credentials": {
            get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/users/check_credentials',resource:'v1',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
          }
        },
        "files": {
          "export": {
            getOne: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'file_name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
            put: ({params,data,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string},data:{file:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'file_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{file:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
            "authorize": {
              put: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name/authorize',resource:'files',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'file_name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
            }
          },
          "package": {
            getOne: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string},clientOptions:any}): Promise<[{code:200},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'conan_package_reference',type:'string'},{name:'package_revision',type:'string'},{name:'file_name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
            put: ({params,data,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string},data:{file:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name',resource:'v1',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'conan_package_reference',type:'string'},{name:'package_revision',type:'string'},{name:'file_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{file:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
            "authorize": {
              put: ({params,clientOptions}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name/authorize',resource:'files',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'conan_package_reference',type:'string'},{name:'package_revision',type:'string'},{name:'file_name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
            }
          }
        }
      }
    },
    "debian": {
      "dists": {
        "*distribution": {
          "Release.gpg": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/Release.gpg',resource:'dists',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "Release": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/Release',resource:'dists',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "InRelease": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/InRelease',resource:'dists',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "debian-installer": {
            "binary-{{architecture}}": {
              "Packages": {
                get: ({params,query,clientOptions}: {params:{id:string,component:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/debian-installer/binary-{{architecture}}/Packages',resource:'debian-installer',variable:[{name:'id',type:'string'},{name:'component',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
              },
              "by-hash": {
                "SHA256": {
                  getOne: ({params,query,clientOptions}: {params:{id:string,component:string,file_sha256:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/debian-installer/binary-{{architecture}}/by-hash/SHA256/:file_sha256',resource:'binary-{{architecture}}',variable:[{name:'id',type:'string'},{name:'component',type:'string'},{name:'file_sha256',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
                }
              }
            }
          },
          "source": {
            "Sources": {
              get: ({params,query,clientOptions}: {params:{id:string,component:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/source/Sources',resource:'*distribution',variable:[{name:'id',type:'string'},{name:'component',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            },
            "by-hash": {
              "SHA256": {
                getOne: ({params,query,clientOptions}: {params:{id:string,component:string,file_sha256:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/source/by-hash/SHA256/:file_sha256',resource:'source',variable:[{name:'id',type:'string'},{name:'component',type:'string'},{name:'file_sha256',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
              }
            }
          },
          "binary-{{architecture}}": {
            "Packages": {
              get: ({params,query,clientOptions}: {params:{id:string,component:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/binary-{{architecture}}/Packages',resource:'*distribution',variable:[{name:'id',type:'string'},{name:'component',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            },
            "by-hash": {
              "SHA256": {
                getOne: ({params,query,clientOptions}: {params:{id:string,component:string,file_sha256:string},query:{distribution:string},clientOptions:any}): Promise<[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/binary-{{architecture}}/by-hash/SHA256/:file_sha256',resource:'binary-{{architecture}}',variable:[{name:'id',type:'string'},{name:'component',type:'string'},{name:'file_sha256',type:'string'}],headers:{},query:[{name:'distribution',type:'string'}],data:null}, [client, { params, query, clientOptions}])
              }
            }
          }
        }
      },
      "pool": {
        getOne: ({params,clientOptions}: {params:{id:string,distribution:string,letter:string,package_name:string,package_version:string,file_name:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/pool/:distribution/:letter/:package_name/:package_version/:file_name',resource:'packages',variable:[{name:'id',type:'string'},{name:'distribution',type:'string'},{name:'letter',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'file_name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      },
      put: ({params,data,clientOptions}: {params:{id:string,file_name:string},data:{file:string,component:string,distribution:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/debian/:file_name',resource:'projects',variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{file:'binary',component:'string',distribution:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      "authorize": {
        put: ({params,data,clientOptions}: {params:{id:string,file_name:string},data:{component:string,distribution:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/debian/:file_name/authorize',resource:'packages',variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{component:'string',distribution:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
      }
    },
    "generic": {
      "*package_version": {
        "(*path": {
          "){{file_name}}": {
            put: ({params,data,clientOptions}: {params:{id:string,package_name:string},data:{package_version:string,file:string,path:string,status:string,select:string},clientOptions:any}): Promise<[{code:200},{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}',resource:'*package_version',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{package_version:'string',file:'binary',path:'string',status:'string',select:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
            get: ({params,query,clientOptions}: {params:{id:string,package_name:string},query:{package_version:string,path:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}',resource:'*package_version',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],headers:{},query:[{name:'package_version',type:'string'},{name:'path',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
            "authorize": {
              put: ({params,data,clientOptions}: {params:{id:string,package_name:string},data:{package_version:string,path:number,status:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}/authorize',resource:'(*path',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{package_version:'string',path:'number',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
            }
          }
        }
      }
    },
    "go": {
      "*module_name": {
        "@v": {
          "list": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{module_name:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/go/*module_name/@v/list',resource:'*module_name',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'module_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "{{module_version}}.info": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{module_name:string},clientOptions:any}): Promise<[{code:200,data:{Version:string,Time:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/go/*module_name/@v/{{module_version}}.info',resource:'*module_name',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'module_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "{{module_version}}.mod": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{module_name:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/go/*module_name/@v/{{module_version}}.mod',resource:'*module_name',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'module_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "{{module_version}}.zip": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{module_name:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/go/*module_name/@v/{{module_version}}.zip',resource:'*module_name',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'module_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          }
        }
      }
    },
    "helm": {
      "index.yaml": {
        get: ({params,clientOptions}: {params:{id:string,channel:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/helm/:channel/index.yaml',resource:'packages',variable:[{name:'id',type:'string'},{name:'channel',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      },
      "charts": {
        "{{file_name}}.tgz": {
          get: ({params,clientOptions}: {params:{id:string,channel:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/helm/:channel/charts/{{file_name}}.tgz',resource:'helm',variable:[{name:'id',type:'string'},{name:'channel',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
        }
      },
      "api": {
        "charts": {
          post: ({params,data,clientOptions}: {params:{id:string,channel:string},data:{chart:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/helm/api/:channel/charts',resource:'helm',variable:[{name:'id',type:'string'},{name:'channel',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{chart:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
          "authorize": {
            post: ({params,clientOptions}: {params:{id:string,channel:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/helm/api/:channel/charts/authorize',resource:'api',variable:[{name:'id',type:'string'},{name:'channel',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
          }
        }
      }
    },
    "ml_models": {
      "files": {
        "(*path": {
          "){{file_name}}": {
            put: ({params,data,clientOptions}: {params:{id:string,model_version_id:string},data:{file:string,path:string,status:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}',resource:'files',variable:[{name:'id',type:'string'},{name:'model_version_id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{file:'binary',path:'string',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
            get: ({params,query,clientOptions}: {params:{id:string,model_version_id:string},query:{path:string,status:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}',resource:'files',variable:[{name:'id',type:'string'},{name:'model_version_id',type:'string'}],headers:{},query:[{name:'path',type:'string'},{name:'status',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
            "authorize": {
              put: ({params,data,clientOptions}: {params:{id:string,model_version_id:string},data:{path:string,status:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}/authorize',resource:'(*path',variable:[{name:'id',type:'string'},{name:'model_version_id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{path:'string',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
            }
          }
        }
      }
    },
    "npm": {
      "*package_name": {
        get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string},clientOptions:any}): Promise<[{code:200,data:{name:string,versions:any,'dist-tags':any}},{code:302},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/npm/*package_name',resource:'packages',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'package_name',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
        "-": {
          "*file_name": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string,file_name:string},clientOptions:any}): Promise<[{code:200},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/npm/*package_name/-/*file_name',resource:'*package_name',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'package_name',type:'string'},{name:'file_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          }
        }
      },
      put: ({params,data,clientOptions}: {params:{id:string,package_name:string},data:{versions:any},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/npm/:package_name',resource:'projects',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{versions:'object'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      "-": {
        "npm": {
          "v1": {
            "security": {
              "advisories": {
                "bulk": {
                  post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:307},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/npm/-/npm/v1/security/advisories/bulk',resource:'security',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
                }
              },
              "audits": {
                "quick": {
                  post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:307},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/npm/-/npm/v1/security/audits/quick',resource:'security',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
                }
              }
            }
          }
        },
        "package": {
          "*package_name": {
            "dist-tags": {
              get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string},clientOptions:any}): Promise<[{code:200,data:{dist_tags:any}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags',resource:'package',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'package_name',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
              put: ({params,data,clientOptions}: {params:{id:string,tag:string},data:{package_name:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags/:tag',resource:'package',variable:[{name:'id',type:'string'},{name:'tag',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{package_name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
              delete: ({params,query,clientOptions}: {params:{id:string,tag:string},query:{package_name:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags/:tag',resource:'package',variable:[{name:'id',type:'string'},{name:'tag',type:'string'}],headers:{},query:[{name:'package_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            }
          }
        }
      }
    },
    "nuget": {
      put: ({params,data,clientOptions}: {params:{id:string},data:{package:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{package:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      "index": {
        get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{version:string,resources:[object,object]}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/index',resource:'packages',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      },
      "authorize": {
        put: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/authorize',resource:'packages',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      },
      "symbolpackage": {
        put: ({params,data,clientOptions}: {params:{id:string},data:{package:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/symbolpackage',resource:'packages',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{package:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
        "authorize": {
          put: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/symbolpackage/authorize',resource:'nuget',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
        }
      },
      "*package_name": {
        "*package_version": {
          delete: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string,package_version:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/nuget/*package_name/*package_version',resource:'nuget',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'package_name',type:'string'},{name:'package_version',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      },
      "symbolfiles": {
        "*file_name": {
          "*signature": {
            "*same_file_name": {
              get: ({params,query,clientOptions}: {params:{id:string},query:{file_name:string,signature:string,same_file_name:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name',resource:'*file_name',variable:[{name:'id',type:'string'}],headers:{Symbolchecksum:'<string>'},query:[{name:'file_name',type:'string'},{name:'signature',type:'string'},{name:'same_file_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            }
          }
        }
      },
      "v2": {
        get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/v2',resource:'packages',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
        put: ({params,data,clientOptions}: {params:{id:string},data:{package:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/v2',resource:'packages',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{package:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
        "$metadata": {
          get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/v2/$metadata',resource:'nuget',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
        },
        "authorize": {
          put: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/v2/authorize',resource:'nuget',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
        },
        "FindPackagesById": {
          "(": {
            ")": {
              get: ({params,query,clientOptions}: {params:{project_id:string},query:{id:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:project_id/packages/nuget/v2/FindPackagesById/(/)',resource:'FindPackagesById',variable:[{name:'project_id',type:'string'}],headers:{},query:[{name:'id',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            }
          }
        },
        "Packages": {
          "(": {
            ")": {
              get: ({params,query,clientOptions}: {params:{project_id:string},query:{$filter:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:project_id/packages/nuget/v2/Packages/(/)',resource:'Packages',variable:[{name:'project_id',type:'string'}],headers:{},query:[{name:'$filter',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            }
          },
          "(Id='*package_name',Version='*package_version'": {
            ")": {
              get: ({params,query,clientOptions}: {params:{project_id:string},query:{package_name:string,package_version:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:project_id/packages/nuget/v2/Packages/(Id=\'*package_name\',Version=\'*package_version\'/)',resource:'Packages',variable:[{name:'project_id',type:'string'}],headers:{},query:[{name:'package_name',type:'string'},{name:'package_version',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            }
          }
        }
      },
      "metadata": {
        "*package_name": {
          "index": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string},clientOptions:any}): Promise<[{code:200,data:{count:number,items:[{'@id':string,lower:string,upper:string,count:number,items:[{value:{}},{value:{}}]},{'@id':string,lower:string,upper:string,count:number,items:[{value:{}},{value:{}}]}]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/metadata/*package_name/index',resource:'metadata',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'package_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "*package_version": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string,package_version:string},clientOptions:any}): Promise<[{code:200,data:{'@id':string,packageContent:string,catalogEntry:{'@id':string,dependencyGroups:[{value:{}},{value:{}}],id:string,version:string,tags:string,packageContent:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string,published:string}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/metadata/*package_name/*package_version',resource:'metadata',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'package_name',type:'string'},{name:'package_version',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          }
        }
      },
      "query": {
        get: ({params,query,clientOptions}: {params:{id:string},query:{q:string,skip:string,take:string,prerelease:string},clientOptions:any}): Promise<[{code:200,data:{totalHits:number,data:[{'@type':string,id:string,title:string,totalDownloads:number,verified:boolean,version:string,versions:{value:{}},tags:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string},{'@type':string,id:string,title:string,totalDownloads:number,verified:boolean,version:string,versions:{value:{}},tags:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string}]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/query',resource:'packages',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'q',type:'string'},{name:'skip',type:'string'},{name:'take',type:'string'},{name:'prerelease',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "download": {
        "*package_name": {
          "index": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string},clientOptions:any}): Promise<[{code:200,data:{versions:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/download/*package_name/index',resource:'download',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'package_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          },
          "*package_version": {
            "*package_filename": {
              get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string,package_version:string,package_filename:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/download/*package_name/*package_version/*package_filename',resource:'*package_name',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_filename',type:'string'}],data:null}, [client, { params, query, clientOptions}])
            }
          }
        }
      }
    },
    "pypi": {
      post: ({params,data,clientOptions}: {params:{id:string},data:{content:string,name:string,version:string,requires_python:string,md5_digest:string,sha256_digest:string,metadata_version:string,author_email:string,description:string,description_content_type:string,summary:string,keywords:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/pypi',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{content:'binary',name:'string',version:'string',requires_python:'string',md5_digest:'string',sha256_digest:'string',metadata_version:'string',author_email:'string',description:'string',description_content_type:'string',summary:'string',keywords:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      "files": {
        "*file_identifier": {
          get: ({params,query,clientOptions}: {params:{id:string,sha256:string},query:{file_identifier:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/pypi/files/:sha256/*file_identifier',resource:'pypi',variable:[{name:'id',type:'string'},{name:'sha256',type:'string'}],headers:{},query:[{name:'file_identifier',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      },
      "simple": {
        get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/pypi/simple',resource:'packages',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
        "*package_name": {
          get: ({params,query,clientOptions}: {params:{id:string},query:{package_name:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/pypi/simple/*package_name',resource:'pypi',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'package_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      },
      "authorize": {
        post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/pypi/authorize',resource:'packages',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    "rpm": {
      post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rpm',resource:'projects',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      "repodata": {
        "*file_name": {
          get: ({params,query,clientOptions}: {params:{id:string},query:{file_name:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rpm/repodata/*file_name',resource:'rpm',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'file_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      },
      "*package_file_id": {
        "*file_name": {
          get: ({params,query,clientOptions}: {params:{id:string},query:{package_file_id:string,file_name:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rpm/*package_file_id/*file_name',resource:'rpm',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'package_file_id',type:'string'},{name:'file_name',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      },
      "authorize": {
        post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rpm/authorize',resource:'packages',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    "rubygems": {
      getOne: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/:file_name',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/octet-stream'},query:[],data:{mode:'file'}}, [client, { params, clientOptions}]),
      "quick": {
        "Marshal.4.8": {
          getOne: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/quick/Marshal.4.8/:file_name',resource:'rubygems',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/octet-stream'},query:[],data:{mode:'file'}}, [client, { params, clientOptions}])
        }
      },
      "gems": {
        getOne: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/gems/:file_name',resource:'packages',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/octet-stream'},query:[],data:{mode:'file'}}, [client, { params, clientOptions}])
      },
      "api": {
        "v1": {
          "gems": {
            post: ({params,data,clientOptions}: {params:{id:string},data:{file:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rubygems/api/v1/gems',resource:'api',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{file:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
            "authorize": {
              post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rubygems/api/v1/gems/authorize',resource:'v1',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
            }
          },
          "dependencies": {
            get: ({params,query,clientOptions}: {params:{id:string},query:{gems:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/api/v1/dependencies',resource:'api',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'gems',type:'string'}],data:null}, [client, { params, query, clientOptions}])
          }
        }
      }
    },
    "terraform": {
      "modules": {
        getOne: ({params,query,clientOptions}: {params:{id:string,module_name:string,module_system:string},query:{'terraform-get':string},clientOptions:any}): Promise<[{code:204},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system',resource:'packages',variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],headers:{},query:[{name:'terraform-get',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
        "*module_version": {
          get: ({params,query,clientOptions}: {params:{id:string,module_name:string,module_system:string},query:{module_version:string,'terraform-get':string},clientOptions:any}): Promise<[{code:204},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version',resource:'terraform',variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],headers:{},query:[{name:'module_version',type:'string'},{name:'terraform-get',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
          "file": {
            put: ({params,data,clientOptions}: {params:{id:string,module_name:string,module_system:string},data:{module_version:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version/file',resource:'modules',variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],headers:{'Content-Type':'multipart/form-data'},query:[],data:{mode:'formdata',formdata:{module_version:'string'}}}, [client, { params, data, clientOptions}]),
            "authorize": {
              put: ({params,data,clientOptions}: {params:{id:string,module_name:string,module_system:string},data:{module_version:string},clientOptions:any}): Promise<[{code:200},{code:403}]> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version/file/authorize',resource:'*module_version',variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{module_version:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
            }
          }
        }
      }
    }
  },
  "members": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{query:string,user_ids:string,skip_users:string,show_seat_info:string,with_saml_identity:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/members',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'query',type:'string'},{name:'user_ids',type:'string'},{name:'skip_users',type:'string'},{name:'show_seat_info',type:'string'},{name:'with_saml_identity',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{access_level:number,user_id:number,username:string,expires_at:Date,invite_source:string},clientOptions:any}): Promise<[{code:201,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/members',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{access_level:'number',user_id:'number',username:'string',expires_at:'dateTime',invite_source:'members-api'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "all": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{query:string,user_ids:string,show_seat_info:string,state:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/members/all',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'query',type:'string'},{name:'user_ids',type:'string'},{name:'show_seat_info',type:'string'},{name:'state',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,user_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/members/all/:user_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    getOne: ({params,clientOptions}: {params:{id:string,user_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/members/:user_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,user_id:string},data:{access_level:number,expires_at:Date,member_role_id:number},clientOptions:any}): Promise<[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]> => handler.apply({method:'put',url:'api/v4/projects/:id/members/:user_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{access_level:'number',expires_at:'dateTime',member_role_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,query,clientOptions}: {params:{id:string,user_id:string},query:{skip_subresources:string,unassign_issuables:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/members/:user_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],headers:{},query:[{name:'skip_subresources',type:'string'},{name:'unassign_issuables',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "create_ci_config": {
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201}]> => handler.apply({method:'post',url:'api/v4/projects/:id/create_ci_config',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "pages": {
    delete: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/pages',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    patch: ({params,data,clientOptions}: {params:{id:string},data:{pages_unique_domain_enabled:boolean,pages_https_only:boolean},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'patch',url:'api/v4/projects/:id/pages',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{pages_unique_domain_enabled:'boolean',pages_https_only:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pages',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "domains": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:{value:{}},expired:{value:{}},certificate:{value:{}},certificate_text:{value:{}}}},{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:{value:{}},expired:{value:{}},certificate:{value:{}},certificate_text:{value:{}}}}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pages/domains',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{domain:string,certificate:string,key:string,auto_ssl_enabled:false,user_provided_certificate:string,user_provided_key:string},clientOptions:any}): Promise<[{code:201,data:{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:string,expired:string,certificate:string,certificate_text:string}}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/pages/domains',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{domain:'string',certificate:'binary',key:'binary',auto_ssl_enabled:false,user_provided_certificate:'string',user_provided_key:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      getOne: ({params,clientOptions}: {params:{id:string,domain:string},clientOptions:any}): Promise<[{code:200,data:{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:string,expired:string,certificate:string,certificate_text:string}}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pages/domains/:domain',resource:'projects',variable:[{name:'id',type:'string'},{name:'domain',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      put: ({params,data,clientOptions}: {params:{id:string,domain:string},data:{certificate:string,key:string,auto_ssl_enabled:boolean},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'put',url:'api/v4/projects/:id/pages/domains/:domain',resource:'projects',variable:[{name:'id',type:'string'},{name:'domain',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{certificate:'binary',key:'binary',auto_ssl_enabled:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,domain:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/pages/domains/:domain',resource:'projects',variable:[{name:'id',type:'string'},{name:'domain',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "avatar": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'get',url:'api/v4/projects/:id/avatar',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "clusters": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},platform_kubernetes:{api_url:{value:{}},namespace:{value:{}},authorization_type:{value:{}},ca_cert:{value:{}}},provider_gcp:{cluster_id:{value:{}},status_name:{value:{}},gcp_project_id:{value:{}},zone:{value:{}},machine_type:{value:{}},num_nodes:{value:{}},endpoint:{value:{}}},management_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}},{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},platform_kubernetes:{api_url:{value:{}},namespace:{value:{}},authorization_type:{value:{}},ca_cert:{value:{}}},provider_gcp:{cluster_id:{value:{}},status_name:{value:{}},gcp_project_id:{value:{}},zone:{value:{}},machine_type:{value:{}},num_nodes:{value:{}},endpoint:{value:{}}},management_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}}]},{code:403}]> => handler.apply({method:'get',url:'api/v4/projects/:id/clusters',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,cluster_id:string},clientOptions:any}): Promise<[{code:200,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/clusters/:cluster_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'cluster_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,cluster_id:string},data:{name:string,domain:string,environment_scope:string,namespace_per_environment:true,management_project_id:number,enabled:boolean,managed:boolean,platform_kubernetes_attributes:{api_url:string,token:string,ca_cert:string,namespace:string}},clientOptions:any}): Promise<[{code:200,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:400},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/clusters/:cluster_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'cluster_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',domain:'string',environment_scope:'string',namespace_per_environment:true,management_project_id:'number',enabled:'boolean',managed:'boolean',platform_kubernetes_attributes:{api_url:'string',token:'string',ca_cert:'string',namespace:'string'}},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,cluster_id:string},clientOptions:any}): Promise<[{code:204,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/clusters/:cluster_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'cluster_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "user": {
      post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,platform_kubernetes_attributes:{api_url:string,token:string,ca_cert:string,namespace:string,authorization_type:string},enabled:true,domain:string,environment_scope:string,namespace_per_environment:true,management_project_id:number,managed:true},clientOptions:any}): Promise<[{code:201,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:400},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/clusters/user',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',platform_kubernetes_attributes:{api_url:'string',token:'string',ca_cert:'string',namespace:'string',authorization_type:'rbac'},enabled:true,domain:'string',environment_scope:'*',namespace_per_environment:true,management_project_id:'number',managed:true},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "registry": {
    "repositories": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,tags:string,tags_count:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,name:string,path:string,project_id:number,location:string,created_at:Date,cleanup_policy_started_at:Date,tags_count:number,tags:{name:{value:{}},path:{value:{}},location:{value:{}}},delete_api_path:string,size:number,status:string},{id:number,name:string,path:string,project_id:number,location:string,created_at:Date,cleanup_policy_started_at:Date,tags_count:number,tags:{name:{value:{}},path:{value:{}},location:{value:{}}},delete_api_path:string,size:number,status:string}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/registry/repositories',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'tags',type:'string'},{name:'tags_count',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,repository_id:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/registry/repositories/:repository_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      "tags": {
        get: ({params,query,clientOptions}: {params:{id:string,repository_id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{name:string,path:string,location:string},{name:string,path:string,location:string}]},{code:401},{code:404},{code:405}]> => handler.apply({method:'get',url:'api/v4/projects/:id/registry/repositories/:repository_id/tags',resource:'registry',variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
        delete: ({params,clientOptions}: {params:{id:string,repository_id:string,tag_name:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/registry/repositories/:repository_id/tags/:tag_name',resource:'registry',variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'},{name:'tag_name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
        getOne: ({params,clientOptions}: {params:{id:string,repository_id:string,tag_name:string},clientOptions:any}): Promise<[{code:200,data:{name:string,path:string,location:string,revision:string,short_revision:string,digest:string,created_at:Date,total_size:number}},{code:400},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/registry/repositories/:repository_id/tags/:tag_name',resource:'registry',variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'},{name:'tag_name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      }
    }
  },
  "events": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{action:string,target_type:string,before:string,after:string,sort:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:number,project_id:number,action_name:string,target_id:number,target_iid:number,target_type:string,author_id:number,target_title:string,created_at:string,note:{id:string,type:string,body:string,attachment:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:string,updated_at:string,system:string,noteable_id:string,noteable_type:string,project_id:string,commit_id:string,position:string,resolvable:string,resolved:string,resolved_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},resolved_at:string,confidential:string,internal:string,imported:string,imported_from:string,noteable_iid:string,commands_changes:string},author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},wiki_page:{format:string,slug:string,title:string},imported:boolean,imported_from:string,push_data:{commit_count:number,action:string,ref_type:string,commit_from:string,commit_to:string,ref:string,commit_title:string,ref_count:number},author_username:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/events',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'action',type:'string'},{name:'target_type',type:'string'},{name:'before',type:'string'},{name:'after',type:'string'},{name:'sort',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "export": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,export_status:string,_links:{api_url:string,web_url:string}}},{code:401},{code:403},{code:404},{code:503}]> => handler.apply({method:'get',url:'api/v4/projects/:id/export',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{description:string,upload:{url:string,http_method:string}},clientOptions:any}): Promise<[{code:202},{code:400},{code:401},{code:403},{code:404},{code:429},{code:503}]> => handler.apply({method:'post',url:'api/v4/projects/:id/export',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{description:'string',upload:{url:'string',http_method:'PUT'}},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "download": {
      get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:403},{code:404},{code:503}]> => handler.apply({method:'get',url:'api/v4/projects/:id/export/download',resource:'projects',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "export_relations": {
    post: ({params,data,clientOptions}: {params:{id:string},data:{batched:boolean},clientOptions:any}): Promise<[{code:202},{code:400},{code:401},{code:403},{code:404},{code:503}]> => handler.apply({method:'post',url:'api/v4/projects/:id/export_relations',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{batched:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "download": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{relation:string,batched:string,batch_number:string},clientOptions:any}): Promise<[{code:200},{code:400},{code:401},{code:403},{code:404},{code:500},{code:503}]> => handler.apply({method:'get',url:'api/v4/projects/:id/export_relations/download',resource:'projects',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'relation',type:'string'},{name:'batched',type:'string'},{name:'batch_number',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    },
    "status": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{relation:string},clientOptions:any}): Promise<[{code:200,data:[{relation:string,status:string,error:string,updated_at:Date,batched:boolean,batches_count:number,total_objects_count:number,batches:{status:{value:{}},batch_number:{value:{}},objects_count:{value:{}},error:{value:{}},updated_at:{value:{}}}},{relation:string,status:string,error:string,updated_at:Date,batched:boolean,batches_count:number,total_objects_count:number,batches:{status:{value:{}},batch_number:{value:{}},objects_count:{value:{}},error:{value:{}},updated_at:{value:{}}}}]},{code:401},{code:403},{code:404},{code:503}]> => handler.apply({method:'get',url:'api/v4/projects/:id/export_relations/status',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'relation',type:'string'}],data:null}, [client, { params, query, clientOptions}])
    }
  },
  "hooks": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:string,url:string,name:string,description:string,created_at:Date,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:Date,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean},{id:string,url:string,name:string,description:string,created_at:Date,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:Date,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/hooks',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{url:string,name:string,description:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,note_events:boolean,confidential_note_events:boolean,job_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,releases_events:boolean,emoji_events:boolean,resource_access_token_events:boolean,enable_ssl_verification:boolean,token:string,push_events_branch_filter:string,custom_webhook_template:string,url_variables:[{key:string,value:string},{key:string,value:string}]},clientOptions:any}): Promise<[{code:201,data:{id:string,url:string,name:string,description:string,created_at:Date,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:Date,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:400},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/hooks',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',name:'string',description:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',job_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',releases_events:'boolean',emoji_events:'boolean',resource_access_token_events:'boolean',enable_ssl_verification:'boolean',token:'string',push_events_branch_filter:'string',custom_webhook_template:'string',url_variables:[{key:'string',value:'string'},{key:'string',value:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,hook_id:string},clientOptions:any}): Promise<[{code:200,data:{id:string,url:string,name:string,description:string,created_at:Date,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:Date,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/hooks/:hook_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'hook_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,hook_id:string},data:{url:string,name:string,description:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,note_events:boolean,confidential_note_events:boolean,job_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,releases_events:boolean,emoji_events:boolean,resource_access_token_events:boolean,enable_ssl_verification:boolean,token:string,push_events_branch_filter:string,custom_webhook_template:string,url_variables:[{key:string,value:string},{key:string,value:string}]},clientOptions:any}): Promise<[{code:200,data:{id:string,url:string,name:string,description:string,created_at:Date,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:Date,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:400},{code:404},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/hooks/:hook_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'hook_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',name:'string',description:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',job_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',releases_events:'boolean',emoji_events:'boolean',resource_access_token_events:'boolean',enable_ssl_verification:'boolean',token:'string',push_events_branch_filter:'string',custom_webhook_template:'string',url_variables:[{key:'string',value:'string'},{key:'string',value:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,hook_id:string},clientOptions:any}): Promise<[{code:204,data:{id:string,url:string,name:string,description:string,created_at:Date,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:Date,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/hooks/:hook_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'hook_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "test": {
      post: ({params,clientOptions}: {params:{hook_id:string,trigger:string,id:string},clientOptions:any}): Promise<[{code:201},{code:400},{code:404},{code:422},{code:429}]> => handler.apply({method:'post',url:'api/v4/projects/:id/hooks/:hook_id/test/:trigger',resource:'projects',variable:[{name:'hook_id',type:'string'},{name:'trigger',type:'string'},{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    },
    "url_variables": {
      put: ({params,data,clientOptions}: {params:{hook_id:string,key:string,id:string},data:{value:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'put',url:'api/v4/projects/:id/hooks/:hook_id/url_variables/:key',resource:'projects',variable:[{name:'hook_id',type:'string'},{name:'key',type:'string'},{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{value:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{hook_id:string,key:string,id:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/hooks/:hook_id/url_variables/:key',resource:'projects',variable:[{name:'hook_id',type:'string'},{name:'key',type:'string'},{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "import": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:Date,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:Date,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:any}},{code:400},{code:401},{code:403},{code:404},{code:503}]> => handler.apply({method:'get',url:'api/v4/projects/:id/import',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "authorize": {
      post: ({clientOptions}: {clientOptions:any}): Promise<[{code:201}]> => handler.apply({method:'post',url:'api/v4/projects/import/authorize',resource:'projects',variable:[],headers:{},query:[],data:null}, [client, {clientOptions}])
    }
  },
  "relation-imports": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:Date,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:Date,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:any}},{code:400},{code:401},{code:403},{code:404},{code:503}]> => handler.apply({method:'get',url:'api/v4/projects/:id/relation-imports',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "job_token_scope": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{inbound_enabled:boolean,outbound_enabled:boolean}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/job_token_scope',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    patch: ({params,data,clientOptions}: {params:{id:string},data:{enabled:boolean},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'patch',url:'api/v4/projects/:id/job_token_scope',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{enabled:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "allowlist": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/job_token_scope/allowlist',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{target_project_id:number},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}},{code:400},{code:401},{code:403},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/job_token_scope/allowlist',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{target_project_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,target_project_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/job_token_scope/allowlist/:target_project_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'target_project_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    },
    "groups_allowlist": {
      get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/job_token_scope/groups_allowlist',resource:'projects',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,data,clientOptions}: {params:{id:string},data:{target_group_id:number},clientOptions:any}): Promise<[{code:201,data:{id:string,web_url:string,name:string}},{code:400},{code:401},{code:403},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/job_token_scope/groups_allowlist',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{target_group_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,target_group_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/job_token_scope/groups_allowlist/:target_group_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'target_group_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "repository_storage_moves": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,created_at:Date,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}},{id:number,created_at:Date,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository_storage_moves',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{destination_storage_name:string},clientOptions:any}): Promise<[{code:201,data:{id:number,created_at:Date,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date}}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository_storage_moves',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{destination_storage_name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,repository_storage_move_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,created_at:Date,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date}}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/repository_storage_moves/:repository_storage_move_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'repository_storage_move_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "snippets": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,title:string,description:string,visibility:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date,updated_at:Date,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string},{id:number,title:string,description:string,visibility:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:Date,updated_at:Date,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{title:string,visibility:string,file_name:string,description:string,files:[{file_path:string,content:string},{file_path:string,content:string}],content:string},clientOptions:any}): Promise<[{code:201,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date,updated_at:Date,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:400},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/snippets',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{title:'string',visibility:'string',file_name:'string',description:'string',files:[{file_path:'string',content:'string'},{file_path:'string',content:'string'}],content:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,snippet_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date,updated_at:Date,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,snippet_id:string},data:{content:string,description:string,file_name:string,title:string,visibility:string,files:[{action:string,content:string,file_path:string,previous_path:string},{action:string,content:string,file_path:string,previous_path:string}]},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date,updated_at:Date,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:400},{code:404},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/snippets/:snippet_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{content:'string',description:'string',file_name:'string',title:'string',visibility:'string',files:[{action:'string',content:'string',file_path:'string',previous_path:'string'},{action:'string',content:'string',file_path:'string',previous_path:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,snippet_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/snippets/:snippet_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "raw": {
      get: ({params,clientOptions}: {params:{id:string,snippet_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date,updated_at:Date,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id/raw',resource:'projects',variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "files": {
      "raw": {
        get: ({params,clientOptions}: {params:{id:string,file_path:string,ref:string,snippet_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:Date,updated_at:Date,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id/files/:ref/:file_path/raw',resource:'snippets',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'},{name:'ref',type:'string'},{name:'snippet_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    "user_agent_detail": {
      get: ({params,clientOptions}: {params:{id:string,snippet_id:string},clientOptions:any}): Promise<[{code:200,data:{user_agent:string,ip_address:string,akismet_submitted:boolean}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id/user_agent_detail',resource:'projects',variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "snapshot": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{wiki:string},clientOptions:any}): Promise<[{code:200},{code:401}]> => handler.apply({method:'get',url:'api/v4/projects/:id/snapshot',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/x-tar'},query:[{name:'wiki',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "statistics": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{fetches:{total:number,days:[{count:{value:{}},date:{value:{}}},{count:{value:{}},date:{value:{}}}]}}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/statistics',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "templates": {
    getOne: ({params,query,clientOptions}: {params:{id:string,type:string,name:string},query:{source_template_project_id:string,project:string,fullname:string},clientOptions:any}): Promise<[{code:200,data:{key:string,name:string,nickname:string,html_url:string,source_url:string,popular:boolean,description:string,conditions:[string,string],permissions:[string,string],limitations:[string,string],content:string}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/templates/:type/:name',resource:'v4',variable:[{name:'id',type:'string'},{name:'type',type:'string'},{name:'name',type:'string'}],headers:{Accept:'application/json'},query:[{name:'source_template_project_id',type:'string'},{name:'project',type:'string'},{name:'fullname',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "custom_attributes": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{key:string,value:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/custom_attributes',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{key:string,id:string},clientOptions:any}): Promise<[{code:200,data:{key:string,value:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/custom_attributes/:key',resource:'v4',variable:[{name:'key',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{key:string,id:string},data:{value:string},clientOptions:any}): Promise<[{code:200}]> => handler.apply({method:'put',url:'api/v4/projects/:id/custom_attributes/:key',resource:'v4',variable:[{name:'key',type:'string'},{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{value:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{key:string,id:string},clientOptions:any}): Promise<[{code:204}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/custom_attributes/:key',resource:'v4',variable:[{name:'key',type:'string'},{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "share_locations": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{search:string},clientOptions:any}): Promise<[{code:200,data:{id:string,web_url:string,name:string,path:string,description:string,visibility:string,share_with_group_lock:string,require_two_factor_authentication:string,two_factor_grace_period:string,project_creation_level:string,auto_devops_enabled:string,subgroup_creation_level:string,emails_disabled:boolean,emails_enabled:boolean,mentions_disabled:string,lfs_enabled:string,math_rendering_limits_enabled:boolean,lock_math_rendering_limits_enabled:boolean,default_branch:string,default_branch_protection:string,default_branch_protection_defaults:string,avatar_url:string,request_access_enabled:string,full_name:string,full_path:string,created_at:string,parent_id:string,organization_id:string,shared_runners_setting:string,custom_attributes:{key:string,value:string},statistics:{storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string},ldap_cn:string,ldap_access:string,ldap_group_links:{cn:string,group_access:number,provider:string,filter:string},saml_group_links:{name:string,access_level:number,member_role_id:number},file_template_project_id:string,marked_for_deletion_on:string,wiki_access_level:string,repository_storage:string,duo_features_enabled:string,lock_duo_features_enabled:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/share_locations',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'search',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "fork": {
    post: ({params,clientOptions}: {params:{id:string,forked_from_id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/fork/:forked_from_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'forked_from_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:204},{code:304},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/fork',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "forks": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{order_by:string,sort:string,archived:string,visibility:string,search:string,search_namespaces:string,owned:string,starred:string,imported:string,membership:string,with_issues_enabled:string,with_merge_requests_enabled:string,with_programming_language:string,min_access_level:string,id_after:string,id_before:string,last_activity_after:string,last_activity_before:string,repository_storage:string,topic:string,topic_id:string,updated_before:string,updated_after:string,include_pending_delete:string,wiki_checksum_failed:string,repository_checksum_failed:string,include_hidden:string,page:string,per_page:string,simple:string,with_custom_attributes:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:{value:{}},enabled:{value:{}},keep_n:{value:{}},older_than:{value:{}},name_regex:{value:{}},name_regex_keep:{value:{}},next_run_at:{value:{}}},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:{value:{}},storage_size:{value:{}},repository_size:{value:{}},wiki_size:{value:{}},lfs_objects_size:{value:{}},job_artifacts_size:{value:{}},pipeline_artifacts_size:{value:{}},packages_size:{value:{}},snippets_size:{value:{}},uploads_size:{value:{}},container_registry_size:{value:{}}},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string},{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:{value:{}},enabled:{value:{}},keep_n:{value:{}},older_than:{value:{}},name_regex:{value:{}},name_regex_keep:{value:{}},next_run_at:{value:{}}},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:{value:{}},storage_size:{value:{}},repository_size:{value:{}},wiki_size:{value:{}},lfs_objects_size:{value:{}},job_artifacts_size:{value:{}},pipeline_artifacts_size:{value:{}},packages_size:{value:{}},snippets_size:{value:{}},uploads_size:{value:{}},container_registry_size:{value:{}}},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/forks',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'archived',type:'string'},{name:'visibility',type:'string'},{name:'search',type:'string'},{name:'search_namespaces',type:'string'},{name:'owned',type:'string'},{name:'starred',type:'string'},{name:'imported',type:'string'},{name:'membership',type:'string'},{name:'with_issues_enabled',type:'string'},{name:'with_merge_requests_enabled',type:'string'},{name:'with_programming_language',type:'string'},{name:'min_access_level',type:'string'},{name:'id_after',type:'string'},{name:'id_before',type:'string'},{name:'last_activity_after',type:'string'},{name:'last_activity_before',type:'string'},{name:'repository_storage',type:'string'},{name:'topic',type:'string'},{name:'topic_id',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'},{name:'include_pending_delete',type:'string'},{name:'wiki_checksum_failed',type:'string'},{name:'repository_checksum_failed',type:'string'},{name:'include_hidden',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'simple',type:'string'},{name:'with_custom_attributes',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "pages_access": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:403}]> => handler.apply({method:'get',url:'api/v4/projects/:id/pages_access',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "archive": {
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/archive',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "unarchive": {
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/unarchive',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "star": {
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:304},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/star',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "unstar": {
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:304},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/unstar',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "starrers": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{search:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}]},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/starrers',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'search',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "languages": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/languages',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "share": {
    post: ({params,data,clientOptions}: {params:{id:string},data:{group_id:number,group_access:number,expires_at:Date},clientOptions:any}): Promise<[{code:201,data:{id:number,project_id:number,group_id:number,group_access:number,expires_at:Date}},{code:400},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/share',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{group_id:'number',group_access:'number',expires_at:'date'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,group_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/share/:group_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'group_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "import_project_members": {
    post: ({params,clientOptions}: {params:{id:string,project_id:string},clientOptions:any}): Promise<[{code:200},{code:403},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/import_project_members/:project_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'project_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "uploads": {
    post: ({params,data,clientOptions}: {params:{id:string},data:{file:string},clientOptions:any}): Promise<[{code:201,data:{alt:string,url:string,full_path:string,markdown:string}},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/uploads',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{file:'binary'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    "authorize": {
      post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/uploads/authorize',resource:'projects',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "users": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{search:string,skip_users:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}]},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/users',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'search',type:'string'},{name:'skip_users',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "groups": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{search:string,skip_groups:string,with_shared:string,shared_visible_only:string,shared_min_access_level:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string},{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string}]},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/groups',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'search',type:'string'},{name:'skip_groups',type:'string'},{name:'with_shared',type:'string'},{name:'shared_visible_only',type:'string'},{name:'shared_min_access_level',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "housekeeping": {
    post: ({params,data,clientOptions}: {params:{id:string},data:{task:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:403},{code:409}]> => handler.apply({method:'post',url:'api/v4/projects/:id/housekeeping',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{task:'eager'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
  },
  "repository_size": {
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201},{code:401},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/repository_size',resource:'v4',variable:[{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "transfer": {
    put: ({params,data,clientOptions}: {params:{id:string},data:{namespace:string},clientOptions:any}): Promise<[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:400},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/transfer',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{namespace:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
  },
  "transfer_locations": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{search:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string},{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string}]},{code:403}]> => handler.apply({method:'get',url:'api/v4/projects/:id/transfer_locations',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'search',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}])
  },
  "storage": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:{disk_path:string,project_id:number,repository_storage:string,created_at:Date}},{code:403}]> => handler.apply({method:'get',url:'api/v4/projects/:id/storage',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "restore": {
    post: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:Date,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:Date,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:Date,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/restore',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "protected_branches": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,search:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,name:string,push_access_levels:[{value:{}},{value:{}}],merge_access_levels:[{value:{}},{value:{}}],allow_force_push:boolean,unprotect_access_levels:[{value:{}},{value:{}}],code_owner_approval_required:boolean,inherited:boolean},{id:number,name:string,push_access_levels:[{value:{}},{value:{}}],merge_access_levels:[{value:{}},{value:{}}],allow_force_push:boolean,unprotect_access_levels:[{value:{}},{value:{}}],code_owner_approval_required:boolean,inherited:boolean}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_branches',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'search',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,push_access_level:number,merge_access_level:number,allow_force_push:false,unprotect_access_level:number,allowed_to_push:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_merge:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_unprotect:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],code_owner_approval_required:false},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}},{code:401},{code:404},{code:409},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/protected_branches',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',push_access_level:'number',merge_access_level:'number',allow_force_push:false,unprotect_access_level:'number',allowed_to_push:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_merge:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_unprotect:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],code_owner_approval_required:false},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,name:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_branches/:name',resource:'v4',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    patch: ({params,data,clientOptions}: {params:{id:string,name:string},data:{allow_force_push:boolean,unprotect_access_level:number,allowed_to_push:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_merge:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_unprotect:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],code_owner_approval_required:false},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}},{code:400},{code:401},{code:404},{code:422}]> => handler.apply({method:'patch',url:'api/v4/projects/:id/protected_branches/:name',resource:'v4',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{allow_force_push:'boolean',unprotect_access_level:'number',allowed_to_push:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_merge:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_unprotect:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],code_owner_approval_required:false},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,name:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/protected_branches/:name',resource:'v4',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "protected_tags": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{name:string,create_access_levels:{id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},deploy_key_id:{value:{}},user_id:{value:{}},group_id:{value:{}}}},{name:string,create_access_levels:{id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},deploy_key_id:{value:{}},user_id:{value:{}},group_id:{value:{}}}}]},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_tags',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,create_access_level:number,allowed_to_create:[{access_level:number,user_id:number,group_id:number},{access_level:number,user_id:number,group_id:number}]},clientOptions:any}): Promise<[{code:201,data:{name:string,create_access_levels:{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}}},{code:403},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/protected_tags',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',create_access_level:'number',allowed_to_create:[{access_level:'number',user_id:'number',group_id:'number'},{access_level:'number',user_id:'number',group_id:'number'}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,name:string},clientOptions:any}): Promise<[{code:200,data:{name:string,create_access_levels:{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}}},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_tags/:name',resource:'v4',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,name:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404},{code:412}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/protected_tags/:name',resource:'v4',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "releases": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string,include_html_description:string,updated_before:string,updated_after:string},clientOptions:any}): Promise<[{code:200,data:[{name:string,tag_name:string,description:string,created_at:Date,released_at:Date,upcoming_release:boolean,description_html:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},milestones:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}},issue_stats:{value:{}}},commit_path:string,tag_path:string,assets:{count:number,sources:{value:{}},links:{value:{}}},evidences:{sha:{value:{}},filepath:{value:{}},collected_at:{value:{}}},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}},{name:string,tag_name:string,description:string,created_at:Date,released_at:Date,upcoming_release:boolean,description_html:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},milestones:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}},issue_stats:{value:{}}},commit_path:string,tag_path:string,assets:{count:number,sources:{value:{}},links:{value:{}}},evidences:{sha:{value:{}},filepath:{value:{}},collected_at:{value:{}}},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/releases',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'include_html_description',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{tag_name:string,tag_message:string,name:string,description:string,ref:string,assets:{links:[{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string},{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string}]},milestones:[string,string],milestone_ids:string,released_at:Date,legacy_catalog_publish:boolean},clientOptions:any}): Promise<[{code:201,data:{name:string,tag_name:string,description:string,created_at:Date,released_at:Date,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:Date},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:400},{code:401},{code:403},{code:404},{code:409},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/releases',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{tag_name:'string',tag_message:'string',name:'string',description:'string',ref:'string',assets:{links:[{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'string'},{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'string'}]},milestones:['string','string'],milestone_ids:'string',released_at:'dateTime',legacy_catalog_publish:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,query,clientOptions}: {params:{id:string,tag_name:string},query:{include_html_description:string},clientOptions:any}): Promise<[{code:200,data:{name:string,tag_name:string,description:string,created_at:Date,released_at:Date,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:Date},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name',resource:'v4',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{Accept:'application/json'},query:[{name:'include_html_description',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,tag_name:string},data:{name:string,description:string,released_at:Date,milestones:[string,string],milestone_ids:string},clientOptions:any}): Promise<[{code:200,data:{name:string,tag_name:string,description:string,created_at:Date,released_at:Date,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:Date},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/releases/:tag_name',resource:'v4',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',description:'string',released_at:'dateTime',milestones:['string','string'],milestone_ids:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,tag_name:string},clientOptions:any}): Promise<[{code:204,data:{name:string,tag_name:string,description:string,created_at:Date,released_at:Date,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:Date},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/releases/:tag_name',resource:'v4',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    "downloads": {
      "*direct_asset_path": {
        get: ({params,query,clientOptions}: {params:{id:string,tag_name:string},query:{direct_asset_path:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name/downloads/*direct_asset_path',resource:'releases',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{},query:[{name:'direct_asset_path',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      }
    },
    "evidence": {
      post: ({params,clientOptions}: {params:{tag_name:string,id:string},clientOptions:any}): Promise<[{code:201,data:{name:string,tag_name:string,description:string,created_at:Date,released_at:Date,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:Date,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:Date,committer_name:string,committer_email:string,committed_date:Date,trailers:any,extended_trailers:any,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:Date},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/releases/:tag_name/evidence',resource:'projects',variable:[{name:'tag_name',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    },
    "assets": {
      "links": {
        get: ({params,query,clientOptions}: {params:{id:string,tag_name:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,name:string,url:string,direct_asset_url:string,link_type:string},{id:number,name:string,url:string,direct_asset_url:string,link_type:string}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name/assets/links',resource:'releases',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
        post: ({params,data,clientOptions}: {params:{id:string,tag_name:string},data:{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:400},{code:401}]> => handler.apply({method:'post',url:'api/v4/projects/:id/releases/:tag_name/assets/links',resource:'releases',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'other'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
        getOne: ({params,clientOptions}: {params:{id:string,tag_name:string,link_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name/assets/links/:link_id',resource:'releases',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'},{name:'link_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
        put: ({params,data,clientOptions}: {params:{id:string,tag_name:string,link_id:string},data:{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:400},{code:401}]> => handler.apply({method:'put',url:'api/v4/projects/:id/releases/:tag_name/assets/links/:link_id',resource:'releases',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'},{name:'link_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'other'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
        delete: ({params,clientOptions}: {params:{id:string,tag_name:string,link_id:string},clientOptions:any}): Promise<[{code:204,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:400},{code:401}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/releases/:tag_name/assets/links/:link_id',resource:'releases',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'},{name:'link_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
      }
    },
    "permalink": {
      "latest(": {
        ")(*suffix_path)": {
          get: ({params,query,clientOptions}: {params:{id:string},query:{suffix_path:string},clientOptions:any}): Promise<[{code:200},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/permalink/latest(/)(*suffix_path)',resource:'permalink',variable:[{name:'id',type:'string'}],headers:{},query:[{name:'suffix_path',type:'string'}],data:null}, [client, { params, query, clientOptions}])
        }
      }
    }
  },
  "remote_mirrors": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,enabled:boolean,url:string,update_status:string,last_update_at:Date,last_update_started_at:Date,last_successful_update_at:Date,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string},{id:number,enabled:boolean,url:string,update_status:string,last_update_at:Date,last_update_started_at:Date,last_successful_update_at:Date,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/remote_mirrors',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{url:string,enabled:boolean,auth_method:string,keep_divergent_refs:boolean,only_protected_branches:boolean,mirror_branch_regex:string},clientOptions:any}): Promise<[{code:201,data:{id:number,enabled:boolean,url:string,update_status:string,last_update_at:Date,last_update_started_at:Date,last_successful_update_at:Date,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/remote_mirrors',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{url:'string',enabled:'boolean',auth_method:'string',keep_divergent_refs:'boolean',only_protected_branches:'boolean',mirror_branch_regex:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,mirror_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,enabled:boolean,url:string,update_status:string,last_update_at:Date,last_update_started_at:Date,last_successful_update_at:Date,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/remote_mirrors/:mirror_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,mirror_id:string},data:{enabled:boolean,auth_method:string,keep_divergent_refs:boolean,only_protected_branches:boolean,mirror_branch_regex:string},clientOptions:any}): Promise<[{code:200,data:{id:number,enabled:boolean,url:string,update_status:string,last_update_at:Date,last_update_started_at:Date,last_successful_update_at:Date,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/remote_mirrors/:mirror_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{enabled:'boolean',auth_method:'string',keep_divergent_refs:'boolean',only_protected_branches:'boolean',mirror_branch_regex:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,mirror_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/remote_mirrors/:mirror_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "sync": {
      post: ({params,clientOptions}: {params:{id:string,mirror_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/remote_mirrors/:mirror_id/sync',resource:'projects',variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "access_tokens": {
    get: ({params,clientOptions}: {params:{id:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,name:string,revoked:boolean,created_at:Date,user_id:number,last_used_at:Date,active:boolean,expires_at:Date,access_level:number},{id:number,name:string,revoked:boolean,created_at:Date,user_id:number,last_used_at:Date,active:boolean,expires_at:Date,access_level:number}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/access_tokens',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,scopes:[string,string],expires_at:Date,access_level:40},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,revoked:boolean,created_at:Date,user_id:number,last_used_at:Date,active:boolean,expires_at:Date,access_level:number,token:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/access_tokens',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',scopes:['string','string'],expires_at:'2025-05-23T21:13:09.000Z',access_level:40},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,token_id:string},clientOptions:any}): Promise<[{code:200,data:{id:number,name:string,revoked:boolean,created_at:Date,user_id:number,last_used_at:Date,active:boolean,expires_at:Date,access_level:number}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/access_tokens/:token_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,token_id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/access_tokens/:token_id',resource:'v4',variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "rotate": {
      post: ({params,data,clientOptions}: {params:{id:string,token_id:string},data:{expires_at:Date},clientOptions:any}): Promise<[{code:201,data:{id:number,name:string,revoked:boolean,created_at:Date,user_id:number,last_used_at:Date,active:boolean,expires_at:Date,access_level:number,token:string}}]> => handler.apply({method:'post',url:'api/v4/projects/:id/access_tokens/:token_id/rotate',resource:'projects',variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{expires_at:'date'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "wikis": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{with_content:string},clientOptions:any}): Promise<[{code:200,data:[{format:string,slug:string,title:string},{format:string,slug:string,title:string}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/wikis',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'with_content',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{title:string,content:string,front_matter:{title:string},format:string},clientOptions:any}): Promise<[{code:201,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:any}},{code:400},{code:404},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/wikis',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{title:'string',content:'string',front_matter:{title:'string'},format:'markdown'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,query,clientOptions}: {params:{slug:string,id:string},query:{version:string,render_html:string},clientOptions:any}): Promise<[{code:200,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:any}},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/wikis/:slug',resource:'v4',variable:[{name:'slug',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'version',type:'string'},{name:'render_html',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,slug:string},data:{title:string,front_matter:{title:string},content:string,format:string},clientOptions:any}): Promise<[{code:200,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:any}},{code:400},{code:404},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/wikis/:slug',resource:'v4',variable:[{name:'id',type:'string'},{name:'slug',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{title:'string',front_matter:{title:'string'},content:'string',format:'markdown'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{slug:string,id:string},clientOptions:any}): Promise<[{code:204},{code:400},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/wikis/:slug',resource:'v4',variable:[{name:'slug',type:'string'},{name:'id',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
    "attachments": {
      post: ({params,data,clientOptions}: {params:{id:string},data:{file:string,branch:string},clientOptions:any}): Promise<[{code:201,data:{file_name:string,file_path:string,branch:string,link:{url:string,markdown:string}}},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/wikis/attachments',resource:'projects',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{file:'binary',branch:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}])
    }
  },
  "alert_management_alerts": {
    "metric_images": {
      post: ({params,data,clientOptions}: {params:{id:string,alert_iid:string},data:{url:string,url_text:string},clientOptions:any}): Promise<[{code:200,data:{id:number,created_at:Date,filename:string,file_path:string,url:string,url_text:string}},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images',resource:'projects',variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'}],headers:{'Content-Type':'multipart/form-data',Accept:'application/json'},query:[],data:{mode:'formdata',formdata:{url:'string',url_text:'string'}}}, [client, { params, data, clientOptions}]),
      get: ({params,clientOptions}: {params:{id:string,alert_iid:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,created_at:Date,filename:string,file_path:string,url:string,url_text:string},{id:number,created_at:Date,filename:string,file_path:string,url:string,url_text:string}]},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images',resource:'projects',variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
      "authorize": {
        post: ({params,clientOptions}: {params:{id:string,alert_iid:string},clientOptions:any}): Promise<[{code:200},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/authorize',resource:'alert_management_alerts',variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      },
      put: ({params,data,clientOptions}: {params:{id:string,alert_iid:string,metric_image_id:string},data:{url:string,url_text:string},clientOptions:any}): Promise<[{code:200,data:{id:number,created_at:Date,filename:string,file_path:string,url:string,url_text:string}},{code:403},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/:metric_image_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'},{name:'metric_image_id',type:'string'}],headers:{'Content-Type':'multipart/form-data',Accept:'application/json'},query:[],data:{mode:'formdata',formdata:{url:'string',url_text:'string'}}}, [client, { params, data, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,alert_iid:string,metric_image_id:string},clientOptions:any}): Promise<[{code:204,data:{id:number,created_at:Date,filename:string,file_path:string,url:string,url_text:string}},{code:403},{code:422}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/:metric_image_id',resource:'projects',variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'},{name:'metric_image_id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "feature_flags": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{scope:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{name:string,description:string,active:boolean,version:string,created_at:Date,updated_at:Date,scopes:string,strategies:{id:{value:{}},name:{value:{}},parameters:{value:{}},scopes:{value:{}},user_list:{value:{}}}},{name:string,description:string,active:boolean,version:string,created_at:Date,updated_at:Date,scopes:string,strategies:{id:{value:{}},name:{value:{}},parameters:{value:{}},scopes:{value:{}},user_list:{value:{}}}}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,description:string,active:boolean,version:string,strategies:[{name:string,parameters:string,user_list_id:number,scopes:[{environment_scope:{value: {}}},{environment_scope:{value:{}}}]},{name:string,parameters:string,user_list_id:number,scopes:[{environment_scope:{value:{}}},{environment_scope:{value:{}}}]}]},clientOptions:any}): Promise<[{code:201,data:{name:string,description:string,active:boolean,version:string,created_at:Date,updated_at:Date,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:400},{code:401},{code:403}]> => handler.apply({method:'post',url:'api/v4/projects/:id/feature_flags',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',description:'string',active:'boolean',version:'string',strategies:[{name:'string',parameters:'string',user_list_id:'number',scopes:[{environment_scope:{value:'{}'}},{environment_scope:{value:'{}'}}]},{name:'string',parameters:'string',user_list_id:'number',scopes:[{environment_scope:{value:'{}'}},{environment_scope:{value:'{}'}}]}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,feature_flag_name:string},clientOptions:any}): Promise<[{code:200,data:{name:string,description:string,active:boolean,version:string,created_at:Date,updated_at:Date,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags/:feature_flag_name',resource:'v4',variable:[{name:'id',type:'string'},{name:'feature_flag_name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,feature_flag_name:string},data:{name:string,description:string,active:boolean,strategies:[{id:number,name:string,parameters:string,user_list_id:number,_destroy:boolean,scopes:[{id:{value:{}},environment_scope:{value:{}},_destroy:{value:{}}},{id:{value:{}},environment_scope:{value:{}},_destroy:{value:{}}}]},{id:number,name:string,parameters:string,user_list_id:number,_destroy:boolean,scopes:[{id:{value:{}},environment_scope:{value:{}},_destroy:{value:{}}},{id:{value:{}},environment_scope:{value:{}},_destroy:{value:{}}}]}]},clientOptions:any}): Promise<[{code:200,data:{name:string,description:string,active:boolean,version:string,created_at:Date,updated_at:Date,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:401},{code:403},{code:404},{code:422}]> => handler.apply({method:'put',url:'api/v4/projects/:id/feature_flags/:feature_flag_name',resource:'v4',variable:[{name:'id',type:'string'},{name:'feature_flag_name',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',description:'string',active:'boolean',strategies:[{id:'number',name:'string',parameters:'string',user_list_id:'number',_destroy:'boolean',scopes:[{id:{value:'{}'},environment_scope:{value:'{}'},_destroy:{value:'{}'}},{id:{value:'{}'},environment_scope:{value:'{}'},_destroy:{value:'{}'}}]},{id:'number',name:'string',parameters:'string',user_list_id:'number',_destroy:'boolean',scopes:[{id:{value:'{}'},environment_scope:{value:'{}'},_destroy:{value:'{}'}},{id:{value:'{}'},environment_scope:{value:'{}'},_destroy:{value:'{}'}}]}]},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,feature_flag_name:string},clientOptions:any}): Promise<[{code:204,data:{name:string,description:string,active:boolean,version:string,created_at:Date,updated_at:Date,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/feature_flags/:feature_flag_name',resource:'v4',variable:[{name:'id',type:'string'},{name:'feature_flag_name',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "feature_flags_user_lists": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{search:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:Date,updated_at:Date,path:string,edit_path:string},{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:Date,updated_at:Date,path:string,edit_path:string}]},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags_user_lists',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'search',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    post: ({params,data,clientOptions}: {params:{id:string},data:{name:string,user_xids:string},clientOptions:any}): Promise<[{code:201,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:Date,updated_at:Date,path:string,edit_path:string}},{code:400},{code:401},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/feature_flags_user_lists',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',user_xids:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,iid:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:Date,updated_at:Date,path:string,edit_path:string}},{code:401},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags_user_lists/:iid',resource:'v4',variable:[{name:'id',type:'string'},{name:'iid',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,iid:string},data:{name:string,user_xids:string},clientOptions:any}): Promise<[{code:200,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:Date,updated_at:Date,path:string,edit_path:string}},{code:400},{code:401},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/feature_flags_user_lists/:iid',resource:'v4',variable:[{name:'id',type:'string'},{name:'iid',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{name:'string',user_xids:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,clientOptions}: {params:{id:string,iid:string},clientOptions:any}): Promise<[{code:204},{code:401},{code:404},{code:409}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/feature_flags_user_lists/:iid',resource:'v4',variable:[{name:'id',type:'string'},{name:'iid',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
  },
  "debian_distributions": {
    post: ({params,data,clientOptions}: {params:{id:string},data:{codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]},clientOptions:any}): Promise<[{code:201,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'post',url:'api/v4/projects/:id/debian_distributions',resource:'v4',variable:[{name:'id',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{codename:'string',suite:'string',origin:'string',label:'string',version:'string',description:'string',valid_time_duration_seconds:'number',components:['string','string'],architectures:['string','string']},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    get: ({params,query,clientOptions}: {params:{id:string},query:{page:string,per_page:string,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:string,components:string,architectures:string},clientOptions:any}): Promise<[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/debian_distributions',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'codename',type:'string'},{name:'suite',type:'string'},{name:'origin',type:'string'},{name:'label',type:'string'},{name:'version',type:'string'},{name:'description',type:'string'},{name:'valid_time_duration_seconds',type:'string'},{name:'components',type:'string'},{name:'architectures',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{id:string,codename:string},clientOptions:any}): Promise<[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/debian_distributions/:codename',resource:'v4',variable:[{name:'id',type:'string'},{name:'codename',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
    put: ({params,data,clientOptions}: {params:{id:string,codename:string},data:{suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]},clientOptions:any}): Promise<[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'put',url:'api/v4/projects/:id/debian_distributions/:codename',resource:'v4',variable:[{name:'id',type:'string'},{name:'codename',type:'string'}],headers:{'Content-Type':'application/json',Accept:'application/json'},query:[],data:{mode:'raw',raw:{suite:'string',origin:'string',label:'string',version:'string',description:'string',valid_time_duration_seconds:'number',components:['string','string'],architectures:['string','string']},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
    delete: ({params,query,clientOptions}: {params:{id:string,codename:string},query:{suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:string,components:string,architectures:string},clientOptions:any}): Promise<[{code:202},{code:400},{code:401},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/debian_distributions/:codename',resource:'v4',variable:[{name:'id',type:'string'},{name:'codename',type:'string'}],headers:{},query:[{name:'suite',type:'string'},{name:'origin',type:'string'},{name:'label',type:'string'},{name:'version',type:'string'},{name:'description',type:'string'},{name:'valid_time_duration_seconds',type:'string'},{name:'components',type:'string'},{name:'architectures',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    "key.asc": {
      get: ({params,clientOptions}: {params:{id:string,codename:string},clientOptions:any}): Promise<[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:401},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/debian_distributions/:codename/key.asc',resource:'projects',variable:[{name:'id',type:'string'},{name:'codename',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
    }
  },
  "audit_events": {
    get: ({params,query,clientOptions}: {params:{id:string},query:{created_after:string,created_before:string,page:string,per_page:string},clientOptions:any}): Promise<[{code:200,data:[{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string},{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string}]}]> => handler.apply({method:'get',url:'api/v4/projects/:id/audit_events',resource:'v4',variable:[{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[{name:'created_after',type:'string'},{name:'created_before',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
    getOne: ({params,clientOptions}: {params:{audit_event_id:string,id:string},clientOptions:any}): Promise<[{code:200,data:{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string}}]> => handler.apply({method:'get',url:'api/v4/projects/:id/audit_events/:audit_event_id',resource:'v4',variable:[{name:'audit_event_id',type:'string'},{name:'id',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}])
  },
  "terraform": {
    "state": {
      getOne: ({params,query,clientOptions}: {params:{id:string,name:string},query:{ID:string},clientOptions:any}): Promise<[{code:200},{code:204},{code:403},{code:404},{code:422}]> => handler.apply({method:'get',url:'api/v4/projects/:id/terraform/state/:name',resource:'projects',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{},query:[{name:'ID',type:'string'}],data:null}, [client, { params, query, clientOptions}]),
      post: ({params,clientOptions}: {params:{id:string,name:string},clientOptions:any}): Promise<[{code:200},{code:204},{code:403},{code:413},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/terraform/state/:name',resource:'projects',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      delete: ({params,clientOptions}: {params:{id:string,name:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404},{code:422}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/terraform/state/:name',resource:'projects',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}]),
      "lock": {
        post: ({params,data,clientOptions}: {params:{id:string,name:string},data:{ID:string,Operation:string,Info:string,Who:string,Version:string,Created:string,Path:string},clientOptions:any}): Promise<[{code:200},{code:403},{code:404},{code:409},{code:422}]> => handler.apply({method:'post',url:'api/v4/projects/:id/terraform/state/:name/lock',resource:'terraform',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{'Content-Type':'application/json'},query:[],data:{mode:'raw',raw:{ID:'string',Operation:'string',Info:'string',Who:'string',Version:'string',Created:'string',Path:'string'},options:{raw:{language:'json'}}}}, [client, { params, data, clientOptions}]),
        delete: ({params,query,clientOptions}: {params:{id:string,name:string},query:{ID:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404},{code:409},{code:422}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/terraform/state/:name/lock',resource:'terraform',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],headers:{},query:[{name:'ID',type:'string'}],data:null}, [client, { params, query, clientOptions}])
      },
      "versions": {
        getOne: ({params,clientOptions}: {params:{id:string,name:string,serial:string},clientOptions:any}): Promise<[{code:200,data:string},{code:403},{code:404}]> => handler.apply({method:'get',url:'api/v4/projects/:id/terraform/state/:name/versions/:serial',resource:'terraform',variable:[{name:'id',type:'string'},{name:'name',type:'string'},{name:'serial',type:'string'}],headers:{Accept:'application/json'},query:[],data:null}, [client, { params, clientOptions}]),
        delete: ({params,clientOptions}: {params:{id:string,name:string,serial:string},clientOptions:any}): Promise<[{code:204},{code:403},{code:404}]> => handler.apply({method:'delete',url:'api/v4/projects/:id/terraform/state/:name/versions/:serial',resource:'terraform',variable:[{name:'id',type:'string'},{name:'name',type:'string'},{name:'serial',type:'string'}],headers:{},query:[],data:null}, [client, { params, clientOptions}])
      }
    }
  }
})