/* eslint-disable max-len */
import { Client, Handler } from './client';

export interface Projects {
    get: ({ query }: {
        query?: {
            order_by: string;
            sort: string;
            archived: string;
            visibility: string;
            search: string;
            search_namespaces: string;
            owned: string;
            starred: string;
            imported: string;
            membership: string;
            with_issues_enabled: string;
            with_merge_requests_enabled: string;
            with_programming_language: string;
            min_access_level: string;
            id_after: string;
            id_before: string;
            last_activity_after: string;
            last_activity_before: string;
            repository_storage: string;
            topic: string;
            topic_id: string;
            updated_before: string;
            updated_after: string;
            include_pending_delete: string;
            wiki_checksum_failed: string;
            repository_checksum_failed: string;
            include_hidden: string;
            page: string;
            per_page: string;
            simple: string;
            statistics: string;
            with_custom_attributes: string;
        };
    }, options?: {}) => Promise<{
        code: 200;
        data: [{
            id: number;
            description: string;
            name: string;
            name_with_namespace: string;
            path: string;
            path_with_namespace: string;
            created_at: string;
            default_branch: string;
            tag_list: [string, string];
            topics: [string, string];
            ssh_url_to_repo: string;
            http_url_to_repo: string;
            web_url: string;
            readme_url: string;
            forks_count: number;
            license_url: string;
            license: {
                key: {
                    value: {};
                };
                name: {
                    value: {};
                };
                nickname: {
                    value: {};
                };
                html_url: {
                    value: {};
                };
                source_url: {
                    value: {};
                };
            };
            avatar_url: string;
            star_count: number;
            last_activity_at: string;
            namespace: {
                id: {
                    value: {};
                };
                name: {
                    value: {};
                };
                path: {
                    value: {};
                };
                kind: {
                    value: {};
                };
                full_path: {
                    value: {};
                };
                parent_id: {
                    value: {};
                };
                avatar_url: {
                    value: {};
                };
                web_url: {
                    value: {};
                };
            };
            custom_attributes: {
                key: {
                    value: {};
                };
                value: {
                    value: {};
                };
            };
            repository_storage: string;
        }, {
            id: number;
            description: string;
            name: string;
            name_with_namespace: string;
            path: string;
            path_with_namespace: string;
            created_at: string;
            default_branch: string;
            tag_list: [string, string];
            topics: [string, string];
            ssh_url_to_repo: string;
            http_url_to_repo: string;
            web_url: string;
            readme_url: string;
            forks_count: number;
            license_url: string;
            license: {
                key: {
                    value: {};
                };
                name: {
                    value: {};
                };
                nickname: {
                    value: {};
                };
                html_url: {
                    value: {};
                };
                source_url: {
                    value: {};
                };
            };
            avatar_url: string;
            star_count: number;
            last_activity_at: string;
            namespace: {
                id: {
                    value: {};
                };
                name: {
                    value: {};
                };
                path: {
                    value: {};
                };
                kind: {
                    value: {};
                };
                full_path: {
                    value: {};
                };
                parent_id: {
                    value: {};
                };
                avatar_url: {
                    value: {};
                };
                web_url: {
                    value: {};
                };
            };
            custom_attributes: {
                key: {
                    value: {};
                };
                value: {
                    value: {};
                };
            };
            repository_storage: string;
        }];
    } | {
        code: 400;
    }>;
    post: ({ data }: {
        data: {
            name: string;
            path: string;
            default_branch: string;
            description: string;
            build_git_strategy: string;
            build_timeout: number;
            auto_cancel_pending_pipelines: string;
            ci_config_path: string;
            service_desk_enabled: boolean;
            issues_enabled: boolean;
            merge_requests_enabled: boolean;
            wiki_enabled: boolean;
            jobs_enabled: boolean;
            snippets_enabled: boolean;
            issues_access_level: string;
            repository_access_level: string;
            merge_requests_access_level: string;
            forking_access_level: string;
            wiki_access_level: string;
            builds_access_level: string;
            snippets_access_level: string;
            pages_access_level: string;
            analytics_access_level: string;
            container_registry_access_level: string;
            security_and_compliance_access_level: string;
            releases_access_level: string;
            environments_access_level: string;
            feature_flags_access_level: string;
            infrastructure_access_level: string;
            monitor_access_level: string;
            model_experiments_access_level: string;
            model_registry_access_level: string;
            emails_disabled: boolean;
            emails_enabled: boolean;
            show_default_award_emojis: boolean;
            show_diff_preview_in_email: boolean;
            warn_about_potentially_unwanted_characters: boolean;
            enforce_auth_checks_on_uploads: boolean;
            shared_runners_enabled: boolean;
            group_runners_enabled: boolean;
            resolve_outstringd_diff_discussions: boolean;
            remove_source_branch_after_merge: boolean;
            container_registry_enabled: boolean;
            container_expiration_policy_attributes: {
                cadence: string;
                keep_n: number;
                older_than: string;
                name_regex: string;
                name_regex_keep: string;
                enabled: boolean;
            };
            lfs_enabled: boolean;
            visibility: string;
            public_builds: boolean;
            public_jobs: boolean;
            request_access_enabled: boolean;
            only_allow_merge_if_pipeline_succeeds: boolean;
            allow_merge_on_skipped_pipeline: boolean;
            only_allow_merge_if_all_discussions_are_resolved: boolean;
            tag_list: [string, string];
            topics: [string, string];
            avatar: ArrayBuffer;
            printing_merge_request_link_enabled: boolean;
            merge_method: string;
            suggestion_commit_message: string;
            merge_commit_template: string;
            squash_commit_template: string;
            issue_branch_template: string;
            initialize_with_readme: boolean;
            auto_devops_enabled: boolean;
            auto_devops_deploy_strategy: string;
            autoclose_referenced_issues: boolean;
            repository_storage: string;
            packages_enabled: boolean;
            squash_option: string;
            mr_default_target_self: boolean;
            only_allow_merge_if_all_status_checks_passed: boolean;
            approvals_before_merge: number;
            mirror: boolean;
            mirror_trigger_builds: boolean;
            external_authorization_classification_label: string;
            requirements_access_level: string;
            prevent_merge_without_jira_issue: boolean;
            repository_object_format: string;
            use_custom_template: boolean;
            group_with_project_templates_id: number;
            namespace_id: number;
            import_url: string;
            template_name: string;
            template_project_id: number;
        };
    }, options?: {}) => Promise<{
        code: 201;
        data: {
            id: number;
            description: string;
            name: string;
            name_with_namespace: string;
            path: string;
            path_with_namespace: string;
            created_at: string;
            default_branch: string;
            tag_list: [string, string];
            topics: [string, string];
            ssh_url_to_repo: string;
            http_url_to_repo: string;
            web_url: string;
            readme_url: string;
            forks_count: number;
            license_url: string;
            license: {
                key: string;
                name: string;
                nickname: string;
                html_url: string;
                source_url: string;
            };
            avatar_url: string;
            star_count: number;
            last_activity_at: string;
            namespace: {
                id: number;
                name: string;
                path: string;
                kind: string;
                full_path: string;
                parent_id: number;
                avatar_url: string;
                web_url: string;
            };
            custom_attributes: {
                key: string;
                value: string;
            };
            repository_storage: string;
            container_registry_image_prefix: string;
            _links: {
                self: string;
                issues: string;
                merge_requests: string;
                repo_branches: string;
                labels: string;
                events: string;
                members: string;
                cluster_agents: string;
            };
            packages_enabled: boolean;
            empty_repo: boolean;
            archived: boolean;
            visibility: string;
            owner: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
            };
            resolve_outstringd_diff_discussions: boolean;
            container_expiration_policy: {
                cadence: string;
                enabled: string;
                keep_n: string;
                older_than: string;
                name_regex: string;
                name_regex_keep: string;
                next_run_at: string;
            };
            repository_object_format: string;
            issues_enabled: boolean;
            merge_requests_enabled: boolean;
            wiki_enabled: boolean;
            jobs_enabled: boolean;
            snippets_enabled: boolean;
            container_registry_enabled: boolean;
            service_desk_enabled: boolean;
            service_desk_address: string;
            can_create_merge_request_in: boolean;
            issues_access_level: string;
            repository_access_level: string;
            merge_requests_access_level: string;
            forking_access_level: string;
            wiki_access_level: string;
            builds_access_level: string;
            snippets_access_level: string;
            pages_access_level: string;
            analytics_access_level: string;
            container_registry_access_level: string;
            security_and_compliance_access_level: string;
            releases_access_level: string;
            environments_access_level: string;
            feature_flags_access_level: string;
            infrastructure_access_level: string;
            monitor_access_level: string;
            model_experiments_access_level: string;
            model_registry_access_level: string;
            emails_disabled: boolean;
            emails_enabled: boolean;
            shared_runners_enabled: boolean;
            lfs_enabled: boolean;
            creator_id: number;
            forked_from_project: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    nickname: {
                        value: {};
                    };
                    html_url: {
                        value: {};
                    };
                    source_url: {
                        value: {};
                    };
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    kind: {
                        value: {};
                    };
                    full_path: {
                        value: {};
                    };
                    parent_id: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                custom_attributes: {
                    key: {
                        value: {};
                    };
                    value: {
                        value: {};
                    };
                };
                repository_storage: string;
            };
            mr_default_target_self: boolean;
            import_url: string;
            import_type: string;
            import_status: string;
            import_error: string;
            open_issues_count: number;
            description_html: string;
            upstringd_at: string;
            ci_default_git_depth: number;
            ci_forward_deployment_enabled: boolean;
            ci_forward_deployment_rollback_allowed: boolean;
            ci_job_token_scope_enabled: boolean;
            ci_separated_caches: boolean;
            ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
            build_git_strategy: string;
            keep_latest_artifact: boolean;
            restrict_user_defined_variables: boolean;
            ci_pipeline_variables_minimum_override_role: string;
            runners_token: string;
            runner_token_expiration_interval: number;
            group_runners_enabled: boolean;
            auto_cancel_pending_pipelines: string;
            build_timeout: number;
            auto_devops_enabled: boolean;
            auto_devops_deploy_strategy: string;
            ci_config_path: string;
            public_jobs: boolean;
            shared_with_groups: [string, string];
            only_allow_merge_if_pipeline_succeeds: boolean;
            allow_merge_on_skipped_pipeline: boolean;
            request_access_enabled: boolean;
            only_allow_merge_if_all_discussions_are_resolved: boolean;
            remove_source_branch_after_merge: boolean;
            printing_merge_request_link_enabled: boolean;
            merge_method: string;
            squash_option: string;
            enforce_auth_checks_on_uploads: boolean;
            suggestion_commit_message: string;
            merge_commit_template: string;
            squash_commit_template: string;
            issue_branch_template: string;
            statistics: {
                commit_count: string;
                storage_size: string;
                repository_size: string;
                wiki_size: string;
                lfs_objects_size: string;
                job_artifacts_size: string;
                pipeline_artifacts_size: string;
                packages_size: string;
                snippets_size: string;
                uploads_size: string;
                container_registry_size: string;
            };
            warn_about_potentially_unwanted_characters: boolean;
            autoclose_referenced_issues: boolean;
            approvals_before_merge: string;
            mirror: string;
            mirror_user_id: string;
            mirror_trigger_builds: string;
            only_mirror_protected_branches: string;
            mirror_overwrites_diverged_branches: string;
            external_authorization_classification_label: string;
            marked_for_deletion_at: string;
            marked_for_deletion_on: string;
            requirements_enabled: string;
            requirements_access_level: string;
            security_and_compliance_enabled: string;
            compliance_frameworks: string;
            issues_template: string;
            merge_requests_template: string;
            ci_restrict_pipeline_cancellation_role: string;
            merge_pipelines_enabled: string;
            merge_trains_enabled: string;
            merge_trains_skip_train_allowed: string;
            only_allow_merge_if_all_status_checks_passed: string;
            allow_pipeline_trigger_approve_deployment: boolean;
            prevent_merge_without_jira_issue: string;
        };
    } | {
        code: 400;
    } | {
        code: 403;
    } | {
        code: 404;
    }>;
    getOne: ({ params, query }: {
        params: {
            id: string;
        };
        query?: {
            statistics: string;
            with_custom_attributes: string;
            license: string;
        };
    }, options?: {}) => Promise<{
        code: 200;
        data: {
            id: number;
            description: string;
            name: string;
            name_with_namespace: string;
            path: string;
            path_with_namespace: string;
            created_at: string;
            default_branch: string;
            tag_list: [string, string];
            topics: [string, string];
            ssh_url_to_repo: string;
            http_url_to_repo: string;
            web_url: string;
            readme_url: string;
            forks_count: number;
            license_url: string;
            license: {
                key: string;
                name: string;
                nickname: string;
                html_url: string;
                source_url: string;
            };
            avatar_url: string;
            star_count: number;
            last_activity_at: string;
            namespace: {
                id: number;
                name: string;
                path: string;
                kind: string;
                full_path: string;
                parent_id: number;
                avatar_url: string;
                web_url: string;
            };
            custom_attributes: {
                key: string;
                value: string;
            };
            repository_storage: string;
            container_registry_image_prefix: string;
            _links: {
                self: string;
                issues: string;
                merge_requests: string;
                repo_branches: string;
                labels: string;
                events: string;
                members: string;
                cluster_agents: string;
            };
            packages_enabled: boolean;
            empty_repo: boolean;
            archived: boolean;
            visibility: string;
            owner: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
            };
            resolve_outstringd_diff_discussions: boolean;
            container_expiration_policy: {
                cadence: string;
                enabled: string;
                keep_n: string;
                older_than: string;
                name_regex: string;
                name_regex_keep: string;
                next_run_at: string;
            };
            repository_object_format: string;
            issues_enabled: boolean;
            merge_requests_enabled: boolean;
            wiki_enabled: boolean;
            jobs_enabled: boolean;
            snippets_enabled: boolean;
            container_registry_enabled: boolean;
            service_desk_enabled: boolean;
            service_desk_address: string;
            can_create_merge_request_in: boolean;
            issues_access_level: string;
            repository_access_level: string;
            merge_requests_access_level: string;
            forking_access_level: string;
            wiki_access_level: string;
            builds_access_level: string;
            snippets_access_level: string;
            pages_access_level: string;
            analytics_access_level: string;
            container_registry_access_level: string;
            security_and_compliance_access_level: string;
            releases_access_level: string;
            environments_access_level: string;
            feature_flags_access_level: string;
            infrastructure_access_level: string;
            monitor_access_level: string;
            model_experiments_access_level: string;
            model_registry_access_level: string;
            emails_disabled: boolean;
            emails_enabled: boolean;
            shared_runners_enabled: boolean;
            lfs_enabled: boolean;
            creator_id: number;
            forked_from_project: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    nickname: {
                        value: {};
                    };
                    html_url: {
                        value: {};
                    };
                    source_url: {
                        value: {};
                    };
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    kind: {
                        value: {};
                    };
                    full_path: {
                        value: {};
                    };
                    parent_id: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                custom_attributes: {
                    key: {
                        value: {};
                    };
                    value: {
                        value: {};
                    };
                };
                repository_storage: string;
            };
            mr_default_target_self: boolean;
            import_url: string;
            import_type: string;
            import_status: string;
            import_error: string;
            open_issues_count: number;
            description_html: string;
            upstringd_at: string;
            ci_default_git_depth: number;
            ci_forward_deployment_enabled: boolean;
            ci_forward_deployment_rollback_allowed: boolean;
            ci_job_token_scope_enabled: boolean;
            ci_separated_caches: boolean;
            ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
            build_git_strategy: string;
            keep_latest_artifact: boolean;
            restrict_user_defined_variables: boolean;
            ci_pipeline_variables_minimum_override_role: string;
            runners_token: string;
            runner_token_expiration_interval: number;
            group_runners_enabled: boolean;
            auto_cancel_pending_pipelines: string;
            build_timeout: number;
            auto_devops_enabled: boolean;
            auto_devops_deploy_strategy: string;
            ci_config_path: string;
            public_jobs: boolean;
            shared_with_groups: [string, string];
            only_allow_merge_if_pipeline_succeeds: boolean;
            allow_merge_on_skipped_pipeline: boolean;
            request_access_enabled: boolean;
            only_allow_merge_if_all_discussions_are_resolved: boolean;
            remove_source_branch_after_merge: boolean;
            printing_merge_request_link_enabled: boolean;
            merge_method: string;
            squash_option: string;
            enforce_auth_checks_on_uploads: boolean;
            suggestion_commit_message: string;
            merge_commit_template: string;
            squash_commit_template: string;
            issue_branch_template: string;
            statistics: {
                commit_count: string;
                storage_size: string;
                repository_size: string;
                wiki_size: string;
                lfs_objects_size: string;
                job_artifacts_size: string;
                pipeline_artifacts_size: string;
                packages_size: string;
                snippets_size: string;
                uploads_size: string;
                container_registry_size: string;
            };
            warn_about_potentially_unwanted_characters: boolean;
            autoclose_referenced_issues: boolean;
            approvals_before_merge: string;
            mirror: string;
            mirror_user_id: string;
            mirror_trigger_builds: string;
            only_mirror_protected_branches: string;
            mirror_overwrites_diverged_branches: string;
            external_authorization_classification_label: string;
            marked_for_deletion_at: string;
            marked_for_deletion_on: string;
            requirements_enabled: string;
            requirements_access_level: string;
            security_and_compliance_enabled: string;
            compliance_frameworks: string;
            issues_template: string;
            merge_requests_template: string;
            ci_restrict_pipeline_cancellation_role: string;
            merge_pipelines_enabled: string;
            merge_trains_enabled: string;
            merge_trains_skip_train_allowed: string;
            only_allow_merge_if_all_status_checks_passed: string;
            allow_pipeline_trigger_approve_deployment: boolean;
            prevent_merge_without_jira_issue: string;
            permissions: {
                project_access: {
                    access_level: string;
                    notification_level: string;
                };
                group_access: {
                    access_level: string;
                    notification_level: string;
                };
            };
        };
    }>;
    put: ({ params, data }: {
        params: {
            id: string;
        };
        data: {
            name: string;
            default_branch: string;
            path: string;
            description: string;
            build_git_strategy: string;
            build_timeout: number;
            auto_cancel_pending_pipelines: string;
            ci_config_path: string;
            service_desk_enabled: boolean;
            issues_enabled: boolean;
            merge_requests_enabled: boolean;
            wiki_enabled: boolean;
            jobs_enabled: boolean;
            snippets_enabled: boolean;
            issues_access_level: string;
            repository_access_level: string;
            merge_requests_access_level: string;
            forking_access_level: string;
            wiki_access_level: string;
            builds_access_level: string;
            snippets_access_level: string;
            pages_access_level: string;
            analytics_access_level: string;
            container_registry_access_level: string;
            security_and_compliance_access_level: string;
            releases_access_level: string;
            environments_access_level: string;
            feature_flags_access_level: string;
            infrastructure_access_level: string;
            monitor_access_level: string;
            model_experiments_access_level: string;
            model_registry_access_level: string;
            emails_disabled: boolean;
            emails_enabled: boolean;
            show_default_award_emojis: boolean;
            show_diff_preview_in_email: boolean;
            warn_about_potentially_unwanted_characters: boolean;
            enforce_auth_checks_on_uploads: boolean;
            shared_runners_enabled: boolean;
            group_runners_enabled: boolean;
            resolve_outstringd_diff_discussions: boolean;
            remove_source_branch_after_merge: boolean;
            container_registry_enabled: boolean;
            container_expiration_policy_attributes: {
                cadence: string;
                keep_n: number;
                older_than: string;
                name_regex: string;
                name_regex_keep: string;
                enabled: boolean;
            };
            lfs_enabled: boolean;
            visibility: string;
            public_builds: boolean;
            public_jobs: boolean;
            request_access_enabled: boolean;
            only_allow_merge_if_pipeline_succeeds: boolean;
            allow_merge_on_skipped_pipeline: boolean;
            only_allow_merge_if_all_discussions_are_resolved: boolean;
            tag_list: [string, string];
            topics: [string, string];
            avatar: ArrayBuffer;
            printing_merge_request_link_enabled: boolean;
            merge_method: string;
            suggestion_commit_message: string;
            merge_commit_template: string;
            squash_commit_template: string;
            issue_branch_template: string;
            initialize_with_readme: boolean;
            auto_devops_enabled: boolean;
            auto_devops_deploy_strategy: string;
            autoclose_referenced_issues: boolean;
            repository_storage: string;
            packages_enabled: boolean;
            squash_option: string;
            mr_default_target_self: boolean;
            only_allow_merge_if_all_status_checks_passed: boolean;
            approvals_before_merge: number;
            mirror: boolean;
            mirror_trigger_builds: boolean;
            external_authorization_classification_label: string;
            requirements_access_level: string;
            prevent_merge_without_jira_issue: boolean;
            ci_default_git_depth: number;
            keep_latest_artifact: boolean;
            ci_forward_deployment_enabled: boolean;
            ci_forward_deployment_rollback_allowed: boolean;
            ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
            ci_separated_caches: boolean;
            restrict_user_defined_variables: boolean;
            ci_pipeline_variables_minimum_override_role: string;
            allow_pipeline_trigger_approve_deployment: boolean;
            mirror_user_id: number;
            only_mirror_protected_branches: boolean;
            mirror_branch_regex: string;
            mirror_overwrites_diverged_branches: boolean;
            import_url: string;
            fallback_approvals_required: number;
            issues_template: string;
            merge_requests_template: string;
            merge_pipelines_enabled: boolean;
            merge_trains_enabled: boolean;
            merge_trains_skip_train_allowed: boolean;
            ci_restrict_pipeline_cancellation_role: string;
        };
    }, options?: {}) => Promise<{
        code: 200;
        data: {
            id: number;
            description: string;
            name: string;
            name_with_namespace: string;
            path: string;
            path_with_namespace: string;
            created_at: string;
            default_branch: string;
            tag_list: [string, string];
            topics: [string, string];
            ssh_url_to_repo: string;
            http_url_to_repo: string;
            web_url: string;
            readme_url: string;
            forks_count: number;
            license_url: string;
            license: {
                key: string;
                name: string;
                nickname: string;
                html_url: string;
                source_url: string;
            };
            avatar_url: string;
            star_count: number;
            last_activity_at: string;
            namespace: {
                id: number;
                name: string;
                path: string;
                kind: string;
                full_path: string;
                parent_id: number;
                avatar_url: string;
                web_url: string;
            };
            custom_attributes: {
                key: string;
                value: string;
            };
            repository_storage: string;
            container_registry_image_prefix: string;
            _links: {
                self: string;
                issues: string;
                merge_requests: string;
                repo_branches: string;
                labels: string;
                events: string;
                members: string;
                cluster_agents: string;
            };
            packages_enabled: boolean;
            empty_repo: boolean;
            archived: boolean;
            visibility: string;
            owner: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
            };
            resolve_outstringd_diff_discussions: boolean;
            container_expiration_policy: {
                cadence: string;
                enabled: string;
                keep_n: string;
                older_than: string;
                name_regex: string;
                name_regex_keep: string;
                next_run_at: string;
            };
            repository_object_format: string;
            issues_enabled: boolean;
            merge_requests_enabled: boolean;
            wiki_enabled: boolean;
            jobs_enabled: boolean;
            snippets_enabled: boolean;
            container_registry_enabled: boolean;
            service_desk_enabled: boolean;
            service_desk_address: string;
            can_create_merge_request_in: boolean;
            issues_access_level: string;
            repository_access_level: string;
            merge_requests_access_level: string;
            forking_access_level: string;
            wiki_access_level: string;
            builds_access_level: string;
            snippets_access_level: string;
            pages_access_level: string;
            analytics_access_level: string;
            container_registry_access_level: string;
            security_and_compliance_access_level: string;
            releases_access_level: string;
            environments_access_level: string;
            feature_flags_access_level: string;
            infrastructure_access_level: string;
            monitor_access_level: string;
            model_experiments_access_level: string;
            model_registry_access_level: string;
            emails_disabled: boolean;
            emails_enabled: boolean;
            shared_runners_enabled: boolean;
            lfs_enabled: boolean;
            creator_id: number;
            forked_from_project: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    nickname: {
                        value: {};
                    };
                    html_url: {
                        value: {};
                    };
                    source_url: {
                        value: {};
                    };
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    kind: {
                        value: {};
                    };
                    full_path: {
                        value: {};
                    };
                    parent_id: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                custom_attributes: {
                    key: {
                        value: {};
                    };
                    value: {
                        value: {};
                    };
                };
                repository_storage: string;
            };
            mr_default_target_self: boolean;
            import_url: string;
            import_type: string;
            import_status: string;
            import_error: string;
            open_issues_count: number;
            description_html: string;
            upstringd_at: string;
            ci_default_git_depth: number;
            ci_forward_deployment_enabled: boolean;
            ci_forward_deployment_rollback_allowed: boolean;
            ci_job_token_scope_enabled: boolean;
            ci_separated_caches: boolean;
            ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
            build_git_strategy: string;
            keep_latest_artifact: boolean;
            restrict_user_defined_variables: boolean;
            ci_pipeline_variables_minimum_override_role: string;
            runners_token: string;
            runner_token_expiration_interval: number;
            group_runners_enabled: boolean;
            auto_cancel_pending_pipelines: string;
            build_timeout: number;
            auto_devops_enabled: boolean;
            auto_devops_deploy_strategy: string;
            ci_config_path: string;
            public_jobs: boolean;
            shared_with_groups: [string, string];
            only_allow_merge_if_pipeline_succeeds: boolean;
            allow_merge_on_skipped_pipeline: boolean;
            request_access_enabled: boolean;
            only_allow_merge_if_all_discussions_are_resolved: boolean;
            remove_source_branch_after_merge: boolean;
            printing_merge_request_link_enabled: boolean;
            merge_method: string;
            squash_option: string;
            enforce_auth_checks_on_uploads: boolean;
            suggestion_commit_message: string;
            merge_commit_template: string;
            squash_commit_template: string;
            issue_branch_template: string;
            statistics: {
                commit_count: string;
                storage_size: string;
                repository_size: string;
                wiki_size: string;
                lfs_objects_size: string;
                job_artifacts_size: string;
                pipeline_artifacts_size: string;
                packages_size: string;
                snippets_size: string;
                uploads_size: string;
                container_registry_size: string;
            };
            warn_about_potentially_unwanted_characters: boolean;
            autoclose_referenced_issues: boolean;
            approvals_before_merge: string;
            mirror: string;
            mirror_user_id: string;
            mirror_trigger_builds: string;
            only_mirror_protected_branches: string;
            mirror_overwrites_diverged_branches: string;
            external_authorization_classification_label: string;
            marked_for_deletion_at: string;
            marked_for_deletion_on: string;
            requirements_enabled: string;
            requirements_access_level: string;
            security_and_compliance_enabled: string;
            compliance_frameworks: string;
            issues_template: string;
            merge_requests_template: string;
            ci_restrict_pipeline_cancellation_role: string;
            merge_pipelines_enabled: string;
            merge_trains_enabled: string;
            merge_trains_skip_train_allowed: string;
            only_allow_merge_if_all_status_checks_passed: string;
            allow_pipeline_trigger_approve_deployment: boolean;
            prevent_merge_without_jira_issue: string;
        };
    } | {
        code: 400;
    } | {
        code: 403;
    }>;
    delete: ({ params }: {
        params: {
            id: string;
        };
    }, options?: {}) => Promise<{
        code: 202;
    } | {
        code: 403;
    } | {
        code: 404;
    }>;
    access_requests: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    key: string;
                    value: string;
                }, {
                    key: string;
                    value: string;
                }];
                web_url: string;
                requested_at: string;
            };
        }>;
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    key: string;
                    value: string;
                }, {
                    key: string;
                    value: string;
                }];
                web_url: string;
                requested_at: string;
            };
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                user_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        }>;
        approve: {
            put: ({ params, data }: {
                params: {
                    id: string;
                    user_id: string;
                };
                data: {
                    access_level: 30;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        key: string;
                        value: string;
                    }, {
                        key: string;
                        value: string;
                    }];
                    web_url: string;
                    requested_at: string;
                };
            }>;
        };
    };
    badges: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                name: string;
                link_url: string;
                image_url: string;
                rendered_link_url: string;
                rendered_image_url: string;
                id: string;
                kind: string;
            }, {
                name: string;
                link_url: string;
                image_url: string;
                rendered_link_url: string;
                rendered_image_url: string;
                id: string;
                kind: string;
            }];
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                link_url: string;
                image_url: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                name: string;
                link_url: string;
                image_url: string;
                rendered_link_url: string;
                rendered_image_url: string;
                id: string;
                kind: string;
            };
        }>;
        render: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    link_url: string;
                    image_url: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    name: string;
                    link_url: string;
                    image_url: string;
                    rendered_link_url: string;
                    rendered_image_url: string;
                };
            }>;
        };
        getOne: ({ params }: {
            params: {
                id: string;
                badge_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                name: string;
                link_url: string;
                image_url: string;
                rendered_link_url: string;
                rendered_image_url: string;
                id: string;
                kind: string;
            };
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                badge_id: string;
            };
            data: {
                link_url: string;
                image_url: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                name: string;
                link_url: string;
                image_url: string;
                rendered_link_url: string;
                rendered_image_url: string;
                id: string;
                kind: string;
            };
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                badge_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        }>;
    };
    repository: {
        branches: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                    search: string;
                    regex: string;
                    sort: string;
                    page_token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    name: string;
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merged: boolean;
                    protected: boolean;
                    developers_can_push: boolean;
                    developers_can_merge: boolean;
                    can_push: boolean;
                    default: boolean;
                    web_url: string;
                }, {
                    name: string;
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merged: boolean;
                    protected: boolean;
                    developers_can_push: boolean;
                    developers_can_merge: boolean;
                    can_push: boolean;
                    default: boolean;
                    web_url: string;
                }];
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    branch: string;
                    ref: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    name: string;
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    merged: boolean;
                    protected: boolean;
                    developers_can_push: boolean;
                    developers_can_merge: boolean;
                    can_push: boolean;
                    default: boolean;
                    web_url: string;
                };
            } | {
                code: 400;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    branch: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 404;
            }>;
            head: ({ params }: {
                params: {
                    id: string;
                    branch: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 404;
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    branch: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    name: string;
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    merged: boolean;
                    protected: boolean;
                    developers_can_push: boolean;
                    developers_can_merge: boolean;
                    can_push: boolean;
                    default: boolean;
                    web_url: string;
                };
            } | {
                code: 404;
            }>;
            protect: {
                put: ({ params, data }: {
                    params: {
                        id: string;
                        branch: string;
                    };
                    data: {
                        developers_can_push: boolean;
                        developers_can_merge: boolean;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        name: string;
                        commit: {
                            id: string;
                            short_id: string;
                            created_at: string;
                            parent_ids: [string, string];
                            title: string;
                            message: string;
                            author_name: string;
                            author_email: string;
                            authored_string: string;
                            committer_name: string;
                            committer_email: string;
                            committed_string: string;
                            trailers: object;
                            extended_trailers: object;
                            web_url: string;
                        };
                        merged: boolean;
                        protected: boolean;
                        developers_can_push: boolean;
                        developers_can_merge: boolean;
                        can_push: boolean;
                        default: boolean;
                        web_url: string;
                    };
                } | {
                    code: 404;
                }>;
            };
            unprotect: {
                put: ({ params }: {
                    params: {
                        id: string;
                        branch: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        name: string;
                        commit: {
                            id: string;
                            short_id: string;
                            created_at: string;
                            parent_ids: [string, string];
                            title: string;
                            message: string;
                            author_name: string;
                            author_email: string;
                            authored_string: string;
                            committer_name: string;
                            committer_email: string;
                            committed_string: string;
                            trailers: object;
                            extended_trailers: object;
                            web_url: string;
                        };
                        merged: boolean;
                        protected: boolean;
                        developers_can_push: boolean;
                        developers_can_merge: boolean;
                        can_push: boolean;
                        default: boolean;
                        web_url: string;
                    };
                } | {
                    code: 404;
                }>;
            };
        };
        merged_branches: {
            delete: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 202;
            } | {
                code: 404;
            }>;
        };
        commits: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    ref_name: string;
                    since: string;
                    until: string;
                    path: string;
                    author: string;
                    all: string;
                    with_stats: string;
                    first_parent: string;
                    order: string;
                    trailers: string;
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                }, {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                }];
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    branch: string;
                    commit_message: string;
                    actions: [{
                        action: string;
                        file_path: string;
                        previous_path: string;
                        content: string;
                        execute_filemode: boolean;
                        encoding: string;
                        last_commit_id: string;
                    }, {
                        action: string;
                        file_path: string;
                        previous_path: string;
                        content: string;
                        execute_filemode: boolean;
                        encoding: string;
                        last_commit_id: string;
                    }];
                    start_branch: string;
                    start_sha: string;
                    start_project: number;
                    author_email: string;
                    author_name: string;
                    stats: true;
                    force: false;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                    stats: {
                        additions: number;
                        deletions: number;
                        total: number;
                    };
                    status: string;
                    project_id: number;
                    last_pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            getOne: ({ params, query }: {
                params: {
                    id: string;
                    sha: string;
                };
                query?: {
                    stats: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                    stats: {
                        additions: number;
                        deletions: number;
                        total: number;
                    };
                    status: string;
                    project_id: number;
                    last_pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                };
            } | {
                code: 404;
            }>;
            diff: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    query?: {
                        page: string;
                        per_page: string;
                        unidiff: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: [{
                        diff: string;
                        string_path: string;
                        old_path: string;
                        a_mode: string;
                        b_mode: string;
                        string_file: boolean;
                        renamed_file: boolean;
                        deleted_file: boolean;
                        generated_file: boolean;
                    }, {
                        diff: string;
                        string_path: string;
                        old_path: string;
                        a_mode: string;
                        b_mode: string;
                        string_file: boolean;
                        renamed_file: boolean;
                        deleted_file: boolean;
                        generated_file: boolean;
                    }];
                } | {
                    code: 404;
                }>;
            };
            comments: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    query?: {
                        page: string;
                        per_page: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: [{
                        note: string;
                        path: string;
                        line: number;
                        line_type: string;
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        created_at: string;
                    }, {
                        note: string;
                        path: string;
                        line: number;
                        line_type: string;
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        created_at: string;
                    }];
                } | {
                    code: 404;
                }>;
                post: ({ params, data }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    data: {
                        note: string;
                        line: number;
                        line_type: string;
                        path: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        note: string;
                        path: string;
                        line: number;
                        line_type: string;
                        author: {
                            id: number;
                            username: string;
                            name: string;
                            state: string;
                            locked: boolean;
                            avatar_url: string;
                            avatar_path: string;
                            custom_attributes: [{
                                value: {};
                            }, {
                                value: {};
                            }];
                            web_url: string;
                        };
                        created_at: string;
                    };
                } | {
                    code: 400;
                } | {
                    code: 404;
                }>;
            };
            sequence: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    query?: {
                        first_parent: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        count: number;
                    };
                } | {
                    code: 404;
                }>;
            };
            cherry_pick: {
                post: ({ params, data }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    data: {
                        branch: string;
                        dry_run: false;
                        message: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                } | {
                    code: 400;
                } | {
                    code: 404;
                }>;
            };
            revert: {
                post: ({ params, data }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    data: {
                        branch: string;
                        dry_run: false;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                } | {
                    code: 400;
                } | {
                    code: 404;
                }>;
            };
            refs: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    query?: {
                        type: string;
                        page: string;
                        per_page: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: [{
                        type: string;
                        name: string;
                    }, {
                        type: string;
                        name: string;
                    }];
                } | {
                    code: 404;
                }>;
            };
            merge_requests: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    query?: {
                        page: string;
                        per_page: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: [{
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        merged_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        merge_user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        merged_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        closed_at: string;
                        title_html: string;
                        description_html: string;
                        target_branch: string;
                        source_branch: string;
                        user_notes_count: string;
                        upvotes: string;
                        downvotes: string;
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        reviewers: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        source_project_id: string;
                        target_project_id: string;
                        labels: string;
                        draft: string;
                        imported: string;
                        imported_from: string;
                        work_in_progress: string;
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        merge_when_pipeline_succeeds: string;
                        merge_status: string;
                        detailed_merge_status: string;
                        sha: string;
                        merge_commit_sha: string;
                        squash_commit_sha: string;
                        discussion_locked: string;
                        should_remove_source_branch: string;
                        force_remove_source_branch: string;
                        prepared_at: string;
                        allow_collaboration: string;
                        allow_maintainer_to_push: string;
                        reference: string;
                        references: {
                            short: {
                                value: {};
                            };
                            relative: {
                                value: {};
                            };
                            full: {
                                value: {};
                            };
                        };
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        squash: string;
                        squash_on_merge: string;
                        task_completion_status: string;
                        has_conflicts: string;
                        blocking_discussions_resolved: string;
                        approvals_before_merge: string;
                    }, {
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        merged_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        merge_user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        merged_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        closed_at: string;
                        title_html: string;
                        description_html: string;
                        target_branch: string;
                        source_branch: string;
                        user_notes_count: string;
                        upvotes: string;
                        downvotes: string;
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        reviewers: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        source_project_id: string;
                        target_project_id: string;
                        labels: string;
                        draft: string;
                        imported: string;
                        imported_from: string;
                        work_in_progress: string;
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        merge_when_pipeline_succeeds: string;
                        merge_status: string;
                        detailed_merge_status: string;
                        sha: string;
                        merge_commit_sha: string;
                        squash_commit_sha: string;
                        discussion_locked: string;
                        should_remove_source_branch: string;
                        force_remove_source_branch: string;
                        prepared_at: string;
                        allow_collaboration: string;
                        allow_maintainer_to_push: string;
                        reference: string;
                        references: {
                            short: {
                                value: {};
                            };
                            relative: {
                                value: {};
                            };
                            full: {
                                value: {};
                            };
                        };
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        squash: string;
                        squash_on_merge: string;
                        task_completion_status: string;
                        has_conflicts: string;
                        blocking_discussions_resolved: string;
                        approvals_before_merge: string;
                    }];
                } | {
                    code: 404;
                }>;
            };
            signature: {
                get: ({ params }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        signature_type: string;
                        signature: string;
                        commit_source: string;
                    };
                } | {
                    code: 404;
                }>;
            };
            statuses: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                    query?: {
                        ref: string;
                        stage: string;
                        name: string;
                        all: string;
                        page: string;
                        per_page: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: [{
                        id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        name: string;
                        target_url: string;
                        description: string;
                        created_at: string;
                        started_at: string;
                        finished_at: string;
                        allow_failure: boolean;
                        coverage: number;
                        pipeline_id: number;
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                    }, {
                        id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        name: string;
                        target_url: string;
                        description: string;
                        created_at: string;
                        started_at: string;
                        finished_at: string;
                        allow_failure: boolean;
                        coverage: number;
                        pipeline_id: number;
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                    }];
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        files: {
            head: ({ params, query }: {
                params: {
                    id: string;
                    file_path: string;
                };
                query?: {
                    ref: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
            getOne: ({ params, query }: {
                params: {
                    id: string;
                    file_path: string;
                };
                query?: {
                    ref: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                    file_path: string;
                };
                data: {
                    branch: string;
                    commit_message: string;
                    content: string;
                    start_branch: string;
                    author_email: string;
                    author_name: string;
                    encoding: string;
                    last_commit_id: string;
                    execute_filemode: boolean;
                };
            }, options?: {}) => Promise<{
                code: 201;
            }>;
            put: ({ params, data }: {
                params: {
                    id: string;
                    file_path: string;
                };
                data: {
                    branch: string;
                    commit_message: string;
                    content: string;
                    start_branch: string;
                    author_email: string;
                    author_name: string;
                    encoding: string;
                    last_commit_id: string;
                    execute_filemode: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
            delete: ({ params, query }: {
                params: {
                    id: string;
                    file_path: string;
                };
                query?: {
                    branch: string;
                    commit_message: string;
                    start_branch: string;
                    author_email: string;
                    author_name: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            }>;
            blame: {
                head: ({ params, query }: {
                    params: {
                        id: string;
                        file_path: string;
                    };
                    query?: {
                        ref: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                }>;
                get: ({ params, query }: {
                    params: {
                        id: string;
                        file_path: string;
                    };
                    query?: {
                        ref: string;
                        "range[start]": string;
                        "range[end]": string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                }>;
            };
            raw: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        file_path: string;
                    };
                    query?: {
                        ref: string;
                        lfs: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: ArrayBuffer;
                }>;
            };
        };
        tree: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    ref: string;
                    path: string;
                    recursive: string;
                    page: string;
                    per_page: string;
                    pagination: string;
                    page_token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    name: string;
                    type: string;
                    path: string;
                    mode: string;
                };
            }>;
        };
        blobs: {
            getOne: ({ params }: {
                params: {
                    id: string;
                    sha: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
            raw: {
                get: ({ params }: {
                    params: {
                        id: string;
                        sha: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                }>;
            };
        };
        archive: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    sha: string;
                    format: string;
                    path: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
        };
        compare: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    from: string;
                    to: string;
                    from_project_id: string;
                    straight: string;
                    unidiff: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    commits: [{
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    }, {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    }];
                    diffs: [{
                        diff: string;
                        string_path: string;
                        old_path: string;
                        a_mode: string;
                        b_mode: string;
                        string_file: boolean;
                        renamed_file: boolean;
                        deleted_file: boolean;
                        generated_file: boolean;
                    }, {
                        diff: string;
                        string_path: string;
                        old_path: string;
                        a_mode: string;
                        b_mode: string;
                        string_file: boolean;
                        renamed_file: boolean;
                        deleted_file: boolean;
                        generated_file: boolean;
                    }];
                    compare_timeout: boolean;
                    compare_same_ref: boolean;
                    web_url: string;
                };
            }>;
        };
        contributors: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                    order_by: string;
                    sort: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    name: string;
                    email: string;
                    commits: number;
                    additions: number;
                    deletions: number;
                };
            }>;
        };
        merge_base: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    refs: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
            }>;
        };
        changelog: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    version: string;
                    from: string;
                    to: string;
                    date: string;
                    trailer: string;
                    config_file: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    notes: string;
                };
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    version: string;
                    from: string;
                    to: string;
                    string: string;
                    trailer: string;
                    branch: string;
                    config_file: string;
                    file: string;
                    message: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
        };
        submodules: {
            put: ({ params, data }: {
                params: {
                    id: string;
                    submodule: string;
                };
                data: {
                    commit_sha: string;
                    branch: string;
                    commit_message: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                    stats: {
                        additions: number;
                        deletions: number;
                        total: number;
                    };
                    status: string;
                    project_id: number;
                    last_pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        tags: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    sort: string;
                    order_by: string;
                    search: string;
                    page_token: string;
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    name: string;
                    message: string;
                    target: string;
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    release: {
                        tag_name: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                    };
                    protected: boolean;
                    created_at: string;
                }, {
                    name: string;
                    message: string;
                    target: string;
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    release: {
                        tag_name: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                    };
                    protected: boolean;
                    created_at: string;
                }];
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 422;
            } | {
                code: 503;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    tag_name: string;
                    ref: string;
                    message: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    name: string;
                    message: string;
                    target: string;
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    release: {
                        tag_name: string;
                        description: string;
                    };
                    protected: boolean;
                    created_at: string;
                };
            } | {
                code: 400;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    tag_name: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    name: string;
                    message: string;
                    target: string;
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    release: {
                        tag_name: string;
                        description: string;
                    };
                    protected: boolean;
                    created_at: string;
                };
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    tag_name: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 412;
            }>;
            signature: {
                get: ({ params }: {
                    params: {
                        id: string;
                        tag_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        signature_type: string;
                        signature: string;
                    };
                } | {
                    code: 404;
                }>;
            };
        };
    };
    jobs: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                scope: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                status: string;
                stage: string;
                name: string;
                ref: string;
                tag: boolean;
                coverage: number;
                allow_failure: boolean;
                created_at: string;
                started_at: string;
                finished_at: string;
                erased_at: string;
                duration: number;
                queued_duration: number;
                user: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    bio: {
                        value: {};
                    };
                    location: {
                        value: {};
                    };
                    public_email: {
                        value: {};
                    };
                    skype: {
                        value: {};
                    };
                    linkedin: {
                        value: {};
                    };
                    twitter: {
                        value: {};
                    };
                    discord: {
                        value: {};
                    };
                    website_url: {
                        value: {};
                    };
                    organization: {
                        value: {};
                    };
                    job_title: {
                        value: {};
                    };
                    pronouns: {
                        value: {};
                    };
                    bot: {
                        value: {};
                    };
                    work_information: {
                        value: {};
                    };
                    followers: {
                        value: {};
                    };
                    following: {
                        value: {};
                    };
                    is_followed: {
                        value: {};
                    };
                    local_time: {
                        value: {};
                    };
                };
                commit: {
                    id: {
                        value: {};
                    };
                    short_id: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    parent_ids: {
                        value: {};
                    };
                    title: {
                        value: {};
                    };
                    message: {
                        value: {};
                    };
                    author_name: {
                        value: {};
                    };
                    author_email: {
                        value: {};
                    };
                    authored_string: {
                        value: {};
                    };
                    committer_name: {
                        value: {};
                    };
                    committer_email: {
                        value: {};
                    };
                    committed_string: {
                        value: {};
                    };
                    trailers: {
                        value: {};
                    };
                    extended_trailers: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                pipeline: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    source: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                failure_reason: string;
                web_url: string;
                project: {
                    ci_job_token_scope_enabled: string;
                };
                artifacts_file: {
                    filename: {
                        value: {};
                    };
                    size: {
                        value: {};
                    };
                };
                artifacts: [{
                    value: {};
                }, {
                    value: {};
                }];
                runner: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    ip_address: {
                        value: {};
                    };
                    active: {
                        value: {};
                    };
                    paused: {
                        value: {};
                    };
                    is_shared: {
                        value: {};
                    };
                    runner_type: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    online: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                };
                runner_manager: {
                    id: {
                        value: {};
                    };
                    system_id: {
                        value: {};
                    };
                    version: {
                        value: {};
                    };
                    revision: {
                        value: {};
                    };
                    platform: {
                        value: {};
                    };
                    architecture: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    contacted_at: {
                        value: {};
                    };
                    ip_address: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                };
                artifacts_expire_at: string;
                archived: boolean;
                tag_list: [string, string];
            }, {
                id: number;
                status: string;
                stage: string;
                name: string;
                ref: string;
                tag: boolean;
                coverage: number;
                allow_failure: boolean;
                created_at: string;
                started_at: string;
                finished_at: string;
                erased_at: string;
                duration: number;
                queued_duration: number;
                user: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    bio: {
                        value: {};
                    };
                    location: {
                        value: {};
                    };
                    public_email: {
                        value: {};
                    };
                    skype: {
                        value: {};
                    };
                    linkedin: {
                        value: {};
                    };
                    twitter: {
                        value: {};
                    };
                    discord: {
                        value: {};
                    };
                    website_url: {
                        value: {};
                    };
                    organization: {
                        value: {};
                    };
                    job_title: {
                        value: {};
                    };
                    pronouns: {
                        value: {};
                    };
                    bot: {
                        value: {};
                    };
                    work_information: {
                        value: {};
                    };
                    followers: {
                        value: {};
                    };
                    following: {
                        value: {};
                    };
                    is_followed: {
                        value: {};
                    };
                    local_time: {
                        value: {};
                    };
                };
                commit: {
                    id: {
                        value: {};
                    };
                    short_id: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    parent_ids: {
                        value: {};
                    };
                    title: {
                        value: {};
                    };
                    message: {
                        value: {};
                    };
                    author_name: {
                        value: {};
                    };
                    author_email: {
                        value: {};
                    };
                    authored_string: {
                        value: {};
                    };
                    committer_name: {
                        value: {};
                    };
                    committer_email: {
                        value: {};
                    };
                    committed_string: {
                        value: {};
                    };
                    trailers: {
                        value: {};
                    };
                    extended_trailers: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                pipeline: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    source: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                failure_reason: string;
                web_url: string;
                project: {
                    ci_job_token_scope_enabled: string;
                };
                artifacts_file: {
                    filename: {
                        value: {};
                    };
                    size: {
                        value: {};
                    };
                };
                artifacts: [{
                    value: {};
                }, {
                    value: {};
                }];
                runner: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    ip_address: {
                        value: {};
                    };
                    active: {
                        value: {};
                    };
                    paused: {
                        value: {};
                    };
                    is_shared: {
                        value: {};
                    };
                    runner_type: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    online: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                };
                runner_manager: {
                    id: {
                        value: {};
                    };
                    system_id: {
                        value: {};
                    };
                    version: {
                        value: {};
                    };
                    revision: {
                        value: {};
                    };
                    platform: {
                        value: {};
                    };
                    architecture: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    contacted_at: {
                        value: {};
                    };
                    ip_address: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                };
                artifacts_expire_at: string;
                archived: boolean;
                tag_list: [string, string];
            }];
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        artifacts: {
            download: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        ref_name: string;
                    };
                    query?: {
                        job: string;
                        job_token: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            raw: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        ref_name: string;
                    };
                    query?: {
                        job: string;
                        artifact_path: string;
                        job_token: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 400;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            get: ({ params, query }: {
                params: {
                    id: string;
                    job_id: string;
                };
                query?: {
                    artifact_path: string;
                    job_token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    job_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 409;
            }>;
            keep: {
                post: ({ params }: {
                    params: {
                        id: string;
                        job_id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                    data: {
                        id: number;
                        status: string;
                        stage: string;
                        name: string;
                        ref: string;
                        tag: boolean;
                        coverage: number;
                        allow_failure: boolean;
                        created_at: string;
                        started_at: string;
                        finished_at: string;
                        erased_at: string;
                        duration: number;
                        queued_duration: number;
                        user: {
                            id: number;
                            username: string;
                            name: string;
                            state: string;
                            locked: boolean;
                            avatar_url: string;
                            avatar_path: string;
                            custom_attributes: [{
                                value: {};
                            }, {
                                value: {};
                            }];
                            web_url: string;
                            created_at: string;
                            bio: string;
                            location: string;
                            public_email: string;
                            skype: string;
                            linkedin: string;
                            twitter: string;
                            discord: string;
                            website_url: string;
                            organization: string;
                            job_title: string;
                            pronouns: string;
                            bot: string;
                            work_information: string;
                            followers: string;
                            following: string;
                            is_followed: string;
                            local_time: string;
                        };
                        commit: {
                            id: string;
                            short_id: string;
                            created_at: string;
                            parent_ids: [string, string];
                            title: string;
                            message: string;
                            author_name: string;
                            author_email: string;
                            authored_string: string;
                            committer_name: string;
                            committer_email: string;
                            committed_string: string;
                            trailers: object;
                            extended_trailers: object;
                            web_url: string;
                        };
                        pipeline: {
                            id: number;
                            iid: number;
                            project_id: number;
                            sha: string;
                            ref: string;
                            status: string;
                            source: string;
                            created_at: string;
                            upstringd_at: string;
                            web_url: string;
                        };
                        failure_reason: string;
                        web_url: string;
                        project: {
                            ci_job_token_scope_enabled: string;
                        };
                        artifacts_file: {
                            filename: string;
                            size: number;
                        };
                        artifacts: [{
                            file_type: string;
                            size: number;
                            filename: string;
                            file_format: string;
                        }, {
                            file_type: string;
                            size: number;
                            filename: string;
                            file_format: string;
                        }];
                        runner: {
                            id: number;
                            description: string;
                            ip_address: string;
                            active: boolean;
                            paused: boolean;
                            is_shared: boolean;
                            runner_type: string;
                            name: string;
                            online: boolean;
                            status: string;
                        };
                        runner_manager: {
                            id: number;
                            system_id: string;
                            version: string;
                            revision: string;
                            platform: string;
                            architecture: string;
                            created_at: string;
                            contacted_at: string;
                            ip_address: string;
                            status: string;
                        };
                        artifacts_expire_at: string;
                        archived: boolean;
                        tag_list: [string, string];
                    };
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        getOne: ({ params }: {
            params: {
                job_id: string;
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                status: string;
                stage: string;
                name: string;
                ref: string;
                tag: boolean;
                coverage: number;
                allow_failure: boolean;
                created_at: string;
                started_at: string;
                finished_at: string;
                erased_at: string;
                duration: number;
                queued_duration: number;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                    created_at: string;
                    bio: string;
                    location: string;
                    public_email: string;
                    skype: string;
                    linkedin: string;
                    twitter: string;
                    discord: string;
                    website_url: string;
                    organization: string;
                    job_title: string;
                    pronouns: string;
                    bot: string;
                    work_information: string;
                    followers: string;
                    following: string;
                    is_followed: string;
                    local_time: string;
                };
                commit: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
                pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
                failure_reason: string;
                web_url: string;
                project: {
                    ci_job_token_scope_enabled: string;
                };
                artifacts_file: {
                    filename: string;
                    size: number;
                };
                artifacts: [{
                    file_type: string;
                    size: number;
                    filename: string;
                    file_format: string;
                }, {
                    file_type: string;
                    size: number;
                    filename: string;
                    file_format: string;
                }];
                runner: {
                    id: number;
                    description: string;
                    ip_address: string;
                    active: boolean;
                    paused: boolean;
                    is_shared: boolean;
                    runner_type: string;
                    name: string;
                    online: boolean;
                    status: string;
                };
                runner_manager: {
                    id: number;
                    system_id: string;
                    version: string;
                    revision: string;
                    platform: string;
                    architecture: string;
                    created_at: string;
                    contacted_at: string;
                    ip_address: string;
                    status: string;
                };
                artifacts_expire_at: string;
                archived: boolean;
                tag_list: [string, string];
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        trace: {
            get: ({ params }: {
                params: {
                    job_id: string;
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                        created_at: string;
                        bio: string;
                        location: string;
                        public_email: string;
                        skype: string;
                        linkedin: string;
                        twitter: string;
                        discord: string;
                        website_url: string;
                        organization: string;
                        job_title: string;
                        pronouns: string;
                        bot: string;
                        work_information: string;
                        followers: string;
                        following: string;
                        is_followed: string;
                        local_time: string;
                    };
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: string;
                        size: number;
                    };
                    artifacts: [{
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }, {
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }];
                    runner: {
                        id: number;
                        description: string;
                        ip_address: string;
                        active: boolean;
                        paused: boolean;
                        is_shared: boolean;
                        runner_type: string;
                        name: string;
                        online: boolean;
                        status: string;
                    };
                    runner_manager: {
                        id: number;
                        system_id: string;
                        version: string;
                        revision: string;
                        platform: string;
                        architecture: string;
                        created_at: string;
                        contacted_at: string;
                        ip_address: string;
                        status: string;
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        cancel: {
            post: ({ params }: {
                params: {
                    job_id: string;
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                        created_at: string;
                        bio: string;
                        location: string;
                        public_email: string;
                        skype: string;
                        linkedin: string;
                        twitter: string;
                        discord: string;
                        website_url: string;
                        organization: string;
                        job_title: string;
                        pronouns: string;
                        bot: string;
                        work_information: string;
                        followers: string;
                        following: string;
                        is_followed: string;
                        local_time: string;
                    };
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: string;
                        size: number;
                    };
                    artifacts: [{
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }, {
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }];
                    runner: {
                        id: number;
                        description: string;
                        ip_address: string;
                        active: boolean;
                        paused: boolean;
                        is_shared: boolean;
                        runner_type: string;
                        name: string;
                        online: boolean;
                        status: string;
                    };
                    runner_manager: {
                        id: number;
                        system_id: string;
                        version: string;
                        revision: string;
                        platform: string;
                        architecture: string;
                        created_at: string;
                        contacted_at: string;
                        ip_address: string;
                        status: string;
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        retry: {
            post: ({ params }: {
                params: {
                    job_id: string;
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                        created_at: string;
                        bio: string;
                        location: string;
                        public_email: string;
                        skype: string;
                        linkedin: string;
                        twitter: string;
                        discord: string;
                        website_url: string;
                        organization: string;
                        job_title: string;
                        pronouns: string;
                        bot: string;
                        work_information: string;
                        followers: string;
                        following: string;
                        is_followed: string;
                        local_time: string;
                    };
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: string;
                        size: number;
                    };
                    artifacts: [{
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }, {
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }];
                    runner: {
                        id: number;
                        description: string;
                        ip_address: string;
                        active: boolean;
                        paused: boolean;
                        is_shared: boolean;
                        runner_type: string;
                        name: string;
                        online: boolean;
                        status: string;
                    };
                    runner_manager: {
                        id: number;
                        system_id: string;
                        version: string;
                        revision: string;
                        platform: string;
                        architecture: string;
                        created_at: string;
                        contacted_at: string;
                        ip_address: string;
                        status: string;
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        erase: {
            post: ({ params }: {
                params: {
                    job_id: string;
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                        created_at: string;
                        bio: string;
                        location: string;
                        public_email: string;
                        skype: string;
                        linkedin: string;
                        twitter: string;
                        discord: string;
                        website_url: string;
                        organization: string;
                        job_title: string;
                        pronouns: string;
                        bot: string;
                        work_information: string;
                        followers: string;
                        following: string;
                        is_followed: string;
                        local_time: string;
                    };
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: string;
                        size: number;
                    };
                    artifacts: [{
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }, {
                        file_type: string;
                        size: number;
                        filename: string;
                        file_format: string;
                    }];
                    runner: {
                        id: number;
                        description: string;
                        ip_address: string;
                        active: boolean;
                        paused: boolean;
                        is_shared: boolean;
                        runner_type: string;
                        name: string;
                        online: boolean;
                        status: string;
                    };
                    runner_manager: {
                        id: number;
                        system_id: string;
                        version: string;
                        revision: string;
                        platform: string;
                        architecture: string;
                        created_at: string;
                        contacted_at: string;
                        ip_address: string;
                        status: string;
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 409;
            }>;
        };
        play: {
            post: ({ params, data }: {
                params: {
                    job_id: string;
                    id: string;
                };
                data: {
                    job_variables_attributes: [{
                        key: string;
                        value: string;
                    }, {
                        key: string;
                        value: string;
                    }];
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                        created_at: string;
                        bio: string;
                        location: string;
                        public_email: string;
                        skype: string;
                        linkedin: string;
                        twitter: string;
                        discord: string;
                        website_url: string;
                        organization: string;
                        job_title: string;
                        pronouns: string;
                        bot: string;
                        work_information: string;
                        followers: string;
                        following: string;
                        is_followed: string;
                        local_time: string;
                    };
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    artifacts: {
        delete: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 202;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 409;
        }>;
    };
    resource_groups: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                key: string;
                process_mode: string;
                created_at: string;
                upstringd_at: string;
            }, {
                id: number;
                key: string;
                process_mode: string;
                created_at: string;
                upstringd_at: string;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                key: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                key: string;
                process_mode: string;
                created_at: string;
                upstringd_at: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                key: string;
            };
            data: {
                process_mode: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                key: string;
                process_mode: string;
                created_at: string;
                upstringd_at: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        upcoming_jobs: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    key: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                }, {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                }];
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
    };
    runners: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                scope: string;
                type: string;
                paused: string;
                status: string;
                tag_list: string;
                version_prefix: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                description: string;
                ip_address: string;
                active: boolean;
                paused: boolean;
                is_shared: boolean;
                runner_type: string;
                name: string;
                online: boolean;
                status: string;
            };
        } | {
            code: 400;
        } | {
            code: 403;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                runner_id: number;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                ip_address: string;
                active: boolean;
                paused: boolean;
                is_shared: boolean;
                runner_type: string;
                name: string;
                online: boolean;
                status: string;
            };
        } | {
            code: 400;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                runner_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                id: number;
                description: string;
                ip_address: string;
                active: boolean;
                paused: boolean;
                is_shared: boolean;
                runner_type: string;
                name: string;
                online: boolean;
                status: string;
            };
        } | {
            code: 400;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 412;
        }>;
        reset_registration_token: {
            post: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    token: string;
                    token_expires_at: string;
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    secure_files: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                checksum: string;
                checksum_algorithm: string;
                created_at: string;
                expires_at: string;
                metadata: object;
                file_extension: string;
            };
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                file: ArrayBuffer;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                name: string;
                checksum: string;
                checksum_algorithm: string;
                created_at: string;
                expires_at: string;
                metadata: object;
                file_extension: string;
            };
        } | {
            code: 400;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                secure_file_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                checksum: string;
                checksum_algorithm: string;
                created_at: string;
                expires_at: string;
                metadata: object;
                file_extension: string;
            };
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                secure_file_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 404;
        }>;
        download: {
            get: ({ params }: {
                params: {
                    id: string;
                    secure_file_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 404;
            }>;
        };
    };
    pipelines: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                scope: string;
                status: string;
                ref: string;
                sha: string;
                yaml_errors: string;
                username: string;
                updated_before: string;
                updated_after: string;
                order_by: string;
                sort: string;
                source: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                iid: number;
                project_id: number;
                sha: string;
                ref: string;
                status: string;
                source: string;
                created_at: string;
                upstringd_at: string;
                web_url: string;
            }, {
                id: number;
                iid: number;
                project_id: number;
                sha: string;
                ref: string;
                status: string;
                source: string;
                created_at: string;
                upstringd_at: string;
                web_url: string;
            }];
        } | {
            code: 401;
        } | {
            code: 403;
        }>;
        latest: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    ref: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: string;
                        string: string;
                        label: string;
                        group: string;
                        tooltip: string;
                        has_details: boolean;
                        details_path: string;
                        illustration: object;
                        favicon: string;
                        action: {
                            icon: string;
                            title: string;
                            path: string;
                            method: string;
                            button_title: string;
                            confirmation_message: string;
                        };
                    };
                    name: string;
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        getOne: ({ params }: {
            params: {
                id: string;
                pipeline_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                project_id: number;
                sha: string;
                ref: string;
                status: string;
                source: string;
                created_at: string;
                upstringd_at: string;
                web_url: string;
                before_sha: string;
                tag: boolean;
                yaml_errors: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                started_at: string;
                finished_at: string;
                committed_at: string;
                duration: number;
                queued_duration: number;
                coverage: number;
                detailed_status: {
                    icon: string;
                    string: string;
                    label: string;
                    group: string;
                    tooltip: string;
                    has_details: boolean;
                    details_path: string;
                    illustration: object;
                    favicon: string;
                    action: {
                        icon: string;
                        title: string;
                        path: string;
                        method: string;
                        button_title: string;
                        confirmation_message: string;
                    };
                };
                name: string;
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                pipeline_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 403;
        }>;
        jobs: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
                query?: {
                    include_retried: string;
                    scope: string;
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: {
                            value: {};
                        };
                        size: {
                            value: {};
                        };
                    };
                    artifacts: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    runner: {
                        id: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        active: {
                            value: {};
                        };
                        paused: {
                            value: {};
                        };
                        is_shared: {
                            value: {};
                        };
                        runner_type: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        online: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    runner_manager: {
                        id: {
                            value: {};
                        };
                        system_id: {
                            value: {};
                        };
                        version: {
                            value: {};
                        };
                        revision: {
                            value: {};
                        };
                        platform: {
                            value: {};
                        };
                        architecture: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        contacted_at: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                }, {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: {
                            value: {};
                        };
                        size: {
                            value: {};
                        };
                    };
                    artifacts: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    runner: {
                        id: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        active: {
                            value: {};
                        };
                        paused: {
                            value: {};
                        };
                        is_shared: {
                            value: {};
                        };
                        runner_type: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        online: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    runner_manager: {
                        id: {
                            value: {};
                        };
                        system_id: {
                            value: {};
                        };
                        version: {
                            value: {};
                        };
                        revision: {
                            value: {};
                        };
                        platform: {
                            value: {};
                        };
                        architecture: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        contacted_at: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                }];
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        bridges: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
                query?: {
                    scope: string;
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    downstream_pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                }, {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    downstream_pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                }];
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        variables: {
            get: ({ params }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                }, {
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                }];
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        test_report: {
            get: ({ params }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    total_time: number;
                    total_count: number;
                    success_count: number;
                    failed_count: number;
                    skipped_count: number;
                    error_count: number;
                    test_suites: [{
                        name: string;
                        total_time: number;
                        total_count: number;
                        success_count: number;
                        failed_count: number;
                        skipped_count: number;
                        error_count: number;
                        suite_error: string;
                        test_cases: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                    }, {
                        name: string;
                        total_time: number;
                        total_count: number;
                        success_count: number;
                        failed_count: number;
                        skipped_count: number;
                        error_count: number;
                        suite_error: string;
                        test_cases: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                    }];
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        test_report_summary: {
            get: ({ params }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    total: number;
                    test_suites: {
                        name: string;
                        total_time: number;
                        total_count: number;
                        success_count: number;
                        failed_count: number;
                        skipped_count: number;
                        error_count: number;
                        suite_error: string;
                        test_cases: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        build_ids: [number, number];
                    };
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        metadata: {
            put: ({ params, data }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
                data: {
                    name: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: string;
                        string: string;
                        label: string;
                        group: string;
                        tooltip: string;
                        has_details: boolean;
                        details_path: string;
                        illustration: object;
                        favicon: string;
                        action: {
                            icon: string;
                            title: string;
                            path: string;
                            method: string;
                            button_title: string;
                            confirmation_message: string;
                        };
                    };
                    name: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        retry: {
            post: ({ params }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: string;
                        string: string;
                        label: string;
                        group: string;
                        tooltip: string;
                        has_details: boolean;
                        details_path: string;
                        illustration: object;
                        favicon: string;
                        action: {
                            icon: string;
                            title: string;
                            path: string;
                            method: string;
                            button_title: string;
                            confirmation_message: string;
                        };
                    };
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        cancel: {
            post: ({ params }: {
                params: {
                    id: string;
                    pipeline_id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: string;
                        string: string;
                        label: string;
                        group: string;
                        tooltip: string;
                        has_details: boolean;
                        details_path: string;
                        illustration: object;
                        favicon: string;
                        action: {
                            icon: string;
                            title: string;
                            path: string;
                            method: string;
                            button_title: string;
                            confirmation_message: string;
                        };
                    };
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    pipeline: {
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                ref: string;
                variables: [{
                    key: string;
                    value: string;
                    variable_type: string;
                }, {
                    key: string;
                    value: string;
                    variable_type: string;
                }];
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                iid: number;
                project_id: number;
                sha: string;
                ref: string;
                status: string;
                source: string;
                created_at: string;
                upstringd_at: string;
                web_url: string;
                before_sha: string;
                tag: boolean;
                yaml_errors: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                started_at: string;
                finished_at: string;
                committed_at: string;
                duration: number;
                queued_duration: number;
                coverage: number;
                detailed_status: {
                    icon: string;
                    string: string;
                    label: string;
                    group: string;
                    tooltip: string;
                    has_details: boolean;
                    details_path: string;
                    illustration: object;
                    favicon: string;
                    action: {
                        icon: string;
                        title: string;
                        path: string;
                        method: string;
                        button_title: string;
                        confirmation_message: string;
                    };
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    pipeline_schedules: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                scope: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                description: string;
                ref: string;
                cron: string;
                cron_timezone: string;
                next_run_at: string;
                active: boolean;
                created_at: string;
                upstringd_at: string;
                owner: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
            }, {
                id: number;
                description: string;
                ref: string;
                cron: string;
                cron_timezone: string;
                next_run_at: string;
                active: boolean;
                created_at: string;
                upstringd_at: string;
                owner: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
            }];
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                description: string;
                ref: string;
                cron: string;
                cron_timezone: string;
                active: true;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                ref: string;
                cron: string;
                cron_timezone: string;
                next_run_at: string;
                active: boolean;
                created_at: string;
                upstringd_at: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                last_pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
                variables: {
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                pipeline_schedule_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                description: string;
                ref: string;
                cron: string;
                cron_timezone: string;
                next_run_at: string;
                active: boolean;
                created_at: string;
                upstringd_at: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                last_pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
                variables: {
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                };
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                pipeline_schedule_id: string;
            };
            data: {
                description: string;
                ref: string;
                cron: string;
                cron_timezone: string;
                active: boolean;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                description: string;
                ref: string;
                cron: string;
                cron_timezone: string;
                next_run_at: string;
                active: boolean;
                created_at: string;
                upstringd_at: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                last_pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
                variables: {
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                pipeline_schedule_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 412;
        }>;
        pipelines: {
            get: ({ params }: {
                params: {
                    id: string;
                    pipeline_schedule_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                }, {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                }];
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        take_ownership: {
            post: ({ params }: {
                params: {
                    id: string;
                    pipeline_schedule_id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    description: string;
                    ref: string;
                    cron: string;
                    cron_timezone: string;
                    next_run_at: string;
                    active: boolean;
                    created_at: string;
                    upstringd_at: string;
                    owner: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    last_pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    variables: {
                        variable_type: string;
                        key: string;
                        value: string;
                        hidden: boolean;
                        protected: boolean;
                        masked: boolean;
                        raw: boolean;
                        environment_scope: string;
                        description: string;
                    };
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        play: {
            post: ({ params }: {
                params: {
                    id: string;
                    pipeline_schedule_id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        variables: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    pipeline_schedule_id: string;
                };
                data: {
                    key: string;
                    value: string;
                    variable_type: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            put: ({ params, data }: {
                params: {
                    id: string;
                    pipeline_schedule_id: string;
                    key: string;
                };
                data: {
                    value: string;
                    variable_type: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    pipeline_schedule_id: string;
                    key: string;
                };
            }, options?: {}) => Promise<{
                code: 202;
                data: {
                    variable_type: string;
                    key: string;
                    value: string;
                    hidden: boolean;
                    protected: boolean;
                    masked: boolean;
                    raw: boolean;
                    environment_scope: string;
                    description: string;
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    ref: {
        pipeline: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    ref: string;
                };
                data: {
                    token: string;
                    variables: object;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: string;
                        string: string;
                        label: string;
                        group: string;
                        tooltip: string;
                        has_details: boolean;
                        details_path: string;
                        illustration: object;
                        favicon: string;
                        action: {
                            icon: string;
                            title: string;
                            path: string;
                            method: string;
                            button_title: string;
                            confirmation_message: string;
                        };
                    };
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    triggers: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                token: string;
                description: string;
                created_at: string;
                upstringd_at: string;
                last_used: string;
                owner: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
            }, {
                id: number;
                token: string;
                description: string;
                created_at: string;
                upstringd_at: string;
                last_used: string;
                owner: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
            }];
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                description: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                token: string;
                description: string;
                created_at: string;
                upstringd_at: string;
                last_used: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                trigger_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                token: string;
                description: string;
                created_at: string;
                upstringd_at: string;
                last_used: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                trigger_id: string;
            };
            data: {
                description: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                token: string;
                description: string;
                created_at: string;
                upstringd_at: string;
                last_used: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                trigger_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 412;
        }>;
    };
    variables: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                variable_type: string;
                key: string;
                value: string;
                hidden: boolean;
                protected: boolean;
                masked: boolean;
                raw: boolean;
                environment_scope: string;
                description: string;
            };
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                key: string;
                value: string;
                protected: boolean;
                masked: boolean;
                masked_and_hidden: boolean;
                raw: boolean;
                variable_type: string;
                environment_scope: string;
                description: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                variable_type: string;
                key: string;
                value: string;
                hidden: boolean;
                protected: boolean;
                masked: boolean;
                raw: boolean;
                environment_scope: string;
                description: string;
            };
        } | {
            code: 400;
        }>;
        getOne: ({ params, query }: {
            params: {
                id: string;
                key: string;
            };
            query?: {
                "filter[environment_scope]": string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                variable_type: string;
                key: string;
                value: string;
                hidden: boolean;
                protected: boolean;
                masked: boolean;
                raw: boolean;
                environment_scope: string;
                description: string;
            };
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                key: string;
            };
            data: {
                value: string;
                protected: boolean;
                masked: boolean;
                environment_scope: string;
                raw: boolean;
                variable_type: string;
                filter: {
                    environment_scope: string;
                };
                description: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                variable_type: string;
                key: string;
                value: string;
                hidden: boolean;
                protected: boolean;
                masked: boolean;
                raw: boolean;
                environment_scope: string;
                description: string;
            };
        } | {
            code: 404;
        }>;
        delete: ({ params, query }: {
            params: {
                id: string;
                key: string;
            };
            query?: {
                "filter[environment_scope]": string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                variable_type: string;
                key: string;
                value: string;
                hidden: boolean;
                protected: boolean;
                masked: boolean;
                raw: boolean;
                environment_scope: string;
                description: string;
            };
        } | {
            code: 404;
        }>;
    };
    cluster_agents: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                name: string;
                config_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                created_at: string;
                created_by_user_id: string;
            };
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: string;
                name: string;
                config_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                created_at: string;
                created_by_user_id: string;
            };
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                agent_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                name: string;
                config_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                created_at: string;
                created_by_user_id: string;
            };
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                agent_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        }>;
        tokens: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    agent_id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    name: string;
                    description: string;
                    agent_id: string;
                    status: string;
                    created_at: string;
                    created_by_user_id: string;
                };
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                    agent_id: string;
                };
                data: {
                    name: string;
                    description: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: string;
                    name: string;
                    description: string;
                    agent_id: string;
                    status: string;
                    created_at: string;
                    created_by_user_id: string;
                    last_used_at: string;
                    token: string;
                };
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    agent_id: string;
                    token_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    name: string;
                    description: string;
                    agent_id: string;
                    status: string;
                    created_at: string;
                    created_by_user_id: string;
                    last_used_at: string;
                };
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    agent_id: string;
                    token_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            }>;
        };
    };
    statuses: {
        post: ({ params, data }: {
            params: {
                id: string;
                sha: string;
            };
            data: {
                state: string;
                ref: string;
                target_url: string;
                description: string;
                name: string;
                constring: string;
                coverage: number;
                pipeline_id: number;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                sha: string;
                ref: string;
                status: string;
                name: string;
                target_url: string;
                description: string;
                created_at: string;
                started_at: string;
                finished_at: string;
                allow_failure: boolean;
                coverage: number;
                pipeline_id: number;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    deploy_keys: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                title: string;
                created_at: string;
                expires_at: string;
                key: string;
                usage_type: string;
                fingerprint: string;
                fingerprint_sha256: string;
                projects_with_write_access: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
                projects_with_readonly_access: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
                can_push: boolean;
            }, {
                id: number;
                title: string;
                created_at: string;
                expires_at: string;
                key: string;
                usage_type: string;
                fingerprint: string;
                fingerprint_sha256: string;
                projects_with_write_access: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
                projects_with_readonly_access: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
                can_push: boolean;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                key: string;
                title: string;
                can_push: boolean;
                expires_at: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                title: string;
                created_at: string;
                expires_at: string;
                key: string;
                usage_type: string;
                fingerprint: string;
                fingerprint_sha256: string;
                projects_with_write_access: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                projects_with_readonly_access: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                can_push: boolean;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                key_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                title: string;
                created_at: string;
                expires_at: string;
                key: string;
                usage_type: string;
                fingerprint: string;
                fingerprint_sha256: string;
                projects_with_write_access: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                projects_with_readonly_access: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                can_push: boolean;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                key_id: string;
            };
            data: {
                title: string;
                can_push: boolean;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                title: string;
                created_at: string;
                expires_at: string;
                key: string;
                usage_type: string;
                fingerprint: string;
                fingerprint_sha256: string;
                projects_with_write_access: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                projects_with_readonly_access: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                key_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        enable: {
            post: ({ params }: {
                params: {
                    id: string;
                    key_id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    title: string;
                    created_at: string;
                    expires_at: string;
                    key: string;
                    usage_type: string;
                    fingerprint: string;
                    fingerprint_sha256: string;
                    projects_with_write_access: {
                        id: number;
                        description: string;
                        name: string;
                        name_with_namespace: string;
                        path: string;
                        path_with_namespace: string;
                        created_at: string;
                    };
                    projects_with_readonly_access: {
                        id: number;
                        description: string;
                        name: string;
                        name_with_namespace: string;
                        path: string;
                        path_with_namespace: string;
                        created_at: string;
                    };
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
    };
    deploy_tokens: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                active: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                name: string;
                username: string;
                expires_at: string;
                revoked: boolean;
                expired: boolean;
            }, {
                id: number;
                name: string;
                username: string;
                expires_at: string;
                revoked: boolean;
                expired: boolean;
            }];
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                scopes: [string, string];
                expires_at: string;
                username: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                name: string;
                username: string;
                expires_at: string;
                revoked: boolean;
                expired: boolean;
                token: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                token_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                username: string;
                expires_at: string;
                revoked: boolean;
                expired: boolean;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                token_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
    };
    deployments: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                order_by: string;
                sort: string;
                updated_after: string;
                updated_before: string;
                finished_after: string;
                finished_before: string;
                environment: string;
                status: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                iid: number;
                ref: string;
                sha: string;
                created_at: string;
                upstringd_at: string;
                user: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                environment: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    slug: {
                        value: {};
                    };
                    external_url: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                };
                deployable: {
                    id: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    stage: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    tag: {
                        value: {};
                    };
                    coverage: {
                        value: {};
                    };
                    allow_failure: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    started_at: {
                        value: {};
                    };
                    finished_at: {
                        value: {};
                    };
                    erased_at: {
                        value: {};
                    };
                    duration: {
                        value: {};
                    };
                    queued_duration: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                    commit: {
                        value: {};
                    };
                    pipeline: {
                        value: {};
                    };
                    failure_reason: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    project: {
                        value: {};
                    };
                    artifacts_file: {
                        value: {};
                    };
                    artifacts: {
                        value: {};
                    };
                    runner: {
                        value: {};
                    };
                    runner_manager: {
                        value: {};
                    };
                    artifacts_expire_at: {
                        value: {};
                    };
                    archived: {
                        value: {};
                    };
                    tag_list: {
                        value: {};
                    };
                };
                status: string;
            }, {
                id: number;
                iid: number;
                ref: string;
                sha: string;
                created_at: string;
                upstringd_at: string;
                user: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                environment: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    slug: {
                        value: {};
                    };
                    external_url: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                };
                deployable: {
                    id: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    stage: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    tag: {
                        value: {};
                    };
                    coverage: {
                        value: {};
                    };
                    allow_failure: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    started_at: {
                        value: {};
                    };
                    finished_at: {
                        value: {};
                    };
                    erased_at: {
                        value: {};
                    };
                    duration: {
                        value: {};
                    };
                    queued_duration: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                    commit: {
                        value: {};
                    };
                    pipeline: {
                        value: {};
                    };
                    failure_reason: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    project: {
                        value: {};
                    };
                    artifacts_file: {
                        value: {};
                    };
                    artifacts: {
                        value: {};
                    };
                    runner: {
                        value: {};
                    };
                    runner_manager: {
                        value: {};
                    };
                    artifacts_expire_at: {
                        value: {};
                    };
                    archived: {
                        value: {};
                    };
                    tag_list: {
                        value: {};
                    };
                };
                status: string;
            }];
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                environment: string;
                sha: string;
                ref: string;
                tag: boolean;
                status: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                iid: number;
                ref: string;
                sha: string;
                created_at: string;
                upstringd_at: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                environment: {
                    id: number;
                    name: string;
                    slug: string;
                    external_url: string;
                    created_at: string;
                    upstringd_at: string;
                };
                deployable: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: {
                            value: {};
                        };
                        size: {
                            value: {};
                        };
                    };
                    artifacts: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    runner: {
                        id: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        active: {
                            value: {};
                        };
                        paused: {
                            value: {};
                        };
                        is_shared: {
                            value: {};
                        };
                        runner_type: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        online: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    runner_manager: {
                        id: {
                            value: {};
                        };
                        system_id: {
                            value: {};
                        };
                        version: {
                            value: {};
                        };
                        revision: {
                            value: {};
                        };
                        platform: {
                            value: {};
                        };
                        architecture: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        contacted_at: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                };
                status: string;
                pending_approval_count: number;
                approvals: {
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    status: string;
                    created_at: string;
                    comment: string;
                };
                approval_summary: {
                    rules: {
                        id: {
                            value: {};
                        };
                        user_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        access_level: {
                            value: {};
                        };
                        access_level_description: {
                            value: {};
                        };
                        required_approvals: {
                            value: {};
                        };
                        group_inheritance_type: {
                            value: {};
                        };
                        deployment_approvals: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                deployment_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                ref: string;
                sha: string;
                created_at: string;
                upstringd_at: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                environment: {
                    id: number;
                    name: string;
                    slug: string;
                    external_url: string;
                    created_at: string;
                    upstringd_at: string;
                };
                deployable: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: {
                            value: {};
                        };
                        size: {
                            value: {};
                        };
                    };
                    artifacts: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    runner: {
                        id: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        active: {
                            value: {};
                        };
                        paused: {
                            value: {};
                        };
                        is_shared: {
                            value: {};
                        };
                        runner_type: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        online: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    runner_manager: {
                        id: {
                            value: {};
                        };
                        system_id: {
                            value: {};
                        };
                        version: {
                            value: {};
                        };
                        revision: {
                            value: {};
                        };
                        platform: {
                            value: {};
                        };
                        architecture: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        contacted_at: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                };
                status: string;
                pending_approval_count: number;
                approvals: {
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    status: string;
                    created_at: string;
                    comment: string;
                };
                approval_summary: {
                    rules: {
                        id: {
                            value: {};
                        };
                        user_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        access_level: {
                            value: {};
                        };
                        access_level_description: {
                            value: {};
                        };
                        required_approvals: {
                            value: {};
                        };
                        group_inheritance_type: {
                            value: {};
                        };
                        deployment_approvals: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                deployment_id: string;
            };
            data: {
                status: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                ref: string;
                sha: string;
                created_at: string;
                upstringd_at: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                environment: {
                    id: number;
                    name: string;
                    slug: string;
                    external_url: string;
                    created_at: string;
                    upstringd_at: string;
                };
                deployable: {
                    id: number;
                    status: string;
                    stage: string;
                    name: string;
                    ref: string;
                    tag: boolean;
                    coverage: number;
                    allow_failure: boolean;
                    created_at: string;
                    started_at: string;
                    finished_at: string;
                    erased_at: string;
                    duration: number;
                    queued_duration: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        bio: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                        public_email: {
                            value: {};
                        };
                        skype: {
                            value: {};
                        };
                        linkedin: {
                            value: {};
                        };
                        twitter: {
                            value: {};
                        };
                        discord: {
                            value: {};
                        };
                        website_url: {
                            value: {};
                        };
                        organization: {
                            value: {};
                        };
                        job_title: {
                            value: {};
                        };
                        pronouns: {
                            value: {};
                        };
                        bot: {
                            value: {};
                        };
                        work_information: {
                            value: {};
                        };
                        followers: {
                            value: {};
                        };
                        following: {
                            value: {};
                        };
                        is_followed: {
                            value: {};
                        };
                        local_time: {
                            value: {};
                        };
                    };
                    commit: {
                        id: {
                            value: {};
                        };
                        short_id: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        parent_ids: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        message: {
                            value: {};
                        };
                        author_name: {
                            value: {};
                        };
                        author_email: {
                            value: {};
                        };
                        authored_string: {
                            value: {};
                        };
                        committer_name: {
                            value: {};
                        };
                        committer_email: {
                            value: {};
                        };
                        committed_string: {
                            value: {};
                        };
                        trailers: {
                            value: {};
                        };
                        extended_trailers: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    failure_reason: string;
                    web_url: string;
                    project: {
                        ci_job_token_scope_enabled: string;
                    };
                    artifacts_file: {
                        filename: {
                            value: {};
                        };
                        size: {
                            value: {};
                        };
                    };
                    artifacts: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    runner: {
                        id: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        active: {
                            value: {};
                        };
                        paused: {
                            value: {};
                        };
                        is_shared: {
                            value: {};
                        };
                        runner_type: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        online: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    runner_manager: {
                        id: {
                            value: {};
                        };
                        system_id: {
                            value: {};
                        };
                        version: {
                            value: {};
                        };
                        revision: {
                            value: {};
                        };
                        platform: {
                            value: {};
                        };
                        architecture: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        contacted_at: {
                            value: {};
                        };
                        ip_address: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                    };
                    artifacts_expire_at: string;
                    archived: boolean;
                    tag_list: [string, string];
                };
                status: string;
                pending_approval_count: number;
                approvals: {
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    status: string;
                    created_at: string;
                    comment: string;
                };
                approval_summary: {
                    rules: {
                        id: {
                            value: {};
                        };
                        user_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        access_level: {
                            value: {};
                        };
                        access_level_description: {
                            value: {};
                        };
                        required_approvals: {
                            value: {};
                        };
                        group_inheritance_type: {
                            value: {};
                        };
                        deployment_approvals: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                deployment_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 403;
        }>;
        merge_requests: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    deployment_id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                    author_id: string;
                    author_username: string;
                    assignee_id: string;
                    assignee_username: string;
                    reviewer_username: string;
                    labels: string;
                    milestone: string;
                    my_reaction_emoji: string;
                    reviewer_id: string;
                    state: string;
                    order_by: string;
                    sort: string;
                    with_labels_details: string;
                    with_merge_status_recheck: string;
                    created_after: string;
                    created_before: string;
                    updated_after: string;
                    updated_before: string;
                    view: string;
                    scope: string;
                    source_branch: string;
                    source_project_id: string;
                    target_branch: string;
                    search: string;
                    in: string;
                    wip: string;
                    "not[author_id]": string;
                    "not[author_username]": string;
                    "not[assignee_id]": string;
                    "not[assignee_username]": string;
                    "not[reviewer_username]": string;
                    "not[labels]": string;
                    "not[milestone]": string;
                    "not[my_reaction_emoji]": string;
                    "not[reviewer_id]": string;
                    deployed_before: string;
                    deployed_after: string;
                    environment: string;
                    approved: string;
                    merge_user_id: string;
                    merge_user_username: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    merged_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merge_user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merged_at: string;
                    closed_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    closed_at: string;
                    title_html: string;
                    description_html: string;
                    target_branch: string;
                    source_branch: string;
                    user_notes_count: string;
                    upvotes: string;
                    downvotes: string;
                    author: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    assignees: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    assignee: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    reviewers: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    source_project_id: string;
                    target_project_id: string;
                    labels: string;
                    draft: string;
                    imported: string;
                    imported_from: string;
                    work_in_progress: string;
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merge_when_pipeline_succeeds: string;
                    merge_status: string;
                    detailed_merge_status: string;
                    sha: string;
                    merge_commit_sha: string;
                    squash_commit_sha: string;
                    discussion_locked: string;
                    should_remove_source_branch: string;
                    force_remove_source_branch: string;
                    prepared_at: string;
                    allow_collaboration: string;
                    allow_maintainer_to_push: string;
                    reference: string;
                    references: {
                        short: {
                            value: {};
                        };
                        relative: {
                            value: {};
                        };
                        full: {
                            value: {};
                        };
                    };
                    web_url: string;
                    time_stats: {
                        time_estimate: {
                            value: {};
                        };
                        total_time_spent: {
                            value: {};
                        };
                        human_time_estimate: {
                            value: {};
                        };
                        human_total_time_spent: {
                            value: {};
                        };
                    };
                    squash: string;
                    squash_on_merge: string;
                    task_completion_status: string;
                    has_conflicts: string;
                    blocking_discussions_resolved: string;
                    approvals_before_merge: string;
                }, {
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    merged_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merge_user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merged_at: string;
                    closed_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    closed_at: string;
                    title_html: string;
                    description_html: string;
                    target_branch: string;
                    source_branch: string;
                    user_notes_count: string;
                    upvotes: string;
                    downvotes: string;
                    author: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    assignees: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    assignee: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    reviewers: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    source_project_id: string;
                    target_project_id: string;
                    labels: string;
                    draft: string;
                    imported: string;
                    imported_from: string;
                    work_in_progress: string;
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    merge_when_pipeline_succeeds: string;
                    merge_status: string;
                    detailed_merge_status: string;
                    sha: string;
                    merge_commit_sha: string;
                    squash_commit_sha: string;
                    discussion_locked: string;
                    should_remove_source_branch: string;
                    force_remove_source_branch: string;
                    prepared_at: string;
                    allow_collaboration: string;
                    allow_maintainer_to_push: string;
                    reference: string;
                    references: {
                        short: {
                            value: {};
                        };
                        relative: {
                            value: {};
                        };
                        full: {
                            value: {};
                        };
                    };
                    web_url: string;
                    time_stats: {
                        time_estimate: {
                            value: {};
                        };
                        total_time_spent: {
                            value: {};
                        };
                        human_time_estimate: {
                            value: {};
                        };
                        human_total_time_spent: {
                            value: {};
                        };
                    };
                    squash: string;
                    squash_on_merge: string;
                    task_completion_status: string;
                    has_conflicts: string;
                    blocking_discussions_resolved: string;
                    approvals_before_merge: string;
                }];
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        approval: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    deployment_id: string;
                };
                data: {
                    status: string;
                    comment: string;
                    represented_as: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    status: string;
                    created_at: string;
                    comment: string;
                };
            }>;
        };
    };
    merge_requests: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                author_id: string;
                author_username: string;
                assignee_id: string;
                assignee_username: string;
                reviewer_username: string;
                labels: string;
                milestone: string;
                my_reaction_emoji: string;
                reviewer_id: string;
                state: string;
                order_by: string;
                sort: string;
                with_labels_details: string;
                with_merge_status_recheck: string;
                created_after: string;
                created_before: string;
                updated_after: string;
                updated_before: string;
                view: string;
                scope: string;
                source_branch: string;
                source_project_id: string;
                target_branch: string;
                search: string;
                in: string;
                wip: string;
                "not[author_id]": string;
                "not[author_username]": string;
                "not[assignee_id]": string;
                "not[assignee_username]": string;
                "not[reviewer_username]": string;
                "not[labels]": string;
                "not[milestone]": string;
                "not[my_reaction_emoji]": string;
                "not[reviewer_id]": string;
                deployed_before: string;
                deployed_after: string;
                environment: string;
                approved: string;
                merge_user_id: string;
                merge_user_username: string;
                approver_ids: string;
                approved_by_ids: string;
                approved_by_usernames: string;
                page: string;
                per_page: string;
                iids: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                project_id: number;
                title: string;
                description: string;
                state: string;
                created_at: string;
                upstringd_at: string;
                merged_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merge_user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merged_at: string;
                closed_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                closed_at: string;
                title_html: string;
                description_html: string;
                target_branch: string;
                source_branch: string;
                user_notes_count: string;
                upvotes: string;
                downvotes: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignees: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignee: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                reviewers: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                source_project_id: string;
                target_project_id: string;
                labels: string;
                draft: string;
                imported: string;
                imported_from: string;
                work_in_progress: string;
                milestone: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                };
                merge_when_pipeline_succeeds: string;
                merge_status: string;
                detailed_merge_status: string;
                sha: string;
                merge_commit_sha: string;
                squash_commit_sha: string;
                discussion_locked: string;
                should_remove_source_branch: string;
                force_remove_source_branch: string;
                prepared_at: string;
                allow_collaboration: string;
                allow_maintainer_to_push: string;
                reference: string;
                references: {
                    short: string;
                    relative: string;
                    full: string;
                };
                web_url: string;
                time_stats: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
                squash: string;
                squash_on_merge: string;
                task_completion_status: string;
                has_conflicts: string;
                blocking_discussions_resolved: string;
                approvals_before_merge: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                title: string;
                source_branch: string;
                target_branch: string;
                target_project_id: number;
                assignee_id: number;
                assignee_ids: [number, number];
                reviewer_ids: [number, number];
                description: string;
                labels: [string, string];
                add_labels: [string, string];
                remove_labels: [string, string];
                milestone_id: number;
                remove_source_branch: boolean;
                allow_collaboration: boolean;
                allow_maintainer_to_push: boolean;
                squash: boolean;
                approvals_before_merge: number;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                iid: number;
                project_id: number;
                title: string;
                description: string;
                state: string;
                created_at: string;
                upstringd_at: string;
                merged_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merge_user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merged_at: string;
                closed_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                closed_at: string;
                title_html: string;
                description_html: string;
                target_branch: string;
                source_branch: string;
                user_notes_count: string;
                upvotes: string;
                downvotes: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignees: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignee: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                reviewers: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                source_project_id: string;
                target_project_id: string;
                labels: string;
                draft: string;
                imported: string;
                imported_from: string;
                work_in_progress: string;
                milestone: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                };
                merge_when_pipeline_succeeds: string;
                merge_status: string;
                detailed_merge_status: string;
                sha: string;
                merge_commit_sha: string;
                squash_commit_sha: string;
                discussion_locked: string;
                should_remove_source_branch: string;
                force_remove_source_branch: string;
                prepared_at: string;
                allow_collaboration: string;
                allow_maintainer_to_push: string;
                reference: string;
                references: {
                    short: string;
                    relative: string;
                    full: string;
                };
                web_url: string;
                time_stats: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
                squash: string;
                squash_on_merge: string;
                task_completion_status: string;
                has_conflicts: string;
                blocking_discussions_resolved: string;
                approvals_before_merge: string;
                subscribed: string;
                changes_count: string;
                latest_build_started_at: string;
                latest_build_finished_at: string;
                first_deployed_to_production_at: string;
                pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
                head_pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: {
                            value: {};
                        };
                        string: {
                            value: {};
                        };
                        label: {
                            value: {};
                        };
                        group: {
                            value: {};
                        };
                        tooltip: {
                            value: {};
                        };
                        has_details: {
                            value: {};
                        };
                        details_path: {
                            value: {};
                        };
                        illustration: {
                            value: {};
                        };
                        favicon: {
                            value: {};
                        };
                        action: {
                            value: {};
                        };
                    };
                };
                diff_refs: {
                    base_sha: string;
                    head_sha: string;
                    start_sha: string;
                };
                merge_error: string;
                rebase_in_progress: string;
                diverged_commits_count: string;
                first_contribution: string;
                user: {
                    can_merge: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        } | {
            code: 409;
        } | {
            code: 422;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                merge_request_iid: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 404;
        } | {
            code: 412;
        }>;
        getOne: ({ params, query }: {
            params: {
                id: string;
                merge_request_iid: string;
            };
            query?: {
                render_html: string;
                include_diverged_commits_count: string;
                include_rebase_in_progress: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                project_id: number;
                title: string;
                description: string;
                state: string;
                created_at: string;
                upstringd_at: string;
                merged_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merge_user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merged_at: string;
                closed_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                closed_at: string;
                title_html: string;
                description_html: string;
                target_branch: string;
                source_branch: string;
                user_notes_count: string;
                upvotes: string;
                downvotes: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignees: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignee: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                reviewers: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                source_project_id: string;
                target_project_id: string;
                labels: string;
                draft: string;
                imported: string;
                imported_from: string;
                work_in_progress: string;
                milestone: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                };
                merge_when_pipeline_succeeds: string;
                merge_status: string;
                detailed_merge_status: string;
                sha: string;
                merge_commit_sha: string;
                squash_commit_sha: string;
                discussion_locked: string;
                should_remove_source_branch: string;
                force_remove_source_branch: string;
                prepared_at: string;
                allow_collaboration: string;
                allow_maintainer_to_push: string;
                reference: string;
                references: {
                    short: string;
                    relative: string;
                    full: string;
                };
                web_url: string;
                time_stats: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
                squash: string;
                squash_on_merge: string;
                task_completion_status: string;
                has_conflicts: string;
                blocking_discussions_resolved: string;
                approvals_before_merge: string;
                subscribed: string;
                changes_count: string;
                latest_build_started_at: string;
                latest_build_finished_at: string;
                first_deployed_to_production_at: string;
                pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
                head_pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: {
                            value: {};
                        };
                        string: {
                            value: {};
                        };
                        label: {
                            value: {};
                        };
                        group: {
                            value: {};
                        };
                        tooltip: {
                            value: {};
                        };
                        has_details: {
                            value: {};
                        };
                        details_path: {
                            value: {};
                        };
                        illustration: {
                            value: {};
                        };
                        favicon: {
                            value: {};
                        };
                        action: {
                            value: {};
                        };
                    };
                };
                diff_refs: {
                    base_sha: string;
                    head_sha: string;
                    start_sha: string;
                };
                merge_error: string;
                rebase_in_progress: string;
                diverged_commits_count: string;
                first_contribution: string;
                user: {
                    can_merge: string;
                };
            };
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                merge_request_iid: string;
            };
            data: {
                title: string;
                target_branch: string;
                state_event: string;
                discussion_locked: boolean;
                assignee_id: number;
                assignee_ids: [number, number];
                reviewer_ids: [number, number];
                description: string;
                labels: [string, string];
                add_labels: [string, string];
                remove_labels: [string, string];
                milestone_id: number;
                remove_source_branch: boolean;
                allow_collaboration: boolean;
                allow_maintainer_to_push: boolean;
                squash: boolean;
                approvals_before_merge: number;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                project_id: number;
                title: string;
                description: string;
                state: string;
                created_at: string;
                upstringd_at: string;
                merged_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merge_user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                merged_at: string;
                closed_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                closed_at: string;
                title_html: string;
                description_html: string;
                target_branch: string;
                source_branch: string;
                user_notes_count: string;
                upvotes: string;
                downvotes: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignees: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                assignee: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                reviewers: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                source_project_id: string;
                target_project_id: string;
                labels: string;
                draft: string;
                imported: string;
                imported_from: string;
                work_in_progress: string;
                milestone: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                };
                merge_when_pipeline_succeeds: string;
                merge_status: string;
                detailed_merge_status: string;
                sha: string;
                merge_commit_sha: string;
                squash_commit_sha: string;
                discussion_locked: string;
                should_remove_source_branch: string;
                force_remove_source_branch: string;
                prepared_at: string;
                allow_collaboration: string;
                allow_maintainer_to_push: string;
                reference: string;
                references: {
                    short: string;
                    relative: string;
                    full: string;
                };
                web_url: string;
                time_stats: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
                squash: string;
                squash_on_merge: string;
                task_completion_status: string;
                has_conflicts: string;
                blocking_discussions_resolved: string;
                approvals_before_merge: string;
                subscribed: string;
                changes_count: string;
                latest_build_started_at: string;
                latest_build_finished_at: string;
                first_deployed_to_production_at: string;
                pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
                head_pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: {
                            value: {};
                        };
                        string: {
                            value: {};
                        };
                        label: {
                            value: {};
                        };
                        group: {
                            value: {};
                        };
                        tooltip: {
                            value: {};
                        };
                        has_details: {
                            value: {};
                        };
                        details_path: {
                            value: {};
                        };
                        illustration: {
                            value: {};
                        };
                        favicon: {
                            value: {};
                        };
                        action: {
                            value: {};
                        };
                    };
                };
                diff_refs: {
                    base_sha: string;
                    head_sha: string;
                    start_sha: string;
                };
                merge_error: string;
                rebase_in_progress: string;
                diverged_commits_count: string;
                first_contribution: string;
                user: {
                    can_merge: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 404;
        } | {
            code: 409;
        } | {
            code: 422;
        }>;
        draft_notes: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    author_id: number;
                    merge_request_id: number;
                    resolve_discussion: boolean;
                    discussion_id: number;
                    note: string;
                    commit_id: number;
                    line_code: string;
                    position: object;
                }, {
                    id: number;
                    author_id: number;
                    merge_request_id: number;
                    resolve_discussion: boolean;
                    discussion_id: number;
                    note: string;
                    commit_id: number;
                    line_code: string;
                    position: object;
                }];
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    note: string;
                    in_reply_to_discussion_id: string;
                    commit_id: string;
                    resolve_discussion: boolean;
                    position: {
                        base_sha: string;
                        start_sha: string;
                        head_sha: string;
                        position_type: string;
                        string_path: string;
                        string_line: number;
                        old_path: string;
                        old_line: number;
                        width: number;
                        height: number;
                        x: number;
                        y: number;
                        line_range: {
                            start: {
                                line_code: string;
                                type: string;
                                old_line: string;
                                string_line: string;
                            };
                            end: {
                                line_code: string;
                                type: string;
                                old_line: string;
                                string_line: string;
                            };
                        };
                    };
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    author_id: number;
                    merge_request_id: number;
                    resolve_discussion: boolean;
                    discussion_id: number;
                    note: string;
                    commit_id: number;
                    line_code: string;
                    position: object;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                    draft_note_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    author_id: number;
                    merge_request_id: number;
                    resolve_discussion: boolean;
                    discussion_id: number;
                    note: string;
                    commit_id: number;
                    line_code: string;
                    position: object;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            put: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                    draft_note_id: string;
                };
                data: {
                    note: string;
                    position: {
                        base_sha: string;
                        start_sha: string;
                        head_sha: string;
                        position_type: string;
                        string_path: string;
                        string_line: number;
                        old_path: string;
                        old_line: number;
                        width: number;
                        height: number;
                        x: number;
                        y: number;
                        line_range: {
                            start: {
                                line_code: string;
                                type: string;
                                old_line: string;
                                string_line: string;
                            };
                            end: {
                                line_code: string;
                                type: string;
                                old_line: string;
                                string_line: string;
                            };
                        };
                    };
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    author_id: number;
                    merge_request_id: number;
                    resolve_discussion: boolean;
                    discussion_id: number;
                    note: string;
                    commit_id: number;
                    line_code: string;
                    position: object;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                    draft_note_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
                data: {
                    id: number;
                    author_id: number;
                    merge_request_id: number;
                    resolve_discussion: boolean;
                    discussion_id: number;
                    note: string;
                    commit_id: number;
                    line_code: string;
                    position: object;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            publish: {
                put: ({ params }: {
                    params: {
                        id: string;
                        merge_request_iid: string;
                        draft_note_id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
            bulk_publish: {
                post: ({ params }: {
                    params: {
                        id: string;
                        merge_request_iid: string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
        };
        time_estimate: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    duration: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        reset_time_estimate: {
            post: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        add_spent_time: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    duration: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        reset_spent_time: {
            post: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        time_stats: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    time_estimate: number;
                    total_time_spent: number;
                    human_time_estimate: string;
                    human_total_time_spent: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        participants: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        key: string;
                        value: string;
                    }, {
                        key: string;
                        value: string;
                    }];
                    web_url: string;
                };
            } | {
                code: 404;
            }>;
        };
        reviewers: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    state: string;
                    created_at: string;
                };
            } | {
                code: 404;
            }>;
        };
        commits: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
            } | {
                code: 404;
            }>;
        };
        context_commits: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    commits: [string, string];
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            delete: ({ params, query }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                query?: {
                    commits: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        changes: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                query?: {
                    unidiff: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    merged_by: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    merge_user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    merged_at: string;
                    closed_by: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    closed_at: string;
                    title_html: string;
                    description_html: string;
                    target_branch: string;
                    source_branch: string;
                    user_notes_count: string;
                    upvotes: string;
                    downvotes: string;
                    author: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    assignees: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    assignee: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    reviewers: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    source_project_id: string;
                    target_project_id: string;
                    labels: string;
                    draft: string;
                    imported: string;
                    imported_from: string;
                    work_in_progress: string;
                    milestone: {
                        id: string;
                        iid: string;
                        project_id: string;
                        group_id: string;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        due_string: string;
                        start_string: string;
                        expired: string;
                        web_url: string;
                    };
                    merge_when_pipeline_succeeds: string;
                    merge_status: string;
                    detailed_merge_status: string;
                    sha: string;
                    merge_commit_sha: string;
                    squash_commit_sha: string;
                    discussion_locked: string;
                    should_remove_source_branch: string;
                    force_remove_source_branch: string;
                    prepared_at: string;
                    allow_collaboration: string;
                    allow_maintainer_to_push: string;
                    reference: string;
                    references: {
                        short: string;
                        relative: string;
                        full: string;
                    };
                    web_url: string;
                    time_stats: {
                        time_estimate: number;
                        total_time_spent: number;
                        human_time_estimate: string;
                        human_total_time_spent: string;
                    };
                    squash: string;
                    squash_on_merge: string;
                    task_completion_status: string;
                    has_conflicts: string;
                    blocking_discussions_resolved: string;
                    approvals_before_merge: string;
                    subscribed: string;
                    changes_count: string;
                    latest_build_started_at: string;
                    latest_build_finished_at: string;
                    first_deployed_to_production_at: string;
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    head_pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                        before_sha: string;
                        tag: boolean;
                        yaml_errors: string;
                        user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        started_at: string;
                        finished_at: string;
                        committed_at: string;
                        duration: number;
                        queued_duration: number;
                        coverage: number;
                        detailed_status: {
                            icon: {
                                value: {};
                            };
                            string: {
                                value: {};
                            };
                            label: {
                                value: {};
                            };
                            group: {
                                value: {};
                            };
                            tooltip: {
                                value: {};
                            };
                            has_details: {
                                value: {};
                            };
                            details_path: {
                                value: {};
                            };
                            illustration: {
                                value: {};
                            };
                            favicon: {
                                value: {};
                            };
                            action: {
                                value: {};
                            };
                        };
                    };
                    diff_refs: {
                        base_sha: string;
                        head_sha: string;
                        start_sha: string;
                    };
                    merge_error: string;
                    rebase_in_progress: string;
                    diverged_commits_count: string;
                    first_contribution: string;
                    user: {
                        can_merge: string;
                    };
                    changes: {
                        diff: string;
                        string_path: string;
                        old_path: string;
                        a_mode: string;
                        b_mode: string;
                        string_file: boolean;
                        renamed_file: boolean;
                        deleted_file: boolean;
                        generated_file: boolean;
                    };
                    overflow: string;
                };
            } | {
                code: 404;
            }>;
        };
        diffs: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                    unidiff: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    diff: string;
                    string_path: string;
                    old_path: string;
                    a_mode: string;
                    b_mode: string;
                    string_file: boolean;
                    renamed_file: boolean;
                    deleted_file: boolean;
                    generated_file: boolean;
                };
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        pipelines: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                };
            } | {
                code: 404;
            }>;
            post: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    before_sha: string;
                    tag: boolean;
                    yaml_errors: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    started_at: string;
                    finished_at: string;
                    committed_at: string;
                    duration: number;
                    queued_duration: number;
                    coverage: number;
                    detailed_status: {
                        icon: string;
                        string: string;
                        label: string;
                        group: string;
                        tooltip: string;
                        has_details: boolean;
                        details_path: string;
                        illustration: object;
                        favicon: string;
                        action: {
                            icon: string;
                            title: string;
                            path: string;
                            method: string;
                            button_title: string;
                            confirmation_message: string;
                        };
                    };
                };
            } | {
                code: 400;
            } | {
                code: 404;
            } | {
                code: 405;
            }>;
        };
        merge: {
            put: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    merge_commit_message: string;
                    squash_commit_message: string;
                    should_remove_source_branch: boolean;
                    merge_when_pipeline_succeeds: boolean;
                    sha: string;
                    squash: boolean;
                    skip_merge_train: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    merged_by: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    merge_user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    merged_at: string;
                    closed_by: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    closed_at: string;
                    title_html: string;
                    description_html: string;
                    target_branch: string;
                    source_branch: string;
                    user_notes_count: string;
                    upvotes: string;
                    downvotes: string;
                    author: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    assignees: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    assignee: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    reviewers: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    source_project_id: string;
                    target_project_id: string;
                    labels: string;
                    draft: string;
                    imported: string;
                    imported_from: string;
                    work_in_progress: string;
                    milestone: {
                        id: string;
                        iid: string;
                        project_id: string;
                        group_id: string;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        due_string: string;
                        start_string: string;
                        expired: string;
                        web_url: string;
                    };
                    merge_when_pipeline_succeeds: string;
                    merge_status: string;
                    detailed_merge_status: string;
                    sha: string;
                    merge_commit_sha: string;
                    squash_commit_sha: string;
                    discussion_locked: string;
                    should_remove_source_branch: string;
                    force_remove_source_branch: string;
                    prepared_at: string;
                    allow_collaboration: string;
                    allow_maintainer_to_push: string;
                    reference: string;
                    references: {
                        short: string;
                        relative: string;
                        full: string;
                    };
                    web_url: string;
                    time_stats: {
                        time_estimate: number;
                        total_time_spent: number;
                        human_time_estimate: string;
                        human_total_time_spent: string;
                    };
                    squash: string;
                    squash_on_merge: string;
                    task_completion_status: string;
                    has_conflicts: string;
                    blocking_discussions_resolved: string;
                    approvals_before_merge: string;
                    subscribed: string;
                    changes_count: string;
                    latest_build_started_at: string;
                    latest_build_finished_at: string;
                    first_deployed_to_production_at: string;
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    head_pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                        before_sha: string;
                        tag: boolean;
                        yaml_errors: string;
                        user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        started_at: string;
                        finished_at: string;
                        committed_at: string;
                        duration: number;
                        queued_duration: number;
                        coverage: number;
                        detailed_status: {
                            icon: {
                                value: {};
                            };
                            string: {
                                value: {};
                            };
                            label: {
                                value: {};
                            };
                            group: {
                                value: {};
                            };
                            tooltip: {
                                value: {};
                            };
                            has_details: {
                                value: {};
                            };
                            details_path: {
                                value: {};
                            };
                            illustration: {
                                value: {};
                            };
                            favicon: {
                                value: {};
                            };
                            action: {
                                value: {};
                            };
                        };
                    };
                    diff_refs: {
                        base_sha: string;
                        head_sha: string;
                        start_sha: string;
                    };
                    merge_error: string;
                    rebase_in_progress: string;
                    diverged_commits_count: string;
                    first_contribution: string;
                    user: {
                        can_merge: string;
                    };
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            } | {
                code: 405;
            } | {
                code: 409;
            } | {
                code: 422;
            }>;
        };
        merge_ref: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 400;
            }>;
        };
        cancel_merge_when_pipeline_succeeds: {
            post: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    merged_by: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    merge_user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    merged_at: string;
                    closed_by: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    closed_at: string;
                    title_html: string;
                    description_html: string;
                    target_branch: string;
                    source_branch: string;
                    user_notes_count: string;
                    upvotes: string;
                    downvotes: string;
                    author: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    assignees: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    assignee: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    reviewers: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    source_project_id: string;
                    target_project_id: string;
                    labels: string;
                    draft: string;
                    imported: string;
                    imported_from: string;
                    work_in_progress: string;
                    milestone: {
                        id: string;
                        iid: string;
                        project_id: string;
                        group_id: string;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        due_string: string;
                        start_string: string;
                        expired: string;
                        web_url: string;
                    };
                    merge_when_pipeline_succeeds: string;
                    merge_status: string;
                    detailed_merge_status: string;
                    sha: string;
                    merge_commit_sha: string;
                    squash_commit_sha: string;
                    discussion_locked: string;
                    should_remove_source_branch: string;
                    force_remove_source_branch: string;
                    prepared_at: string;
                    allow_collaboration: string;
                    allow_maintainer_to_push: string;
                    reference: string;
                    references: {
                        short: string;
                        relative: string;
                        full: string;
                    };
                    web_url: string;
                    time_stats: {
                        time_estimate: number;
                        total_time_spent: number;
                        human_time_estimate: string;
                        human_total_time_spent: string;
                    };
                    squash: string;
                    squash_on_merge: string;
                    task_completion_status: string;
                    has_conflicts: string;
                    blocking_discussions_resolved: string;
                    approvals_before_merge: string;
                    subscribed: string;
                    changes_count: string;
                    latest_build_started_at: string;
                    latest_build_finished_at: string;
                    first_deployed_to_production_at: string;
                    pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                    };
                    head_pipeline: {
                        id: number;
                        iid: number;
                        project_id: number;
                        sha: string;
                        ref: string;
                        status: string;
                        source: string;
                        created_at: string;
                        upstringd_at: string;
                        web_url: string;
                        before_sha: string;
                        tag: boolean;
                        yaml_errors: string;
                        user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        started_at: string;
                        finished_at: string;
                        committed_at: string;
                        duration: number;
                        queued_duration: number;
                        coverage: number;
                        detailed_status: {
                            icon: {
                                value: {};
                            };
                            string: {
                                value: {};
                            };
                            label: {
                                value: {};
                            };
                            group: {
                                value: {};
                            };
                            tooltip: {
                                value: {};
                            };
                            has_details: {
                                value: {};
                            };
                            details_path: {
                                value: {};
                            };
                            illustration: {
                                value: {};
                            };
                            favicon: {
                                value: {};
                            };
                            action: {
                                value: {};
                            };
                        };
                    };
                    diff_refs: {
                        base_sha: string;
                        head_sha: string;
                        start_sha: string;
                    };
                    merge_error: string;
                    rebase_in_progress: string;
                    diverged_commits_count: string;
                    first_contribution: string;
                    user: {
                        can_merge: string;
                    };
                };
            } | {
                code: 401;
            } | {
                code: 404;
            } | {
                code: 405;
            } | {
                code: 406;
            }>;
        };
        rebase: {
            put: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    skip_ci: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 409;
            }>;
        };
        closes_issues: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    note: string;
                    author: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                };
            } | {
                code: 404;
            }>;
        };
        versions: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: string;
                    head_commit_sha: string;
                    base_commit_sha: string;
                    start_commit_sha: string;
                    created_at: string;
                    merge_request_id: string;
                    state: string;
                    real_size: string;
                    patch_id_sha: string;
                }, {
                    id: string;
                    head_commit_sha: string;
                    base_commit_sha: string;
                    start_commit_sha: string;
                    created_at: string;
                    merge_request_id: string;
                    state: string;
                    real_size: string;
                    patch_id_sha: string;
                }];
            }>;
            getOne: ({ params, query }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                    version_id: string;
                };
                query?: {
                    unidiff: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: string;
                    head_commit_sha: string;
                    base_commit_sha: string;
                    start_commit_sha: string;
                    created_at: string;
                    merge_request_id: string;
                    state: string;
                    real_size: string;
                    patch_id_sha: string;
                    commits: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    diffs: {
                        diff: string;
                        string_path: string;
                        old_path: string;
                        a_mode: string;
                        b_mode: string;
                        string_file: boolean;
                        renamed_file: boolean;
                        deleted_file: boolean;
                        generated_file: boolean;
                    };
                };
            }>;
        };
        approvals: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    user_has_approved: boolean;
                    user_can_approve: boolean;
                    approved: boolean;
                    approved_by: {
                        user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                    };
                };
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    approvals_required: number;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    merge_status: string;
                    approved: boolean;
                    approvals_required: number;
                    approvals_left: number;
                    require_password_to_approve: boolean;
                    approved_by: [{
                        user: {
                            value: {};
                        };
                    }, {
                        user: {
                            value: {};
                        };
                    }];
                    suggested_approvers: [{
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    }, {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    }];
                    approvers: string;
                    approver_groups: string;
                    user_has_approved: boolean;
                    user_can_approve: boolean;
                    approval_rules_left: [{
                        id: number;
                        name: string;
                        rule_type: string;
                    }, {
                        id: number;
                        name: string;
                        rule_type: string;
                    }];
                    has_approval_rules: boolean;
                    merge_request_approvers_available: boolean;
                    multiple_approval_rules_available: boolean;
                    invalid_approvers_rules: [{
                        id: number;
                        name: string;
                        rule_type: string;
                    }, {
                        id: number;
                        name: string;
                        rule_type: string;
                    }];
                };
            }>;
        };
        approve: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
                data: {
                    sha: string;
                    approval_password: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    user_has_approved: boolean;
                    user_can_approve: boolean;
                    approved: boolean;
                    approved_by: {
                        user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                    };
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        unapprove: {
            post: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    user_has_approved: boolean;
                    user_can_approve: boolean;
                    approved: boolean;
                    approved_by: {
                        user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                    };
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        reset_approvals: {
            put: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        approval_state: {
            get: ({ params }: {
                params: {
                    id: string;
                    merge_request_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    approval_rules_overwritten: boolean;
                    rules: [{
                        id: number;
                        name: string;
                        rule_type: string;
                        eligible_approvers: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        approvals_required: number;
                        users: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        groups: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        contains_hidden_groups: boolean;
                        section: string;
                        source_rule: {
                            value: {};
                        };
                        overridden: boolean;
                        code_owner: boolean;
                        approved_by: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        approved: boolean;
                    }, {
                        id: number;
                        name: string;
                        rule_type: string;
                        eligible_approvers: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        approvals_required: number;
                        users: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        groups: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        contains_hidden_groups: boolean;
                        section: string;
                        source_rule: {
                            value: {};
                        };
                        overridden: boolean;
                        code_owner: boolean;
                        approved_by: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        approved: boolean;
                    }];
                };
            }>;
        };
        resource_milestone_events: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    eventable_id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    created_at: string;
                    resource_type: string;
                    resource_id: number;
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    action: string;
                    state: string;
                }, {
                    id: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    created_at: string;
                    resource_type: string;
                    resource_id: number;
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    action: string;
                    state: string;
                }];
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    event_id: string;
                    eventable_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    created_at: string;
                    resource_type: string;
                    resource_id: number;
                    milestone: {
                        id: string;
                        iid: string;
                        project_id: string;
                        group_id: string;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        due_string: string;
                        start_string: string;
                        expired: string;
                        web_url: string;
                    };
                    action: string;
                    state: string;
                };
            } | {
                code: 404;
            }>;
        };
    };
    environments: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                name: string;
                search: string;
                states: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                name: string;
                slug: string;
                external_url: string;
                created_at: string;
                upstringd_at: string;
                tier: string;
                project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    default_branch: {
                        value: {};
                    };
                    tag_list: {
                        value: {};
                    };
                    topics: {
                        value: {};
                    };
                    ssh_url_to_repo: {
                        value: {};
                    };
                    http_url_to_repo: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    readme_url: {
                        value: {};
                    };
                    forks_count: {
                        value: {};
                    };
                    license_url: {
                        value: {};
                    };
                    license: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    star_count: {
                        value: {};
                    };
                    last_activity_at: {
                        value: {};
                    };
                    namespace: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    repository_storage: {
                        value: {};
                    };
                };
                last_deployment: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                    environment: {
                        value: {};
                    };
                    deployable: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                };
                state: string;
                auto_stop_at: string;
            }, {
                id: number;
                name: string;
                slug: string;
                external_url: string;
                created_at: string;
                upstringd_at: string;
                tier: string;
                project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    default_branch: {
                        value: {};
                    };
                    tag_list: {
                        value: {};
                    };
                    topics: {
                        value: {};
                    };
                    ssh_url_to_repo: {
                        value: {};
                    };
                    http_url_to_repo: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    readme_url: {
                        value: {};
                    };
                    forks_count: {
                        value: {};
                    };
                    license_url: {
                        value: {};
                    };
                    license: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    star_count: {
                        value: {};
                    };
                    last_activity_at: {
                        value: {};
                    };
                    namespace: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    repository_storage: {
                        value: {};
                    };
                };
                last_deployment: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                    environment: {
                        value: {};
                    };
                    deployable: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                };
                state: string;
                auto_stop_at: string;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                external_url: string;
                tier: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                name: string;
                slug: string;
                external_url: string;
                created_at: string;
                upstringd_at: string;
                tier: string;
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                last_deployment: {
                    id: number;
                    iid: number;
                    ref: string;
                    sha: string;
                    created_at: string;
                    upstringd_at: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    environment: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        slug: {
                            value: {};
                        };
                        external_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                    };
                    deployable: {
                        id: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        stage: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        tag: {
                            value: {};
                        };
                        coverage: {
                            value: {};
                        };
                        allow_failure: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        started_at: {
                            value: {};
                        };
                        finished_at: {
                            value: {};
                        };
                        erased_at: {
                            value: {};
                        };
                        duration: {
                            value: {};
                        };
                        queued_duration: {
                            value: {};
                        };
                        user: {
                            value: {};
                        };
                        commit: {
                            value: {};
                        };
                        pipeline: {
                            value: {};
                        };
                        failure_reason: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        project: {
                            value: {};
                        };
                        artifacts_file: {
                            value: {};
                        };
                        artifacts: {
                            value: {};
                        };
                        runner: {
                            value: {};
                        };
                        runner_manager: {
                            value: {};
                        };
                        artifacts_expire_at: {
                            value: {};
                        };
                        archived: {
                            value: {};
                        };
                        tag_list: {
                            value: {};
                        };
                    };
                    status: string;
                };
                state: string;
                auto_stop_at: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                environment_id: string;
            };
            data: {
                external_url: string;
                tier: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                slug: string;
                external_url: string;
                created_at: string;
                upstringd_at: string;
                tier: string;
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                last_deployment: {
                    id: number;
                    iid: number;
                    ref: string;
                    sha: string;
                    created_at: string;
                    upstringd_at: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    environment: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        slug: {
                            value: {};
                        };
                        external_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                    };
                    deployable: {
                        id: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        stage: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        tag: {
                            value: {};
                        };
                        coverage: {
                            value: {};
                        };
                        allow_failure: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        started_at: {
                            value: {};
                        };
                        finished_at: {
                            value: {};
                        };
                        erased_at: {
                            value: {};
                        };
                        duration: {
                            value: {};
                        };
                        queued_duration: {
                            value: {};
                        };
                        user: {
                            value: {};
                        };
                        commit: {
                            value: {};
                        };
                        pipeline: {
                            value: {};
                        };
                        failure_reason: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        project: {
                            value: {};
                        };
                        artifacts_file: {
                            value: {};
                        };
                        artifacts: {
                            value: {};
                        };
                        runner: {
                            value: {};
                        };
                        runner_manager: {
                            value: {};
                        };
                        artifacts_expire_at: {
                            value: {};
                        };
                        archived: {
                            value: {};
                        };
                        tag_list: {
                            value: {};
                        };
                    };
                    status: string;
                };
                state: string;
                auto_stop_at: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                environment_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                id: number;
                name: string;
                slug: string;
                external_url: string;
                created_at: string;
                upstringd_at: string;
                tier: string;
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                last_deployment: {
                    id: number;
                    iid: number;
                    ref: string;
                    sha: string;
                    created_at: string;
                    upstringd_at: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    environment: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        slug: {
                            value: {};
                        };
                        external_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                    };
                    deployable: {
                        id: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        stage: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        tag: {
                            value: {};
                        };
                        coverage: {
                            value: {};
                        };
                        allow_failure: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        started_at: {
                            value: {};
                        };
                        finished_at: {
                            value: {};
                        };
                        erased_at: {
                            value: {};
                        };
                        duration: {
                            value: {};
                        };
                        queued_duration: {
                            value: {};
                        };
                        user: {
                            value: {};
                        };
                        commit: {
                            value: {};
                        };
                        pipeline: {
                            value: {};
                        };
                        failure_reason: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        project: {
                            value: {};
                        };
                        artifacts_file: {
                            value: {};
                        };
                        artifacts: {
                            value: {};
                        };
                        runner: {
                            value: {};
                        };
                        runner_manager: {
                            value: {};
                        };
                        artifacts_expire_at: {
                            value: {};
                        };
                        archived: {
                            value: {};
                        };
                        tag_list: {
                            value: {};
                        };
                    };
                    status: string;
                };
                state: string;
                auto_stop_at: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                environment_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                slug: string;
                external_url: string;
                created_at: string;
                upstringd_at: string;
                tier: string;
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                last_deployment: {
                    id: number;
                    iid: number;
                    ref: string;
                    sha: string;
                    created_at: string;
                    upstringd_at: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    environment: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        slug: {
                            value: {};
                        };
                        external_url: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                    };
                    deployable: {
                        id: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        stage: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        tag: {
                            value: {};
                        };
                        coverage: {
                            value: {};
                        };
                        allow_failure: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        started_at: {
                            value: {};
                        };
                        finished_at: {
                            value: {};
                        };
                        erased_at: {
                            value: {};
                        };
                        duration: {
                            value: {};
                        };
                        queued_duration: {
                            value: {};
                        };
                        user: {
                            value: {};
                        };
                        commit: {
                            value: {};
                        };
                        pipeline: {
                            value: {};
                        };
                        failure_reason: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        project: {
                            value: {};
                        };
                        artifacts_file: {
                            value: {};
                        };
                        artifacts: {
                            value: {};
                        };
                        runner: {
                            value: {};
                        };
                        runner_manager: {
                            value: {};
                        };
                        artifacts_expire_at: {
                            value: {};
                        };
                        archived: {
                            value: {};
                        };
                        tag_list: {
                            value: {};
                        };
                    };
                    status: string;
                };
                state: string;
                auto_stop_at: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        stop: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    environment_id: string;
                };
                data: {
                    force: false;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    name: string;
                    slug: string;
                    external_url: string;
                    created_at: string;
                    upstringd_at: string;
                    tier: string;
                    project: {
                        id: number;
                        description: string;
                        name: string;
                        name_with_namespace: string;
                        path: string;
                        path_with_namespace: string;
                        created_at: string;
                        default_branch: string;
                        tag_list: [string, string];
                        topics: [string, string];
                        ssh_url_to_repo: string;
                        http_url_to_repo: string;
                        web_url: string;
                        readme_url: string;
                        forks_count: number;
                        license_url: string;
                        license: {
                            key: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            nickname: {
                                value: {};
                            };
                            html_url: {
                                value: {};
                            };
                            source_url: {
                                value: {};
                            };
                        };
                        avatar_url: string;
                        star_count: number;
                        last_activity_at: string;
                        namespace: {
                            id: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            path: {
                                value: {};
                            };
                            kind: {
                                value: {};
                            };
                            full_path: {
                                value: {};
                            };
                            parent_id: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        custom_attributes: {
                            key: {
                                value: {};
                            };
                            value: {
                                value: {};
                            };
                        };
                        repository_storage: string;
                    };
                    last_deployment: {
                        id: number;
                        iid: number;
                        ref: string;
                        sha: string;
                        created_at: string;
                        upstringd_at: string;
                        user: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        environment: {
                            id: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            slug: {
                                value: {};
                            };
                            external_url: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                        };
                        deployable: {
                            id: {
                                value: {};
                            };
                            status: {
                                value: {};
                            };
                            stage: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            ref: {
                                value: {};
                            };
                            tag: {
                                value: {};
                            };
                            coverage: {
                                value: {};
                            };
                            allow_failure: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            started_at: {
                                value: {};
                            };
                            finished_at: {
                                value: {};
                            };
                            erased_at: {
                                value: {};
                            };
                            duration: {
                                value: {};
                            };
                            queued_duration: {
                                value: {};
                            };
                            user: {
                                value: {};
                            };
                            commit: {
                                value: {};
                            };
                            pipeline: {
                                value: {};
                            };
                            failure_reason: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                            project: {
                                value: {};
                            };
                            artifacts_file: {
                                value: {};
                            };
                            artifacts: {
                                value: {};
                            };
                            runner: {
                                value: {};
                            };
                            runner_manager: {
                                value: {};
                            };
                            artifacts_expire_at: {
                                value: {};
                            };
                            archived: {
                                value: {};
                            };
                            tag_list: {
                                value: {};
                            };
                        };
                        status: string;
                    };
                    state: string;
                    auto_stop_at: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        review_apps: {
            delete: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    limit: string;
                    dry_run: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
                data: {
                    id: number;
                    name: string;
                    slug: string;
                    external_url: string;
                    created_at: string;
                    upstringd_at: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            } | {
                code: 409;
            }>;
        };
        stop_stale: {
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    before: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 400;
            } | {
                code: 401;
            }>;
        };
    };
    error_tracking: {
        settings: {
            get: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    active: boolean;
                    project_name: string;
                    sentry_external_url: string;
                    api_url: string;
                    integrated: boolean;
                };
            }>;
            patch: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    active: boolean;
                    integrated: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    active: boolean;
                    project_name: string;
                    sentry_external_url: string;
                    api_url: string;
                    integrated: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    active: boolean;
                    integrated: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    active: boolean;
                    project_name: string;
                    sentry_external_url: string;
                    api_url: string;
                    integrated: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        client_keys: {
            get: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    active: boolean;
                    public_key: string;
                    sentry_dsn: string;
                }, {
                    id: number;
                    active: boolean;
                    public_key: string;
                    sentry_dsn: string;
                }];
            }>;
            post: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    active: boolean;
                    public_key: string;
                    sentry_dsn: string;
                };
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    key_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
                data: {
                    id: number;
                    active: boolean;
                    public_key: string;
                    sentry_dsn: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
    };
    freeze_periods: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
                created_at: string;
                upstringd_at: string;
            }, {
                id: number;
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
                created_at: string;
                upstringd_at: string;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
                created_at: string;
                upstringd_at: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                freeze_period_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
                created_at: string;
                upstringd_at: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                freeze_period_id: string;
            };
            data: {
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
                created_at: string;
                upstringd_at: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                freeze_period_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                id: number;
                freeze_start: string;
                freeze_end: string;
                cron_timezone: string;
                created_at: string;
                upstringd_at: string;
            };
        } | {
            code: 401;
        }>;
    };
    services: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                title: string;
                slug: number;
                created_at: string;
                upstringd_at: string;
                active: boolean;
                commit_events: boolean;
                push_events: boolean;
                issues_events: boolean;
                incident_events: boolean;
                alert_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                deployment_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                job_events: boolean;
                comment_on_event_enabled: boolean;
                vulnerability_events: boolean;
            }, {
                id: number;
                title: string;
                slug: number;
                created_at: string;
                upstringd_at: string;
                active: boolean;
                commit_events: boolean;
                push_events: boolean;
                issues_events: boolean;
                incident_events: boolean;
                alert_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                deployment_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                job_events: boolean;
                comment_on_event_enabled: boolean;
                vulnerability_events: boolean;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        "apple-app-store": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    app_store_issuer_id: string;
                    app_store_key_id: string;
                    app_store_private_key_file_name: string;
                    app_store_private_key: string;
                    app_store_protected_refs: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        asana: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_key: string;
                    restrict_to_branch: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        assembla: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    subdomain: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        bamboo: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    bamboo_url: string;
                    build_key: string;
                    username: string;
                    password: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        bugzilla: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        buildkite: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    project_url: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        campfire: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    subdomain: string;
                    room: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        confluence: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    confluence_url: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "custom-issue-tracker": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        datadog: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_key: string;
                    datadog_site: string;
                    api_url: string;
                    archive_trace_events: boolean;
                    datadog_service: string;
                    datadog_env: string;
                    datadog_tags: string;
                    pipeline_events: boolean;
                    build_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "diffblue-cover": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    diffblue_license_key: string;
                    diffblue_access_token_name: string;
                    diffblue_access_token_secret: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        discord: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "drone-ci": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    drone_url: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "emails-on-push": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    recipients: string;
                    disable_diffs: boolean;
                    send_from_committer_email: boolean;
                    branches_to_be_notified: string;
                    push_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "external-wiki": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    external_wiki_url: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "gitlab-slack-application": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    channel: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    labels_to_be_notified: string;
                    labels_to_be_notified_behavior: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                    alert_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "google-play": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    package_name: string;
                    service_account_key_file_name: string;
                    service_account_key: string;
                    google_play_protected_refs: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "hangouts-chat": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    branches_to_be_notified: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        harbor: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    project_name: string;
                    username: string;
                    password: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        irker: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    recipients: string;
                    default_irc_uri: string;
                    server_host: string;
                    server_port: number;
                    colorize_messages: boolean;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        jenkins: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    jenkins_url: string;
                    project_name: string;
                    enable_ssl_verification: boolean;
                    username: string;
                    password: string;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        jira: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    password: string;
                    api_url: string;
                    jira_auth_type: number;
                    username: string;
                    jira_issue_transition_automatic: boolean;
                    jira_issue_transition_id: string;
                    jira_issue_prefix: string;
                    jira_issue_regex: string;
                    issues_enabled: boolean;
                    project_keys: [string, string];
                    comment_on_event_enabled: boolean;
                    commit_events: boolean;
                    merge_requests_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "mattermost-slash-commands": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "slack-slash-commands": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        packagist: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    username: string;
                    token: string;
                    server: string;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        phorge: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "pipelines-email": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    recipients: string;
                    notify_only_broken_pipelines: boolean;
                    notify_only_default_branch: boolean;
                    branches_to_be_notified: string;
                    pipeline_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        pivotaltracker: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    restrict_to_branch: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        prometheus: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_url: string;
                    google_iap_audience_client_id: string;
                    google_iap_service_account_json: string;
                    manual_configuration: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        pumble: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        pushover: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_key: string;
                    user_key: string;
                    priority: string;
                    device: string;
                    sound: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        redmine: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        ewm: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        youtrack: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        clickup: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        slack: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    username: string;
                    channel: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    labels_to_be_notified: string;
                    labels_to_be_notified_behavior: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                    alert_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "microsoft-teams": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    branches_to_be_notified: string;
                    notify_only_broken_pipelines: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        mattermost: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    username: string;
                    channel: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    labels_to_be_notified: string;
                    labels_to_be_notified_behavior: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        teamcity: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    teamcity_url: string;
                    build_type: string;
                    username: string;
                    password: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                    merge_requests_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        telegram: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    room: string;
                    hostname: string;
                    thread: number;
                    branches_to_be_notified: string;
                    notify_only_broken_pipelines: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "unify-circuit": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "webex-teams": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        zentao: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    api_token: string;
                    zentao_product_xid: string;
                    api_url: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "squash-tm": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    token: string;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        github: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    repository_url: string;
                    static_constring: boolean;
                    pipeline_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "git-guardian": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "google-cloud-platform-artifact-registry": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    artifact_registry_project_id: string;
                    artifact_registry_repositories: string;
                    artifact_registry_location: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "google-cloud-platform-workload-identity-federation": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    workload_identity_federation_project_id: string;
                    workload_identity_federation_project_number: string;
                    workload_identity_pool_id: string;
                    workload_identity_pool_provider_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "mock-ci": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    mock_service_url: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "mock-monitoring": {
            put: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        delete: ({ params }: {
            params: {
                id: string;
                slug: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                slug: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                title: string;
                slug: number;
                created_at: string;
                upstringd_at: string;
                active: boolean;
                commit_events: boolean;
                push_events: boolean;
                issues_events: boolean;
                incident_events: boolean;
                alert_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                deployment_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                job_events: boolean;
                comment_on_event_enabled: boolean;
                vulnerability_events: boolean;
                properties: object;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        mattermost_slash_commands: {
            trigger: {
                post: ({ params, data }: {
                    params: {
                        id: string;
                    };
                    data: {
                        token: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
        };
        slack_slash_commands: {
            trigger: {
                post: ({ params, data }: {
                    params: {
                        id: string;
                    };
                    data: {
                        token: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
        };
    };
    integrations: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                title: string;
                slug: number;
                created_at: string;
                upstringd_at: string;
                active: boolean;
                commit_events: boolean;
                push_events: boolean;
                issues_events: boolean;
                incident_events: boolean;
                alert_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                deployment_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                job_events: boolean;
                comment_on_event_enabled: boolean;
                vulnerability_events: boolean;
            }, {
                id: number;
                title: string;
                slug: number;
                created_at: string;
                upstringd_at: string;
                active: boolean;
                commit_events: boolean;
                push_events: boolean;
                issues_events: boolean;
                incident_events: boolean;
                alert_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                deployment_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                job_events: boolean;
                comment_on_event_enabled: boolean;
                vulnerability_events: boolean;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        "apple-app-store": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    app_store_issuer_id: string;
                    app_store_key_id: string;
                    app_store_private_key_file_name: string;
                    app_store_private_key: string;
                    app_store_protected_refs: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        asana: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_key: string;
                    restrict_to_branch: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        assembla: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    subdomain: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        bamboo: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    bamboo_url: string;
                    build_key: string;
                    username: string;
                    password: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        bugzilla: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        buildkite: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    project_url: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        campfire: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    subdomain: string;
                    room: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        confluence: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    confluence_url: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "custom-issue-tracker": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        datadog: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_key: string;
                    datadog_site: string;
                    api_url: string;
                    archive_trace_events: boolean;
                    datadog_service: string;
                    datadog_env: string;
                    datadog_tags: string;
                    pipeline_events: boolean;
                    build_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "diffblue-cover": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    diffblue_license_key: string;
                    diffblue_access_token_name: string;
                    diffblue_access_token_secret: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        discord: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "drone-ci": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    drone_url: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "emails-on-push": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    recipients: string;
                    disable_diffs: boolean;
                    send_from_committer_email: boolean;
                    branches_to_be_notified: string;
                    push_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "external-wiki": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    external_wiki_url: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "gitlab-slack-application": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    channel: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    labels_to_be_notified: string;
                    labels_to_be_notified_behavior: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                    alert_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "google-play": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    package_name: string;
                    service_account_key_file_name: string;
                    service_account_key: string;
                    google_play_protected_refs: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "hangouts-chat": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    branches_to_be_notified: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        harbor: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    project_name: string;
                    username: string;
                    password: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        irker: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    recipients: string;
                    default_irc_uri: string;
                    server_host: string;
                    server_port: number;
                    colorize_messages: boolean;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        jenkins: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    jenkins_url: string;
                    project_name: string;
                    enable_ssl_verification: boolean;
                    username: string;
                    password: string;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        jira: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    password: string;
                    api_url: string;
                    jira_auth_type: number;
                    username: string;
                    jira_issue_transition_automatic: boolean;
                    jira_issue_transition_id: string;
                    jira_issue_prefix: string;
                    jira_issue_regex: string;
                    issues_enabled: boolean;
                    project_keys: [string, string];
                    comment_on_event_enabled: boolean;
                    commit_events: boolean;
                    merge_requests_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "mattermost-slash-commands": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "slack-slash-commands": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        packagist: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    username: string;
                    token: string;
                    server: string;
                    push_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        phorge: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "pipelines-email": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    recipients: string;
                    notify_only_broken_pipelines: boolean;
                    notify_only_default_branch: boolean;
                    branches_to_be_notified: string;
                    pipeline_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        pivotaltracker: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    restrict_to_branch: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        prometheus: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_url: string;
                    google_iap_audience_client_id: string;
                    google_iap_service_account_json: string;
                    manual_configuration: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        pumble: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        pushover: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    api_key: string;
                    user_key: string;
                    priority: string;
                    device: string;
                    sound: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        redmine: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        ewm: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    string_issue_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        youtrack: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        clickup: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    project_url: string;
                    issues_url: string;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        slack: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    username: string;
                    channel: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    labels_to_be_notified: string;
                    labels_to_be_notified_behavior: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                    alert_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "microsoft-teams": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    branches_to_be_notified: string;
                    notify_only_broken_pipelines: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        mattermost: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    username: string;
                    channel: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    labels_to_be_notified: string;
                    labels_to_be_notified_behavior: string;
                    push_channel: string;
                    issue_channel: string;
                    incident_channel: string;
                    alert_channel: string;
                    confidential_issue_channel: string;
                    merge_request_channel: string;
                    note_channel: string;
                    confidential_note_channel: string;
                    tag_push_channel: string;
                    deployment_channel: string;
                    pipeline_channel: string;
                    wiki_page_channel: string;
                    vulnerability_channel: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    deployment_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        teamcity: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    teamcity_url: string;
                    build_type: string;
                    username: string;
                    password: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                    merge_requests_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        telegram: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    room: string;
                    hostname: string;
                    thread: number;
                    branches_to_be_notified: string;
                    notify_only_broken_pipelines: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    incident_events: boolean;
                    vulnerability_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "unify-circuit": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "webex-teams": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    webhook: string;
                    notify_only_broken_pipelines: boolean;
                    branches_to_be_notified: string;
                    push_events: boolean;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    tag_push_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        zentao: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    api_token: string;
                    zentao_product_xid: string;
                    api_url: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "squash-tm": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    url: string;
                    token: string;
                    issues_events: boolean;
                    confidential_issues_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        github: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                    repository_url: string;
                    static_constring: boolean;
                    pipeline_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "git-guardian": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    token: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "google-cloud-platform-artifact-registry": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    artifact_registry_project_id: string;
                    artifact_registry_repositories: string;
                    artifact_registry_location: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "google-cloud-platform-workload-identity-federation": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    workload_identity_federation_project_id: string;
                    workload_identity_federation_project_number: string;
                    workload_identity_pool_id: string;
                    workload_identity_pool_provider_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "mock-ci": {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    mock_service_url: string;
                    enable_ssl_verification: boolean;
                    push_events: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        "mock-monitoring": {
            put: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    slug: number;
                    created_at: string;
                    upstringd_at: string;
                    active: boolean;
                    commit_events: boolean;
                    push_events: boolean;
                    issues_events: boolean;
                    incident_events: boolean;
                    alert_events: boolean;
                    confidential_issues_events: boolean;
                    merge_requests_events: boolean;
                    tag_push_events: boolean;
                    deployment_events: boolean;
                    note_events: boolean;
                    confidential_note_events: boolean;
                    pipeline_events: boolean;
                    wiki_page_events: boolean;
                    job_events: boolean;
                    comment_on_event_enabled: boolean;
                    vulnerability_events: boolean;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        delete: ({ params }: {
            params: {
                id: string;
                slug: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                slug: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                title: string;
                slug: number;
                created_at: string;
                upstringd_at: string;
                active: boolean;
                commit_events: boolean;
                push_events: boolean;
                issues_events: boolean;
                incident_events: boolean;
                alert_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                deployment_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                job_events: boolean;
                comment_on_event_enabled: boolean;
                vulnerability_events: boolean;
                properties: object;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        mattermost_slash_commands: {
            trigger: {
                post: ({ params, data }: {
                    params: {
                        id: string;
                    };
                    data: {
                        token: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
        };
        slack_slash_commands: {
            trigger: {
                post: ({ params, data }: {
                    params: {
                        id: string;
                    };
                    data: {
                        token: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
        };
    };
    invitations: {
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                access_level: number;
                email: [string, string];
                user_id: [string, string];
                expires_at: string;
                invite_source: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                access_level: string;
                created_at: string;
                expires_at: string;
                invite_email: string;
                invite_token: string;
                user_name: string;
                created_by_name: string;
            };
        }>;
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                query: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                access_level: string;
                created_at: string;
                expires_at: string;
                invite_email: string;
                invite_token: string;
                user_name: string;
                created_by_name: string;
            }, {
                access_level: string;
                created_at: string;
                expires_at: string;
                invite_email: string;
                invite_token: string;
                user_name: string;
                created_by_name: string;
            }];
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                email: string;
            };
            data: {
                access_level: number;
                expires_at: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                access_level: string;
                created_at: string;
                expires_at: string;
                invite_email: string;
                invite_token: string;
                user_name: string;
                created_by_name: string;
            };
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                email: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 409;
        }>;
    };
    issues: {
        links: {
            get: ({ params }: {
                params: {
                    id: string;
                    issue_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    closed_at: string;
                    closed_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    labels: [string, string];
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    assignees: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    author: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    type: string;
                    assignee: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    user_notes_count: string;
                    merge_requests_count: string;
                    upvotes: string;
                    downvotes: string;
                    due_string: string;
                    confidential: boolean;
                    discussion_locked: boolean;
                    issue_type: string;
                    web_url: string;
                    time_stats: {
                        time_estimate: {
                            value: {};
                        };
                        total_time_spent: {
                            value: {};
                        };
                        human_time_estimate: {
                            value: {};
                        };
                        human_total_time_spent: {
                            value: {};
                        };
                    };
                    task_completion_status: string;
                    weight: string;
                    blocking_issues_count: string;
                    has_tasks: string;
                    task_status: string;
                    _links: {
                        self: string;
                        notes: string;
                        award_emoji: string;
                        project: string;
                        closed_as_duplicate_of: string;
                    };
                    references: {
                        short: {
                            value: {};
                        };
                        relative: {
                            value: {};
                        };
                        full: {
                            value: {};
                        };
                    };
                    severity: string;
                    subscribed: string;
                    moved_to_id: string;
                    imported: string;
                    imported_from: string;
                    service_desk_reply_to: string;
                    epic_iid: string;
                    epic: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        url: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        human_readable_end_string: {
                            value: {};
                        };
                        human_readable_timestamp: {
                            value: {};
                        };
                    };
                    iteration: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        sequence: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    health_status: string;
                    issue_link_id: string;
                    link_type: string;
                    link_created_at: string;
                    link_upstringd_at: string;
                }, {
                    id: number;
                    iid: number;
                    project_id: number;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    closed_at: string;
                    closed_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    labels: [string, string];
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    assignees: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    author: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    type: string;
                    assignee: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    user_notes_count: string;
                    merge_requests_count: string;
                    upvotes: string;
                    downvotes: string;
                    due_string: string;
                    confidential: boolean;
                    discussion_locked: boolean;
                    issue_type: string;
                    web_url: string;
                    time_stats: {
                        time_estimate: {
                            value: {};
                        };
                        total_time_spent: {
                            value: {};
                        };
                        human_time_estimate: {
                            value: {};
                        };
                        human_total_time_spent: {
                            value: {};
                        };
                    };
                    task_completion_status: string;
                    weight: string;
                    blocking_issues_count: string;
                    has_tasks: string;
                    task_status: string;
                    _links: {
                        self: string;
                        notes: string;
                        award_emoji: string;
                        project: string;
                        closed_as_duplicate_of: string;
                    };
                    references: {
                        short: {
                            value: {};
                        };
                        relative: {
                            value: {};
                        };
                        full: {
                            value: {};
                        };
                    };
                    severity: string;
                    subscribed: string;
                    moved_to_id: string;
                    imported: string;
                    imported_from: string;
                    service_desk_reply_to: string;
                    epic_iid: string;
                    epic: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        url: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        human_readable_end_string: {
                            value: {};
                        };
                        human_readable_timestamp: {
                            value: {};
                        };
                    };
                    iteration: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        sequence: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    health_status: string;
                    issue_link_id: string;
                    link_type: string;
                    link_created_at: string;
                    link_upstringd_at: string;
                }];
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                    issue_iid: string;
                };
                data: {
                    target_project_id: string;
                    target_issue_iid: string;
                    link_type: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    source_issue: {
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        closed_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        labels: [string, string];
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        type: string;
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        user_notes_count: string;
                        merge_requests_count: string;
                        upvotes: string;
                        downvotes: string;
                        due_string: string;
                        confidential: boolean;
                        discussion_locked: boolean;
                        issue_type: string;
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        task_completion_status: string;
                        weight: string;
                        blocking_issues_count: string;
                    };
                    target_issue: {
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        closed_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        labels: [string, string];
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        type: string;
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        user_notes_count: string;
                        merge_requests_count: string;
                        upvotes: string;
                        downvotes: string;
                        due_string: string;
                        confidential: boolean;
                        discussion_locked: boolean;
                        issue_type: string;
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        task_completion_status: string;
                        weight: string;
                        blocking_issues_count: string;
                    };
                    link_type: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    issue_iid: string;
                    issue_link_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    source_issue: {
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        closed_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        labels: [string, string];
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        type: string;
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        user_notes_count: string;
                        merge_requests_count: string;
                        upvotes: string;
                        downvotes: string;
                        due_string: string;
                        confidential: boolean;
                        discussion_locked: boolean;
                        issue_type: string;
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        task_completion_status: string;
                        weight: string;
                        blocking_issues_count: string;
                    };
                    target_issue: {
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        closed_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        labels: [string, string];
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        type: string;
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        user_notes_count: string;
                        merge_requests_count: string;
                        upvotes: string;
                        downvotes: string;
                        due_string: string;
                        confidential: boolean;
                        discussion_locked: boolean;
                        issue_type: string;
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        task_completion_status: string;
                        weight: string;
                        blocking_issues_count: string;
                    };
                    link_type: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    issue_iid: string;
                    issue_link_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
                data: {
                    source_issue: {
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        closed_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        labels: [string, string];
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        type: string;
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        user_notes_count: string;
                        merge_requests_count: string;
                        upvotes: string;
                        downvotes: string;
                        due_string: string;
                        confidential: boolean;
                        discussion_locked: boolean;
                        issue_type: string;
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        task_completion_status: string;
                        weight: string;
                        blocking_issues_count: string;
                    };
                    target_issue: {
                        id: number;
                        iid: number;
                        project_id: number;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        closed_at: string;
                        closed_by: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        labels: [string, string];
                        milestone: {
                            id: {
                                value: {};
                            };
                            iid: {
                                value: {};
                            };
                            project_id: {
                                value: {};
                            };
                            group_id: {
                                value: {};
                            };
                            title: {
                                value: {};
                            };
                            description: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            created_at: {
                                value: {};
                            };
                            upstringd_at: {
                                value: {};
                            };
                            due_string: {
                                value: {};
                            };
                            start_string: {
                                value: {};
                            };
                            expired: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        assignees: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        author: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        type: string;
                        assignee: {
                            id: {
                                value: {};
                            };
                            username: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            state: {
                                value: {};
                            };
                            locked: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            avatar_path: {
                                value: {};
                            };
                            custom_attributes: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        user_notes_count: string;
                        merge_requests_count: string;
                        upvotes: string;
                        downvotes: string;
                        due_string: string;
                        confidential: boolean;
                        discussion_locked: boolean;
                        issue_type: string;
                        web_url: string;
                        time_stats: {
                            time_estimate: {
                                value: {};
                            };
                            total_time_spent: {
                                value: {};
                            };
                            human_time_estimate: {
                                value: {};
                            };
                            human_total_time_spent: {
                                value: {};
                            };
                        };
                        task_completion_status: string;
                        weight: string;
                        blocking_issues_count: string;
                    };
                    link_type: string;
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        resource_milestone_events: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    eventable_id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    created_at: string;
                    resource_type: string;
                    resource_id: number;
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    action: string;
                    state: string;
                }, {
                    id: number;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    created_at: string;
                    resource_type: string;
                    resource_id: number;
                    milestone: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        title: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        due_string: {
                            value: {};
                        };
                        start_string: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    action: string;
                    state: string;
                }];
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    event_id: string;
                    eventable_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    created_at: string;
                    resource_type: string;
                    resource_id: number;
                    milestone: {
                        id: string;
                        iid: string;
                        project_id: string;
                        group_id: string;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        due_string: string;
                        start_string: string;
                        expired: string;
                        web_url: string;
                    };
                    action: string;
                    state: string;
                };
            } | {
                code: 404;
            }>;
        };
    };
    ci: {
        lint: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    sha: string;
                    content_ref: string;
                    dry_run: string;
                    include_jobs: string;
                    ref: string;
                    dry_run_ref: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    valid: boolean;
                    errors: [string, string];
                    warnings: [string, string];
                    merged_yaml: string;
                    includes: [object, object];
                    jobs: [object, object];
                };
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    content: string;
                    dry_run: false;
                    include_jobs: boolean;
                    ref: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    valid: boolean;
                    errors: [string, string];
                    warnings: [string, string];
                    merged_yaml: string;
                    includes: [object, object];
                    jobs: [object, object];
                };
            }>;
        };
    };
    packages: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                order_by: string;
                sort: string;
                package_type: string;
                package_name: string;
                package_version: string;
                include_versionless: string;
                status: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                name: string;
                conan_package_name: string;
                version: string;
                package_type: string;
                status: string;
                _links: {
                    web_path: string;
                    delete_api_path: string;
                };
                created_at: string;
                last_downloaded_at: string;
                project_id: number;
                project_path: string;
                tags: string;
                pipeline: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    source: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                };
                pipelines: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    source: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                };
                versions: {
                    id: {
                        value: {};
                    };
                    version: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    tags: {
                        value: {};
                    };
                    pipeline: {
                        value: {};
                    };
                };
            }, {
                id: number;
                name: string;
                conan_package_name: string;
                version: string;
                package_type: string;
                status: string;
                _links: {
                    web_path: string;
                    delete_api_path: string;
                };
                created_at: string;
                last_downloaded_at: string;
                project_id: number;
                project_path: string;
                tags: string;
                pipeline: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    source: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                };
                pipelines: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    sha: {
                        value: {};
                    };
                    ref: {
                        value: {};
                    };
                    status: {
                        value: {};
                    };
                    source: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    user: {
                        value: {};
                    };
                };
                versions: {
                    id: {
                        value: {};
                    };
                    version: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    tags: {
                        value: {};
                    };
                    pipeline: {
                        value: {};
                    };
                };
            }];
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        maven: {
            getOne: ({ params, query }: {
                params: {
                    id: string;
                    file_name: string;
                };
                query?: {
                    path: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 302;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            put: ({ params, data }: {
                params: {
                    id: string;
                    file_name: string;
                };
                data: {
                    path: string;
                    file: ArrayBuffer;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 422;
            }>;
            authorize: {
                put: ({ params, data }: {
                    params: {
                        id: string;
                        file_name: string;
                    };
                    data: {
                        path: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 400;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        getOne: ({ params }: {
            params: {
                id: string;
                package_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                conan_package_name: string;
                version: string;
                package_type: string;
                status: string;
                _links: {
                    web_path: string;
                    delete_api_path: string;
                };
                created_at: string;
                last_downloaded_at: string;
                project_id: number;
                project_path: string;
                tags: string;
                pipeline: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                };
                pipelines: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    user: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                };
                versions: {
                    id: string;
                    version: string;
                    created_at: string;
                    tags: string;
                    pipeline: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        user: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                package_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        package_files: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    package_id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    package_id: number;
                    created_at: string;
                    file_name: string;
                    size: number;
                    file_md5: string;
                    file_sha1: string;
                    file_sha256: string;
                    pipelines: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        user: {
                            value: {};
                        };
                    };
                }, {
                    id: number;
                    package_id: number;
                    created_at: string;
                    file_name: string;
                    size: number;
                    file_md5: string;
                    file_sha1: string;
                    file_sha256: string;
                    pipelines: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        project_id: {
                            value: {};
                        };
                        sha: {
                            value: {};
                        };
                        ref: {
                            value: {};
                        };
                        status: {
                            value: {};
                        };
                        source: {
                            value: {};
                        };
                        created_at: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                        user: {
                            value: {};
                        };
                    };
                }];
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    package_id: string;
                    package_file_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        pipelines: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    package_id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                    cursor: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    iid: number;
                    project_id: number;
                    sha: string;
                    ref: string;
                    status: string;
                    source: string;
                    created_at: string;
                    upstringd_at: string;
                    web_url: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        composer: {
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    branch: string;
                    tag: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            archives: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        sha: string;
                        package_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        conan: {
            v1: {
                ping: {
                    get: ({ params }: {
                        params: {
                            id: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 404;
                    }>;
                };
                conans: {
                    search: {
                        get: ({ params, query }: {
                            params: {
                                id: string;
                            };
                            query?: {
                                q: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 404;
                        }>;
                    };
                    getOne: ({ params }: {
                        params: {
                            id: string;
                            package_name: string;
                            package_version: string;
                            package_username: string;
                            package_channel: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                        data: {
                            recipe_snapshot: object;
                        };
                    } | {
                        code: 400;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                    delete: ({ params }: {
                        params: {
                            id: string;
                            package_name: string;
                            package_version: string;
                            package_username: string;
                            package_channel: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 204;
                    } | {
                        code: 400;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                    packages: {
                        getOne: ({ params }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                                conan_package_reference: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                            data: {
                                package_snapshot: object;
                            };
                        } | {
                            code: 400;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        digest: {
                            get: ({ params }: {
                                params: {
                                    id: string;
                                    package_name: string;
                                    package_version: string;
                                    package_username: string;
                                    package_channel: string;
                                    conan_package_reference: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                                data: {
                                    package_urls: object;
                                };
                            } | {
                                code: 400;
                            } | {
                                code: 403;
                            } | {
                                code: 404;
                            }>;
                        };
                        download_urls: {
                            get: ({ params }: {
                                params: {
                                    id: string;
                                    package_name: string;
                                    package_version: string;
                                    package_username: string;
                                    package_channel: string;
                                    conan_package_reference: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                                data: {
                                    package_urls: object;
                                };
                            } | {
                                code: 400;
                            } | {
                                code: 403;
                            } | {
                                code: 404;
                            }>;
                        };
                        upload_urls: {
                            post: ({ params }: {
                                params: {
                                    id: string;
                                    package_name: string;
                                    package_version: string;
                                    package_username: string;
                                    package_channel: string;
                                    conan_package_reference: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                                data: {
                                    upload_urls: object;
                                };
                            } | {
                                code: 400;
                            } | {
                                code: 403;
                            } | {
                                code: 404;
                            }>;
                        };
                    };
                    digest: {
                        get: ({ params }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                            data: {
                                recipe_urls: object;
                            };
                        } | {
                            code: 400;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                    download_urls: {
                        get: ({ params }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                            data: {
                                recipe_urls: object;
                            };
                        } | {
                            code: 400;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                    upload_urls: {
                        post: ({ params }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                            data: {
                                upload_urls: object;
                            };
                        } | {
                            code: 400;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                };
                users: {
                    authenticate: {
                        get: ({ params }: {
                            params: {
                                id: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 401;
                        } | {
                            code: 404;
                        }>;
                    };
                    check_credentials: {
                        get: ({ params }: {
                            params: {
                                id: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 401;
                        } | {
                            code: 404;
                        }>;
                    };
                };
                files: {
                    export: {
                        getOne: ({ params }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                                recipe_revision: string;
                                file_name: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 400;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        put: ({ params, data }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                                recipe_revision: string;
                                file_name: string;
                            };
                            data: {
                                file: ArrayBuffer;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        authorize: {
                            put: ({ params }: {
                                params: {
                                    id: string;
                                    package_name: string;
                                    package_version: string;
                                    package_username: string;
                                    package_channel: string;
                                    recipe_revision: string;
                                    file_name: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                            } | {
                                code: 400;
                            } | {
                                code: 401;
                            } | {
                                code: 403;
                            } | {
                                code: 404;
                            }>;
                        };
                    };
                    package: {
                        getOne: ({ params }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                                recipe_revision: string;
                                conan_package_reference: string;
                                package_revision: string;
                                file_name: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        put: ({ params, data }: {
                            params: {
                                id: string;
                                package_name: string;
                                package_version: string;
                                package_username: string;
                                package_channel: string;
                                recipe_revision: string;
                                conan_package_reference: string;
                                package_revision: string;
                                file_name: string;
                            };
                            data: {
                                file: ArrayBuffer;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        authorize: {
                            put: ({ params }: {
                                params: {
                                    id: string;
                                    package_name: string;
                                    package_version: string;
                                    package_username: string;
                                    package_channel: string;
                                    recipe_revision: string;
                                    conan_package_reference: string;
                                    package_revision: string;
                                    file_name: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                            } | {
                                code: 400;
                            } | {
                                code: 401;
                            } | {
                                code: 403;
                            } | {
                                code: 404;
                            }>;
                        };
                    };
                };
            };
        };
        debian: {
            dists: {
                "Release.gpg": {
                    get: ({ params, query }: {
                        params: {
                            id: string;
                        };
                        query?: {
                            distribution: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 400;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
                Release: {
                    get: ({ params, query }: {
                        params: {
                            id: string;
                        };
                        query?: {
                            distribution: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 400;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
                InRelease: {
                    get: ({ params, query }: {
                        params: {
                            id: string;
                        };
                        query?: {
                            distribution: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 400;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
                "debian-installer": {
                    Packages: {
                        get: ({ params, query }: {
                            params: {
                                id: string;
                                component: string;
                            };
                            query?: {
                                distribution: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 202;
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                    "by-hash": {
                        SHA256: {
                            getOne: ({ params, query }: {
                                params: {
                                    id: string;
                                    component: string;
                                    file_sha256: string;
                                };
                                query?: {
                                    distribution: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                            } | {
                                code: 202;
                            } | {
                                code: 400;
                            } | {
                                code: 401;
                            } | {
                                code: 403;
                            } | {
                                code: 404;
                            }>;
                        };
                    };
                };
                source: {
                    Sources: {
                        get: ({ params, query }: {
                            params: {
                                id: string;
                                component: string;
                            };
                            query?: {
                                distribution: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 202;
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                    "by-hash": {
                        SHA256: {
                            getOne: ({ params, query }: {
                                params: {
                                    id: string;
                                    component: string;
                                    file_sha256: string;
                                };
                                query?: {
                                    distribution: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                            } | {
                                code: 202;
                            } | {
                                code: 400;
                            } | {
                                code: 401;
                            } | {
                                code: 403;
                            } | {
                                code: 404;
                            }>;
                        };
                    };
                };
                Packages: {
                    get: ({ params, query }: {
                        params: {
                            id: string;
                            component: string;
                        };
                        query?: {
                            distribution: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 202;
                    } | {
                        code: 400;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
                "by-hash": {
                    SHA256: {
                        getOne: ({ params, query }: {
                            params: {
                                id: string;
                                component: string;
                                file_sha256: string;
                            };
                            query?: {
                                distribution: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 202;
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                };
            };
            pool: {
                getOne: ({ params }: {
                    params: {
                        id: string;
                        distribution: string;
                        letter: string;
                        package_name: string;
                        package_version: string;
                        file_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            put: ({ params, data }: {
                params: {
                    id: string;
                    file_name: string;
                };
                data: {
                    file: ArrayBuffer;
                    component: string;
                    distribution: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            authorize: {
                put: ({ params, data }: {
                    params: {
                        id: string;
                        file_name: string;
                    };
                    data: {
                        component: string;
                        distribution: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 400;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        generic: {
            put: ({ params, data }: {
                params: {
                    id: string;
                    package_name: string;
                };
                data: {
                    package_version: string;
                    file: ArrayBuffer;
                    path: string;
                    status: string;
                    select: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 201;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            get: ({ params, query }: {
                params: {
                    id: string;
                    package_name: string;
                };
                query?: {
                    package_version: string;
                    path: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            authorize: {
                put: ({ params, data }: {
                    params: {
                        id: string;
                        package_name: string;
                    };
                    data: {
                        package_version: string;
                        path: number;
                        status: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        go: {
            "@v": {
                list: {
                    get: ({ params, query }: {
                        params: {
                            id: string;
                        };
                        query?: {
                            module_name: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    }>;
                };
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        module_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                }>;
            };
        };
        helm: {
            "index.yaml": {
                get: ({ params }: {
                    params: {
                        id: string;
                        channel: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                }>;
            };
            charts: {
                get: ({ params }: {
                    params: {
                        id: string;
                        channel: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            api: {
                charts: {
                    post: ({ params, data }: {
                        params: {
                            id: string;
                            channel: string;
                        };
                        data: {
                            chart: ArrayBuffer;
                        };
                    }, options?: {}) => Promise<{
                        code: 201;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                    authorize: {
                        post: ({ params }: {
                            params: {
                                id: string;
                                channel: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                };
            };
        };
        ml_models: {
            files: {
                put: ({ params, data }: {
                    params: {
                        id: string;
                        model_version_id: string;
                    };
                    data: {
                        file: ArrayBuffer;
                        path: string;
                        status: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                get: ({ params, query }: {
                    params: {
                        id: string;
                        model_version_id: string;
                    };
                    query?: {
                        path: string;
                        status: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                authorize: {
                    put: ({ params, data }: {
                        params: {
                            id: string;
                            model_version_id: string;
                        };
                        data: {
                            path: string;
                            status: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
            };
        };
        npm: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    package_name: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    name: string;
                    versions: object;
                    "dist-tags": object;
                };
            } | {
                code: 302;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            "-": {
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        package_name: string;
                        file_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                npm: {
                    v1: {
                        security: {
                            advisories: {
                                bulk: {
                                    post: ({ params }: {
                                        params: {
                                            id: string;
                                        };
                                    }, options?: {}) => Promise<{
                                        code: 200;
                                    } | {
                                        code: 307;
                                    } | {
                                        code: 401;
                                    } | {
                                        code: 403;
                                    } | {
                                        code: 404;
                                    }>;
                                };
                            };
                            audits: {
                                quick: {
                                    post: ({ params }: {
                                        params: {
                                            id: string;
                                        };
                                    }, options?: {}) => Promise<{
                                        code: 200;
                                    } | {
                                        code: 307;
                                    } | {
                                        code: 401;
                                    } | {
                                        code: 403;
                                    } | {
                                        code: 404;
                                    }>;
                                };
                            };
                        };
                    };
                };
                package: {
                    "dist-tags": {
                        get: ({ params, query }: {
                            params: {
                                id: string;
                            };
                            query?: {
                                package_name: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                            data: {
                                dist_tags: object;
                            };
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        put: ({ params, data }: {
                            params: {
                                id: string;
                                tag: string;
                            };
                            data: {
                                package_name: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 204;
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        delete: ({ params, query }: {
                            params: {
                                id: string;
                                tag: string;
                            };
                            query?: {
                                package_name: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 204;
                        } | {
                            code: 400;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                };
            };
            put: ({ params, data }: {
                params: {
                    id: string;
                    package_name: string;
                };
                data: {
                    versions: object;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        nuget: {
            put: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    package: ArrayBuffer;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            index: {
                get: ({ params }: {
                    params: {
                        id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        version: string;
                        resources: [object, object];
                    };
                } | {
                    code: 404;
                }>;
            };
            authorize: {
                put: ({ params }: {
                    params: {
                        id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            symbolpackage: {
                put: ({ params, data }: {
                    params: {
                        id: string;
                    };
                    data: {
                        package: ArrayBuffer;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 400;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                authorize: {
                    put: ({ params }: {
                        params: {
                            id: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
            };
            delete: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    package_name: string;
                    package_version: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            symbolfiles: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        file_name: string;
                        signature: string;
                        same_file_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 400;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            v2: {
                get: ({ params }: {
                    params: {
                        id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 404;
                }>;
                put: ({ params, data }: {
                    params: {
                        id: string;
                    };
                    data: {
                        package: ArrayBuffer;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 400;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                $metadata: {
                    get: ({ params }: {
                        params: {
                            id: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    }>;
                };
                authorize: {
                    put: ({ params }: {
                        params: {
                            id: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
            };
            metadata: {
                index: {
                    get: ({ params, query }: {
                        params: {
                            id: string;
                        };
                        query?: {
                            package_name: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                        data: {
                            count: number;
                            items: [{
                                "@id": string;
                                lower: string;
                                upper: string;
                                count: number;
                                items: [{
                                    value: {};
                                }, {
                                    value: {};
                                }];
                            }, {
                                "@id": string;
                                lower: string;
                                upper: string;
                                count: number;
                                items: [{
                                    value: {};
                                }, {
                                    value: {};
                                }];
                            }];
                        };
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        package_name: string;
                        package_version: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        "@id": string;
                        packageContent: string;
                        catalogEntry: {
                            "@id": string;
                            dependencyGroups: [{
                                value: {};
                            }, {
                                value: {};
                            }];
                            id: string;
                            version: string;
                            tags: string;
                            packageContent: string;
                            authors: string;
                            description: string;
                            summary: string;
                            projectUrl: string;
                            licenseUrl: string;
                            iconUrl: string;
                            published: string;
                        };
                    };
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            query: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        q: string;
                        skip: string;
                        take: string;
                        prerelease: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        totalHits: number;
                        data: [{
                            "@type": string;
                            id: string;
                            title: string;
                            totalDownloads: number;
                            verified: boolean;
                            version: string;
                            versions: {
                                value: {};
                            };
                            tags: string;
                            authors: string;
                            description: string;
                            summary: string;
                            projectUrl: string;
                            licenseUrl: string;
                            iconUrl: string;
                        }, {
                            "@type": string;
                            id: string;
                            title: string;
                            totalDownloads: number;
                            verified: boolean;
                            version: string;
                            versions: {
                                value: {};
                            };
                            tags: string;
                            authors: string;
                            description: string;
                            summary: string;
                            projectUrl: string;
                            licenseUrl: string;
                            iconUrl: string;
                        }];
                    };
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            download: {
                index: {
                    get: ({ params, query }: {
                        params: {
                            id: string;
                        };
                        query?: {
                            package_name: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                        data: {
                            versions: [string, string];
                        };
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                };
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        package_name: string;
                        package_version: string;
                        package_filename: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        pypi: {
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    content: ArrayBuffer;
                    name: string;
                    version: string;
                    requires_python: string;
                    md5_digest: string;
                    sha256_digest: string;
                    metadata_version: string;
                    author_email: string;
                    description: string;
                    description_content_type: string;
                    summary: string;
                    keywords: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 422;
            }>;
            files: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        sha256: string;
                    };
                    query?: {
                        file_identifier: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            simple: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        package_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            authorize: {
                post: ({ params }: {
                    params: {
                        id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        rpm: {
            post: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            repodata: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        file_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    package_file_id: string;
                    file_name: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            authorize: {
                post: ({ params }: {
                    params: {
                        id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
        rubygems: {
            getOne: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            quick: {
                "Marshal.4.8": {
                    getOne: ({ params }: {
                        params: {
                            id: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 200;
                    } | {
                        code: 401;
                    } | {
                        code: 404;
                    }>;
                };
            };
            gems: {
                getOne: ({ params }: {
                    params: {
                        id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
            api: {
                v1: {
                    gems: {
                        post: ({ params, data }: {
                            params: {
                                id: string;
                            };
                            data: {
                                file: ArrayBuffer;
                            };
                        }, options?: {}) => Promise<{
                            code: 201;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                        authorize: {
                            post: ({ params }: {
                                params: {
                                    id: string;
                                };
                            }, options?: {}) => Promise<{
                                code: 200;
                            } | {
                                code: 401;
                            } | {
                                code: 403;
                            }>;
                        };
                    };
                    dependencies: {
                        get: ({ params, query }: {
                            params: {
                                id: string;
                            };
                            query?: {
                                gems: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 401;
                        } | {
                            code: 403;
                        } | {
                            code: 404;
                        }>;
                    };
                };
            };
        };
        terraform: {
            modules: {
                getOne: ({ params, query }: {
                    params: {
                        id: string;
                        module_name: string;
                        module_system: string;
                    };
                    query?: {
                        "terraform-get": string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                get: ({ params, query }: {
                    params: {
                        id: string;
                        module_name: string;
                        module_system: string;
                    };
                    query?: {
                        module_version: string;
                        "terraform-get": string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                } | {
                    code: 401;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                file: {
                    put: ({ params, data }: {
                        params: {
                            id: string;
                            module_name: string;
                            module_system: string;
                        };
                        data: {
                            module_version: string;
                        };
                    }, options?: {}) => Promise<{
                        code: 201;
                    } | {
                        code: 400;
                    } | {
                        code: 401;
                    } | {
                        code: 403;
                    } | {
                        code: 404;
                    }>;
                    authorize: {
                        put: ({ params, data }: {
                            params: {
                                id: string;
                                module_name: string;
                                module_system: string;
                            };
                            data: {
                                module_version: string;
                            };
                        }, options?: {}) => Promise<{
                            code: 200;
                        } | {
                            code: 403;
                        }>;
                    };
                };
            };
        };
    };
    members: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                query: string;
                user_ids: string;
                skip_users: string;
                show_seat_info: string;
                with_saml_identity: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
                access_level: string;
                created_at: string;
                created_by: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                expires_at: string;
                group_saml_identity: {
                    provider: {
                        value: {};
                    };
                    extern_uid: {
                        value: {};
                    };
                    saml_provider_id: {
                        value: {};
                    };
                };
                email: string;
                is_using_seat: string;
                override: string;
                membership_state: string;
                member_role: {
                    id: {
                        value: {};
                    };
                    group_id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    base_access_level: {
                        value: {};
                    };
                    admin_cicd_variables: {
                        value: {};
                    };
                    admin_compliance_framework: {
                        value: {};
                    };
                    admin_group_member: {
                        value: {};
                    };
                    admin_merge_request: {
                        value: {};
                    };
                    admin_push_rules: {
                        value: {};
                    };
                    admin_terraform_state: {
                        value: {};
                    };
                    admin_vulnerability: {
                        value: {};
                    };
                    admin_web_hook: {
                        value: {};
                    };
                    archive_project: {
                        value: {};
                    };
                    manage_deploy_tokens: {
                        value: {};
                    };
                    manage_group_access_tokens: {
                        value: {};
                    };
                    manage_merge_request_settings: {
                        value: {};
                    };
                    manage_project_access_tokens: {
                        value: {};
                    };
                    manage_security_policy_link: {
                        value: {};
                    };
                    read_code: {
                        value: {};
                    };
                    read_dependency: {
                        value: {};
                    };
                    read_vulnerability: {
                        value: {};
                    };
                    remove_group: {
                        value: {};
                    };
                    remove_project: {
                        value: {};
                    };
                };
            }, {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
                access_level: string;
                created_at: string;
                created_by: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                expires_at: string;
                group_saml_identity: {
                    provider: {
                        value: {};
                    };
                    extern_uid: {
                        value: {};
                    };
                    saml_provider_id: {
                        value: {};
                    };
                };
                email: string;
                is_using_seat: string;
                override: string;
                membership_state: string;
                member_role: {
                    id: {
                        value: {};
                    };
                    group_id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    base_access_level: {
                        value: {};
                    };
                    admin_cicd_variables: {
                        value: {};
                    };
                    admin_compliance_framework: {
                        value: {};
                    };
                    admin_group_member: {
                        value: {};
                    };
                    admin_merge_request: {
                        value: {};
                    };
                    admin_push_rules: {
                        value: {};
                    };
                    admin_terraform_state: {
                        value: {};
                    };
                    admin_vulnerability: {
                        value: {};
                    };
                    admin_web_hook: {
                        value: {};
                    };
                    archive_project: {
                        value: {};
                    };
                    manage_deploy_tokens: {
                        value: {};
                    };
                    manage_group_access_tokens: {
                        value: {};
                    };
                    manage_merge_request_settings: {
                        value: {};
                    };
                    manage_project_access_tokens: {
                        value: {};
                    };
                    manage_security_policy_link: {
                        value: {};
                    };
                    read_code: {
                        value: {};
                    };
                    read_dependency: {
                        value: {};
                    };
                    read_vulnerability: {
                        value: {};
                    };
                    remove_group: {
                        value: {};
                    };
                    remove_project: {
                        value: {};
                    };
                };
            }];
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                access_level: number;
                user_id: number;
                username: string;
                expires_at: string;
                invite_source: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    key: string;
                    value: string;
                }, {
                    key: string;
                    value: string;
                }];
                web_url: string;
                access_level: string;
                created_at: string;
                created_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                expires_at: string;
                group_saml_identity: {
                    provider: string;
                    extern_uid: string;
                    saml_provider_id: string;
                };
                email: string;
                is_using_seat: string;
                override: string;
                membership_state: string;
                member_role: {
                    id: number;
                    group_id: number;
                    name: string;
                    description: string;
                    base_access_level: number;
                    admin_cicd_variables: boolean;
                    admin_compliance_framework: boolean;
                    admin_group_member: boolean;
                    admin_merge_request: boolean;
                    admin_push_rules: boolean;
                    admin_terraform_state: boolean;
                    admin_vulnerability: boolean;
                    admin_web_hook: boolean;
                    archive_project: boolean;
                    manage_deploy_tokens: boolean;
                    manage_group_access_tokens: boolean;
                    manage_merge_request_settings: boolean;
                    manage_project_access_tokens: boolean;
                    manage_security_policy_link: boolean;
                    read_code: boolean;
                    read_dependency: boolean;
                    read_vulnerability: boolean;
                    remove_group: boolean;
                    remove_project: boolean;
                };
            };
        }>;
        all: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    query: string;
                    user_ids: string;
                    show_seat_info: string;
                    state: string;
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                    access_level: string;
                    created_at: string;
                    created_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    expires_at: string;
                    group_saml_identity: {
                        provider: {
                            value: {};
                        };
                        extern_uid: {
                            value: {};
                        };
                        saml_provider_id: {
                            value: {};
                        };
                    };
                    email: string;
                    is_using_seat: string;
                    override: string;
                    membership_state: string;
                    member_role: {
                        id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        base_access_level: {
                            value: {};
                        };
                        admin_cicd_variables: {
                            value: {};
                        };
                        admin_compliance_framework: {
                            value: {};
                        };
                        admin_group_member: {
                            value: {};
                        };
                        admin_merge_request: {
                            value: {};
                        };
                        admin_push_rules: {
                            value: {};
                        };
                        admin_terraform_state: {
                            value: {};
                        };
                        admin_vulnerability: {
                            value: {};
                        };
                        admin_web_hook: {
                            value: {};
                        };
                        archive_project: {
                            value: {};
                        };
                        manage_deploy_tokens: {
                            value: {};
                        };
                        manage_group_access_tokens: {
                            value: {};
                        };
                        manage_merge_request_settings: {
                            value: {};
                        };
                        manage_project_access_tokens: {
                            value: {};
                        };
                        manage_security_policy_link: {
                            value: {};
                        };
                        read_code: {
                            value: {};
                        };
                        read_dependency: {
                            value: {};
                        };
                        read_vulnerability: {
                            value: {};
                        };
                        remove_group: {
                            value: {};
                        };
                        remove_project: {
                            value: {};
                        };
                    };
                }, {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                    access_level: string;
                    created_at: string;
                    created_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    expires_at: string;
                    group_saml_identity: {
                        provider: {
                            value: {};
                        };
                        extern_uid: {
                            value: {};
                        };
                        saml_provider_id: {
                            value: {};
                        };
                    };
                    email: string;
                    is_using_seat: string;
                    override: string;
                    membership_state: string;
                    member_role: {
                        id: {
                            value: {};
                        };
                        group_id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        description: {
                            value: {};
                        };
                        base_access_level: {
                            value: {};
                        };
                        admin_cicd_variables: {
                            value: {};
                        };
                        admin_compliance_framework: {
                            value: {};
                        };
                        admin_group_member: {
                            value: {};
                        };
                        admin_merge_request: {
                            value: {};
                        };
                        admin_push_rules: {
                            value: {};
                        };
                        admin_terraform_state: {
                            value: {};
                        };
                        admin_vulnerability: {
                            value: {};
                        };
                        admin_web_hook: {
                            value: {};
                        };
                        archive_project: {
                            value: {};
                        };
                        manage_deploy_tokens: {
                            value: {};
                        };
                        manage_group_access_tokens: {
                            value: {};
                        };
                        manage_merge_request_settings: {
                            value: {};
                        };
                        manage_project_access_tokens: {
                            value: {};
                        };
                        manage_security_policy_link: {
                            value: {};
                        };
                        read_code: {
                            value: {};
                        };
                        read_dependency: {
                            value: {};
                        };
                        read_vulnerability: {
                            value: {};
                        };
                        remove_group: {
                            value: {};
                        };
                        remove_project: {
                            value: {};
                        };
                    };
                }];
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    user_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        key: string;
                        value: string;
                    }, {
                        key: string;
                        value: string;
                    }];
                    web_url: string;
                    access_level: string;
                    created_at: string;
                    created_by: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    expires_at: string;
                    group_saml_identity: {
                        provider: string;
                        extern_uid: string;
                        saml_provider_id: string;
                    };
                    email: string;
                    is_using_seat: string;
                    override: string;
                    membership_state: string;
                    member_role: {
                        id: number;
                        group_id: number;
                        name: string;
                        description: string;
                        base_access_level: number;
                        admin_cicd_variables: boolean;
                        admin_compliance_framework: boolean;
                        admin_group_member: boolean;
                        admin_merge_request: boolean;
                        admin_push_rules: boolean;
                        admin_terraform_state: boolean;
                        admin_vulnerability: boolean;
                        admin_web_hook: boolean;
                        archive_project: boolean;
                        manage_deploy_tokens: boolean;
                        manage_group_access_tokens: boolean;
                        manage_merge_request_settings: boolean;
                        manage_project_access_tokens: boolean;
                        manage_security_policy_link: boolean;
                        read_code: boolean;
                        read_dependency: boolean;
                        read_vulnerability: boolean;
                        remove_group: boolean;
                        remove_project: boolean;
                    };
                };
            }>;
        };
        getOne: ({ params }: {
            params: {
                id: string;
                user_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    key: string;
                    value: string;
                }, {
                    key: string;
                    value: string;
                }];
                web_url: string;
                access_level: string;
                created_at: string;
                created_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                expires_at: string;
                group_saml_identity: {
                    provider: string;
                    extern_uid: string;
                    saml_provider_id: string;
                };
                email: string;
                is_using_seat: string;
                override: string;
                membership_state: string;
                member_role: {
                    id: number;
                    group_id: number;
                    name: string;
                    description: string;
                    base_access_level: number;
                    admin_cicd_variables: boolean;
                    admin_compliance_framework: boolean;
                    admin_group_member: boolean;
                    admin_merge_request: boolean;
                    admin_push_rules: boolean;
                    admin_terraform_state: boolean;
                    admin_vulnerability: boolean;
                    admin_web_hook: boolean;
                    archive_project: boolean;
                    manage_deploy_tokens: boolean;
                    manage_group_access_tokens: boolean;
                    manage_merge_request_settings: boolean;
                    manage_project_access_tokens: boolean;
                    manage_security_policy_link: boolean;
                    read_code: boolean;
                    read_dependency: boolean;
                    read_vulnerability: boolean;
                    remove_group: boolean;
                    remove_project: boolean;
                };
            };
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                user_id: string;
            };
            data: {
                access_level: number;
                expires_at: string;
                member_role_id: number;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    key: string;
                    value: string;
                }, {
                    key: string;
                    value: string;
                }];
                web_url: string;
                access_level: string;
                created_at: string;
                created_by: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                expires_at: string;
                group_saml_identity: {
                    provider: string;
                    extern_uid: string;
                    saml_provider_id: string;
                };
                email: string;
                is_using_seat: string;
                override: string;
                membership_state: string;
                member_role: {
                    id: number;
                    group_id: number;
                    name: string;
                    description: string;
                    base_access_level: number;
                    admin_cicd_variables: boolean;
                    admin_compliance_framework: boolean;
                    admin_group_member: boolean;
                    admin_merge_request: boolean;
                    admin_push_rules: boolean;
                    admin_terraform_state: boolean;
                    admin_vulnerability: boolean;
                    admin_web_hook: boolean;
                    archive_project: boolean;
                    manage_deploy_tokens: boolean;
                    manage_group_access_tokens: boolean;
                    manage_merge_request_settings: boolean;
                    manage_project_access_tokens: boolean;
                    manage_security_policy_link: boolean;
                    read_code: boolean;
                    read_dependency: boolean;
                    read_vulnerability: boolean;
                    remove_group: boolean;
                    remove_project: boolean;
                };
            };
        }>;
        delete: ({ params, query }: {
            params: {
                id: string;
                user_id: string;
            };
            query?: {
                skip_subresources: string;
                unassign_issuables: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        }>;
    };
    create_ci_config: {
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
        }>;
    };
    pages: {
        delete: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        patch: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                pages_unique_domain_enabled: boolean;
                pages_https_only: boolean;
            };
        }, options?: {}) => Promise<{
            code: 200;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        domains: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    domain: string;
                    url: string;
                    verified: string;
                    verification_code: string;
                    enabled_until: string;
                    auto_ssl_enabled: string;
                    certificate: {
                        subject: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        certificate: {
                            value: {};
                        };
                        certificate_string: {
                            value: {};
                        };
                    };
                }, {
                    domain: string;
                    url: string;
                    verified: string;
                    verification_code: string;
                    enabled_until: string;
                    auto_ssl_enabled: string;
                    certificate: {
                        subject: {
                            value: {};
                        };
                        expired: {
                            value: {};
                        };
                        certificate: {
                            value: {};
                        };
                        certificate_string: {
                            value: {};
                        };
                    };
                }];
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    domain: string;
                    certificate: ArrayBuffer;
                    key: ArrayBuffer;
                    auto_ssl_enabled: false;
                    user_provided_certificate: string;
                    user_provided_key: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    domain: string;
                    url: string;
                    verified: string;
                    verification_code: string;
                    enabled_until: string;
                    auto_ssl_enabled: string;
                    certificate: {
                        subject: string;
                        expired: string;
                        certificate: string;
                        certificate_string: string;
                    };
                };
            }>;
            getOne: ({ params }: {
                params: {
                    id: string;
                    domain: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    domain: string;
                    url: string;
                    verified: string;
                    verification_code: string;
                    enabled_until: string;
                    auto_ssl_enabled: string;
                    certificate: {
                        subject: string;
                        expired: string;
                        certificate: string;
                        certificate_string: string;
                    };
                };
            }>;
            put: ({ params, data }: {
                params: {
                    id: string;
                    domain: string;
                };
                data: {
                    certificate: ArrayBuffer;
                    key: ArrayBuffer;
                    auto_ssl_enabled: boolean;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    domain: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            }>;
        };
    };
    avatar: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
        }>;
    };
    clusters: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: string;
                name: string;
                created_at: string;
                domain: string;
                enabled: string;
                managed: string;
                provider_type: string;
                platform_type: string;
                environment_scope: string;
                cluster_type: string;
                namespace_per_environment: string;
                user: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                platform_kubernetes: {
                    api_url: {
                        value: {};
                    };
                    namespace: {
                        value: {};
                    };
                    authorization_type: {
                        value: {};
                    };
                    ca_cert: {
                        value: {};
                    };
                };
                provider_gcp: {
                    cluster_id: {
                        value: {};
                    };
                    status_name: {
                        value: {};
                    };
                    gcp_project_id: {
                        value: {};
                    };
                    zone: {
                        value: {};
                    };
                    machine_type: {
                        value: {};
                    };
                    num_nodes: {
                        value: {};
                    };
                    endpoint: {
                        value: {};
                    };
                };
                management_project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
            }, {
                id: string;
                name: string;
                created_at: string;
                domain: string;
                enabled: string;
                managed: string;
                provider_type: string;
                platform_type: string;
                environment_scope: string;
                cluster_type: string;
                namespace_per_environment: string;
                user: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                platform_kubernetes: {
                    api_url: {
                        value: {};
                    };
                    namespace: {
                        value: {};
                    };
                    authorization_type: {
                        value: {};
                    };
                    ca_cert: {
                        value: {};
                    };
                };
                provider_gcp: {
                    cluster_id: {
                        value: {};
                    };
                    status_name: {
                        value: {};
                    };
                    gcp_project_id: {
                        value: {};
                    };
                    zone: {
                        value: {};
                    };
                    machine_type: {
                        value: {};
                    };
                    num_nodes: {
                        value: {};
                    };
                    endpoint: {
                        value: {};
                    };
                };
                management_project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
            }];
        } | {
            code: 403;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                cluster_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                name: string;
                created_at: string;
                domain: string;
                enabled: string;
                managed: string;
                provider_type: string;
                platform_type: string;
                environment_scope: string;
                cluster_type: string;
                namespace_per_environment: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                platform_kubernetes: {
                    api_url: string;
                    namespace: string;
                    authorization_type: string;
                    ca_cert: string;
                };
                provider_gcp: {
                    cluster_id: string;
                    status_name: string;
                    gcp_project_id: string;
                    zone: string;
                    machine_type: string;
                    num_nodes: string;
                    endpoint: string;
                };
                management_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
            };
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                cluster_id: string;
            };
            data: {
                name: string;
                domain: string;
                environment_scope: string;
                namespace_per_environment: true;
                management_project_id: number;
                enabled: boolean;
                managed: boolean;
                platform_kubernetes_attributes: {
                    api_url: string;
                    token: string;
                    ca_cert: string;
                    namespace: string;
                };
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                name: string;
                created_at: string;
                domain: string;
                enabled: string;
                managed: string;
                provider_type: string;
                platform_type: string;
                environment_scope: string;
                cluster_type: string;
                namespace_per_environment: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                platform_kubernetes: {
                    api_url: string;
                    namespace: string;
                    authorization_type: string;
                    ca_cert: string;
                };
                provider_gcp: {
                    cluster_id: string;
                    status_name: string;
                    gcp_project_id: string;
                    zone: string;
                    machine_type: string;
                    num_nodes: string;
                    endpoint: string;
                };
                management_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                cluster_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                id: string;
                name: string;
                created_at: string;
                domain: string;
                enabled: string;
                managed: string;
                provider_type: string;
                platform_type: string;
                environment_scope: string;
                cluster_type: string;
                namespace_per_environment: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                platform_kubernetes: {
                    api_url: string;
                    namespace: string;
                    authorization_type: string;
                    ca_cert: string;
                };
                provider_gcp: {
                    cluster_id: string;
                    status_name: string;
                    gcp_project_id: string;
                    zone: string;
                    machine_type: string;
                    num_nodes: string;
                    endpoint: string;
                };
                management_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
            };
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        user: {
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    name: string;
                    platform_kubernetes_attributes: {
                        api_url: string;
                        token: string;
                        ca_cert: string;
                        namespace: string;
                        authorization_type: string;
                    };
                    enabled: true;
                    domain: string;
                    environment_scope: string;
                    namespace_per_environment: true;
                    management_project_id: number;
                    managed: true;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: string;
                    name: string;
                    created_at: string;
                    domain: string;
                    enabled: string;
                    managed: string;
                    provider_type: string;
                    platform_type: string;
                    environment_scope: string;
                    cluster_type: string;
                    namespace_per_environment: string;
                    user: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    platform_kubernetes: {
                        api_url: string;
                        namespace: string;
                        authorization_type: string;
                        ca_cert: string;
                    };
                    provider_gcp: {
                        cluster_id: string;
                        status_name: string;
                        gcp_project_id: string;
                        zone: string;
                        machine_type: string;
                        num_nodes: string;
                        endpoint: string;
                    };
                    management_project: {
                        id: number;
                        description: string;
                        name: string;
                        name_with_namespace: string;
                        path: string;
                        path_with_namespace: string;
                        created_at: string;
                    };
                    project: {
                        id: number;
                        description: string;
                        name: string;
                        name_with_namespace: string;
                        path: string;
                        path_with_namespace: string;
                        created_at: string;
                        default_branch: string;
                        tag_list: [string, string];
                        topics: [string, string];
                        ssh_url_to_repo: string;
                        http_url_to_repo: string;
                        web_url: string;
                        readme_url: string;
                        forks_count: number;
                        license_url: string;
                        license: {
                            key: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            nickname: {
                                value: {};
                            };
                            html_url: {
                                value: {};
                            };
                            source_url: {
                                value: {};
                            };
                        };
                        avatar_url: string;
                        star_count: number;
                        last_activity_at: string;
                        namespace: {
                            id: {
                                value: {};
                            };
                            name: {
                                value: {};
                            };
                            path: {
                                value: {};
                            };
                            kind: {
                                value: {};
                            };
                            full_path: {
                                value: {};
                            };
                            parent_id: {
                                value: {};
                            };
                            avatar_url: {
                                value: {};
                            };
                            web_url: {
                                value: {};
                            };
                        };
                        custom_attributes: {
                            key: {
                                value: {};
                            };
                            value: {
                                value: {};
                            };
                        };
                        repository_storage: string;
                    };
                };
            } | {
                code: 400;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    registry: {
        repositories: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                    tags: string;
                    tags_count: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    name: string;
                    path: string;
                    project_id: number;
                    location: string;
                    created_at: string;
                    cleanup_policy_started_at: string;
                    tags_count: number;
                    tags: {
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                    };
                    delete_api_path: string;
                    size: number;
                    status: string;
                }, {
                    id: number;
                    name: string;
                    path: string;
                    project_id: number;
                    location: string;
                    created_at: string;
                    cleanup_policy_started_at: string;
                    tags_count: number;
                    tags: {
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        location: {
                            value: {};
                        };
                    };
                    delete_api_path: string;
                    size: number;
                    status: string;
                }];
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    repository_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
            tags: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        repository_id: string;
                    };
                    query?: {
                        page: string;
                        per_page: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: [{
                        name: string;
                        path: string;
                        location: string;
                    }, {
                        name: string;
                        path: string;
                        location: string;
                    }];
                } | {
                    code: 401;
                } | {
                    code: 404;
                } | {
                    code: 405;
                }>;
                delete: ({ params }: {
                    params: {
                        id: string;
                        repository_id: string;
                        tag_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                } | {
                    code: 400;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
                getOne: ({ params }: {
                    params: {
                        id: string;
                        repository_id: string;
                        tag_name: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        name: string;
                        path: string;
                        location: string;
                        revision: string;
                        short_revision: string;
                        digest: string;
                        created_at: string;
                        total_size: number;
                    };
                } | {
                    code: 400;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
        };
    };
    events: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                action: string;
                target_type: string;
                before: string;
                after: string;
                sort: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                project_id: number;
                action_name: string;
                target_id: number;
                target_iid: number;
                target_type: string;
                author_id: number;
                target_title: string;
                created_at: string;
                note: {
                    id: string;
                    type: string;
                    body: string;
                    attachment: string;
                    author: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    created_at: string;
                    upstringd_at: string;
                    system: string;
                    noteable_id: string;
                    noteable_type: string;
                    project_id: string;
                    commit_id: string;
                    position: string;
                    resolvable: string;
                    resolved: string;
                    resolved_by: {
                        id: {
                            value: {};
                        };
                        username: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        state: {
                            value: {};
                        };
                        locked: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        avatar_path: {
                            value: {};
                        };
                        custom_attributes: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    resolved_at: string;
                    confidential: string;
                    internal: string;
                    imported: string;
                    imported_from: string;
                    noteable_iid: string;
                    commands_changes: string;
                };
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                wiki_page: {
                    format: string;
                    slug: string;
                    title: string;
                };
                imported: boolean;
                imported_from: string;
                push_data: {
                    commit_count: number;
                    action: string;
                    ref_type: string;
                    commit_from: string;
                    commit_to: string;
                    ref: string;
                    commit_title: string;
                    ref_count: number;
                };
                author_username: string;
            };
        }>;
    };
    export: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                export_status: string;
                _links: {
                    api_url: string;
                    web_url: string;
                };
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 503;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                description: string;
                upload: {
                    url: string;
                    http_method: string;
                };
            };
        }, options?: {}) => Promise<{
            code: 202;
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 429;
        } | {
            code: 503;
        }>;
        download: {
            get: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 503;
            }>;
        };
    };
    export_relations: {
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                batched: boolean;
            };
        }, options?: {}) => Promise<{
            code: 202;
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 503;
        }>;
        download: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    relation: string;
                    batched: string;
                    batch_number: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 500;
            } | {
                code: 503;
            }>;
        };
        status: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    relation: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    relation: string;
                    status: string;
                    error: string;
                    upstringd_at: string;
                    batched: boolean;
                    batches_count: number;
                    total_objects_count: number;
                    batches: {
                        status: {
                            value: {};
                        };
                        batch_number: {
                            value: {};
                        };
                        objects_count: {
                            value: {};
                        };
                        error: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                    };
                }, {
                    relation: string;
                    status: string;
                    error: string;
                    upstringd_at: string;
                    batched: boolean;
                    batches_count: number;
                    total_objects_count: number;
                    batches: {
                        status: {
                            value: {};
                        };
                        batch_number: {
                            value: {};
                        };
                        objects_count: {
                            value: {};
                        };
                        error: {
                            value: {};
                        };
                        upstringd_at: {
                            value: {};
                        };
                    };
                }];
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 503;
            }>;
        };
    };
    hooks: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: string;
                url: string;
                name: string;
                description: string;
                created_at: string;
                push_events: boolean;
                tag_push_events: boolean;
                merge_requests_events: boolean;
                repository_upstring_events: boolean;
                enable_ssl_verification: boolean;
                alert_status: symbol;
                disabled_until: string;
                url_variables: [object, object];
                custom_webhook_template: string;
                project_id: string;
                issues_events: boolean;
                confidential_issues_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                job_events: boolean;
                releases_events: boolean;
                push_events_branch_filter: string;
                emoji_events: boolean;
                resource_access_token_events: boolean;
            }, {
                id: string;
                url: string;
                name: string;
                description: string;
                created_at: string;
                push_events: boolean;
                tag_push_events: boolean;
                merge_requests_events: boolean;
                repository_upstring_events: boolean;
                enable_ssl_verification: boolean;
                alert_status: symbol;
                disabled_until: string;
                url_variables: [object, object];
                custom_webhook_template: string;
                project_id: string;
                issues_events: boolean;
                confidential_issues_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                job_events: boolean;
                releases_events: boolean;
                push_events_branch_filter: string;
                emoji_events: boolean;
                resource_access_token_events: boolean;
            }];
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                url: string;
                name: string;
                description: string;
                push_events: boolean;
                issues_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                job_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                releases_events: boolean;
                emoji_events: boolean;
                resource_access_token_events: boolean;
                enable_ssl_verification: boolean;
                token: string;
                push_events_branch_filter: string;
                custom_webhook_template: string;
                url_variables: [{
                    key: string;
                    value: string;
                }, {
                    key: string;
                    value: string;
                }];
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: string;
                url: string;
                name: string;
                description: string;
                created_at: string;
                push_events: boolean;
                tag_push_events: boolean;
                merge_requests_events: boolean;
                repository_upstring_events: boolean;
                enable_ssl_verification: boolean;
                alert_status: symbol;
                disabled_until: string;
                url_variables: [object, object];
                custom_webhook_template: string;
                project_id: string;
                issues_events: boolean;
                confidential_issues_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                job_events: boolean;
                releases_events: boolean;
                push_events_branch_filter: string;
                emoji_events: boolean;
                resource_access_token_events: boolean;
            };
        } | {
            code: 400;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                hook_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                url: string;
                name: string;
                description: string;
                created_at: string;
                push_events: boolean;
                tag_push_events: boolean;
                merge_requests_events: boolean;
                repository_upstring_events: boolean;
                enable_ssl_verification: boolean;
                alert_status: symbol;
                disabled_until: string;
                url_variables: [object, object];
                custom_webhook_template: string;
                project_id: string;
                issues_events: boolean;
                confidential_issues_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                job_events: boolean;
                releases_events: boolean;
                push_events_branch_filter: string;
                emoji_events: boolean;
                resource_access_token_events: boolean;
            };
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                hook_id: string;
            };
            data: {
                url: string;
                name: string;
                description: string;
                push_events: boolean;
                issues_events: boolean;
                confidential_issues_events: boolean;
                merge_requests_events: boolean;
                tag_push_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                job_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                releases_events: boolean;
                emoji_events: boolean;
                resource_access_token_events: boolean;
                enable_ssl_verification: boolean;
                token: string;
                push_events_branch_filter: string;
                custom_webhook_template: string;
                url_variables: [{
                    key: string;
                    value: string;
                }, {
                    key: string;
                    value: string;
                }];
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                url: string;
                name: string;
                description: string;
                created_at: string;
                push_events: boolean;
                tag_push_events: boolean;
                merge_requests_events: boolean;
                repository_upstring_events: boolean;
                enable_ssl_verification: boolean;
                alert_status: symbol;
                disabled_until: string;
                url_variables: [object, object];
                custom_webhook_template: string;
                project_id: string;
                issues_events: boolean;
                confidential_issues_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                job_events: boolean;
                releases_events: boolean;
                push_events_branch_filter: string;
                emoji_events: boolean;
                resource_access_token_events: boolean;
            };
        } | {
            code: 400;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                hook_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                id: string;
                url: string;
                name: string;
                description: string;
                created_at: string;
                push_events: boolean;
                tag_push_events: boolean;
                merge_requests_events: boolean;
                repository_upstring_events: boolean;
                enable_ssl_verification: boolean;
                alert_status: symbol;
                disabled_until: string;
                url_variables: [object, object];
                custom_webhook_template: string;
                project_id: string;
                issues_events: boolean;
                confidential_issues_events: boolean;
                note_events: boolean;
                confidential_note_events: boolean;
                pipeline_events: boolean;
                wiki_page_events: boolean;
                deployment_events: boolean;
                job_events: boolean;
                releases_events: boolean;
                push_events_branch_filter: string;
                emoji_events: boolean;
                resource_access_token_events: boolean;
            };
        } | {
            code: 404;
        }>;
        test: {
            post: ({ params }: {
                params: {
                    hook_id: string;
                    trigger: string;
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
            } | {
                code: 400;
            } | {
                code: 404;
            } | {
                code: 422;
            } | {
                code: 429;
            }>;
        };
        url_variables: {
            put: ({ params, data }: {
                params: {
                    hook_id: string;
                    key: string;
                    id: string;
                };
                data: {
                    value: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            }>;
            delete: ({ params }: {
                params: {
                    hook_id: string;
                    key: string;
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            }>;
        };
    };
    import: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                import_status: string;
                import_type: string;
                correlation_id: string;
                failed_relations: [{
                    id: string;
                    created_at: string;
                    exception_class: string;
                    source: string;
                    exception_message: string;
                    relation_name: string;
                    line_number: number;
                }, {
                    id: string;
                    created_at: string;
                    exception_class: string;
                    source: string;
                    exception_message: string;
                    relation_name: string;
                    line_number: number;
                }];
                import_error: string;
                stats: object;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 503;
        }>;
        authorize: {
            post: ({}: {}, options?: {}) => Promise<{
                code: 201;
            }>;
        };
    };
    "relation-imports": {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                import_status: string;
                import_type: string;
                correlation_id: string;
                failed_relations: [{
                    id: string;
                    created_at: string;
                    exception_class: string;
                    source: string;
                    exception_message: string;
                    relation_name: string;
                    line_number: number;
                }, {
                    id: string;
                    created_at: string;
                    exception_class: string;
                    source: string;
                    exception_message: string;
                    relation_name: string;
                    line_number: number;
                }];
                import_error: string;
                stats: object;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 503;
        }>;
    };
    job_token_scope: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                inbound_enabled: boolean;
                outbound_enabled: boolean;
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        patch: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                enabled: boolean;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        allowlist: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: string;
                        name: string;
                        nickname: string;
                        html_url: string;
                        source_url: string;
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: number;
                        name: string;
                        path: string;
                        kind: string;
                        full_path: string;
                        parent_id: number;
                        avatar_url: string;
                        web_url: string;
                    };
                    custom_attributes: {
                        key: string;
                        value: string;
                    };
                    repository_storage: string;
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    target_project_id: number;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: string;
                        name: string;
                        nickname: string;
                        html_url: string;
                        source_url: string;
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: number;
                        name: string;
                        path: string;
                        kind: string;
                        full_path: string;
                        parent_id: number;
                        avatar_url: string;
                        web_url: string;
                    };
                    custom_attributes: {
                        key: string;
                        value: string;
                    };
                    repository_storage: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 422;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    target_project_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
        groups_allowlist: {
            get: ({ params, query }: {
                params: {
                    id: string;
                };
                query?: {
                    page: string;
                    per_page: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: string;
                        name: string;
                        nickname: string;
                        html_url: string;
                        source_url: string;
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: number;
                        name: string;
                        path: string;
                        kind: string;
                        full_path: string;
                        parent_id: number;
                        avatar_url: string;
                        web_url: string;
                    };
                    custom_attributes: {
                        key: string;
                        value: string;
                    };
                    repository_storage: string;
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    target_group_id: number;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: string;
                    web_url: string;
                    name: string;
                };
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 422;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    target_group_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    repository_storage_moves: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                created_at: string;
                state: string;
                source_storage_name: string;
                destination_storage_name: string;
                error_message: string;
                project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
            }, {
                id: number;
                created_at: string;
                state: string;
                source_storage_name: string;
                destination_storage_name: string;
                error_message: string;
                project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                };
            }];
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                destination_storage_name: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                created_at: string;
                state: string;
                source_storage_name: string;
                destination_storage_name: string;
                error_message: string;
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
            };
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                repository_storage_move_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                created_at: string;
                state: string;
                source_storage_name: string;
                destination_storage_name: string;
                error_message: string;
                project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                };
            };
        }>;
    };
    snippets: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                title: string;
                description: string;
                visibility: string;
                author: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                created_at: string;
                upstringd_at: string;
                project_id: number;
                web_url: string;
                raw_url: string;
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                file_name: string;
                files: [string, string];
                imported: boolean;
                imported_from: string;
                repository_storage: string;
            }, {
                id: number;
                title: string;
                description: string;
                visibility: string;
                author: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                created_at: string;
                upstringd_at: string;
                project_id: number;
                web_url: string;
                raw_url: string;
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                file_name: string;
                files: [string, string];
                imported: boolean;
                imported_from: string;
                repository_storage: string;
            }];
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                title: string;
                visibility: string;
                file_name: string;
                description: string;
                files: [{
                    file_path: string;
                    content: string;
                }, {
                    file_path: string;
                    content: string;
                }];
                content: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                title: string;
                description: string;
                visibility: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                created_at: string;
                upstringd_at: string;
                project_id: number;
                web_url: string;
                raw_url: string;
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                file_name: string;
                files: [string, string];
                imported: boolean;
                imported_from: string;
                repository_storage: string;
            };
        } | {
            code: 400;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                snippet_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                title: string;
                description: string;
                visibility: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                created_at: string;
                upstringd_at: string;
                project_id: number;
                web_url: string;
                raw_url: string;
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                file_name: string;
                files: [string, string];
                imported: boolean;
                imported_from: string;
                repository_storage: string;
            };
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                snippet_id: string;
            };
            data: {
                content: string;
                description: string;
                file_name: string;
                title: string;
                visibility: string;
                files: [{
                    action: string;
                    content: string;
                    file_path: string;
                    previous_path: string;
                }, {
                    action: string;
                    content: string;
                    file_path: string;
                    previous_path: string;
                }];
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                title: string;
                description: string;
                visibility: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                created_at: string;
                upstringd_at: string;
                project_id: number;
                web_url: string;
                raw_url: string;
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                file_name: string;
                files: [string, string];
                imported: boolean;
                imported_from: string;
                repository_storage: string;
            };
        } | {
            code: 400;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                snippet_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 404;
        }>;
        raw: {
            get: ({ params }: {
                params: {
                    id: string;
                    snippet_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    title: string;
                    description: string;
                    visibility: string;
                    author: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    created_at: string;
                    upstringd_at: string;
                    project_id: number;
                    web_url: string;
                    raw_url: string;
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    file_name: string;
                    files: [string, string];
                    imported: boolean;
                    imported_from: string;
                    repository_storage: string;
                };
            } | {
                code: 404;
            }>;
        };
        files: {
            raw: {
                get: ({ params }: {
                    params: {
                        id: string;
                        file_path: string;
                        ref: string;
                        snippet_id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        id: number;
                        title: string;
                        description: string;
                        visibility: string;
                        author: {
                            id: number;
                            username: string;
                            name: string;
                            state: string;
                            locked: boolean;
                            avatar_url: string;
                            avatar_path: string;
                            custom_attributes: [{
                                value: {};
                            }, {
                                value: {};
                            }];
                            web_url: string;
                        };
                        created_at: string;
                        upstringd_at: string;
                        project_id: number;
                        web_url: string;
                        raw_url: string;
                        ssh_url_to_repo: string;
                        http_url_to_repo: string;
                        file_name: string;
                        files: [string, string];
                        imported: boolean;
                        imported_from: string;
                        repository_storage: string;
                    };
                } | {
                    code: 404;
                }>;
            };
        };
        user_agent_detail: {
            get: ({ params }: {
                params: {
                    id: string;
                    snippet_id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    user_agent: string;
                    ip_address: string;
                    akismet_submitted: boolean;
                };
            } | {
                code: 404;
            }>;
        };
    };
    snapshot: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                wiki: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
        } | {
            code: 401;
        }>;
    };
    statistics: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                fetches: {
                    total: number;
                    days: [{
                        count: {
                            value: {};
                        };
                        string: {
                            value: {};
                        };
                    }, {
                        count: {
                            value: {};
                        };
                        string: {
                            value: {};
                        };
                    }];
                };
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
    };
    templates: {
        getOne: ({ params, query }: {
            params: {
                id: string;
                type: string;
                name: string;
            };
            query?: {
                source_template_project_id: string;
                project: string;
                fullname: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                key: string;
                name: string;
                nickname: string;
                html_url: string;
                source_url: string;
                popular: boolean;
                description: string;
                conditions: [string, string];
                permissions: [string, string];
                limitations: [string, string];
                content: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
    };
    custom_attributes: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                key: string;
                value: string;
            };
        }>;
        getOne: ({ params }: {
            params: {
                key: string;
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                key: string;
                value: string;
            };
        }>;
        put: ({ params, data }: {
            params: {
                key: string;
                id: string;
            };
            data: {
                value: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
        }>;
        delete: ({ params }: {
            params: {
                key: string;
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        }>;
    };
    share_locations: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                search: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                web_url: string;
                name: string;
                path: string;
                description: string;
                visibility: string;
                share_with_group_lock: string;
                require_two_factor_authentication: string;
                two_factor_grace_period: string;
                project_creation_level: string;
                auto_devops_enabled: string;
                subgroup_creation_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                mentions_disabled: string;
                lfs_enabled: string;
                math_rendering_limits_enabled: boolean;
                lock_math_rendering_limits_enabled: boolean;
                default_branch: string;
                default_branch_protection: string;
                default_branch_protection_defaults: string;
                avatar_url: string;
                request_access_enabled: string;
                full_name: string;
                full_path: string;
                created_at: string;
                parent_id: string;
                organization_id: string;
                shared_runners_setting: string;
                custom_attributes: {
                    key: string;
                    value: string;
                };
                statistics: {
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                };
                ldap_cn: string;
                ldap_access: string;
                ldap_group_links: {
                    cn: string;
                    group_access: number;
                    provider: string;
                    filter: string;
                };
                saml_group_links: {
                    name: string;
                    access_level: number;
                    member_role_id: number;
                };
                file_template_project_id: string;
                marked_for_deletion_on: string;
                wiki_access_level: string;
                repository_storage: string;
                duo_features_enabled: string;
                lock_duo_features_enabled: string;
            };
        }>;
    };
    fork: {
        post: ({ params }: {
            params: {
                id: string;
                forked_from_id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 304;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    forks: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                order_by: string;
                sort: string;
                archived: string;
                visibility: string;
                search: string;
                search_namespaces: string;
                owned: string;
                starred: string;
                imported: string;
                membership: string;
                with_issues_enabled: string;
                with_merge_requests_enabled: string;
                with_programming_language: string;
                min_access_level: string;
                id_after: string;
                id_before: string;
                last_activity_after: string;
                last_activity_before: string;
                repository_storage: string;
                topic: string;
                topic_id: string;
                updated_before: string;
                updated_after: string;
                include_pending_delete: string;
                wiki_checksum_failed: string;
                repository_checksum_failed: string;
                include_hidden: string;
                page: string;
                per_page: string;
                simple: string;
                with_custom_attributes: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    nickname: {
                        value: {};
                    };
                    html_url: {
                        value: {};
                    };
                    source_url: {
                        value: {};
                    };
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    kind: {
                        value: {};
                    };
                    full_path: {
                        value: {};
                    };
                    parent_id: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                custom_attributes: {
                    key: {
                        value: {};
                    };
                    value: {
                        value: {};
                    };
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: {
                        value: {};
                    };
                    enabled: {
                        value: {};
                    };
                    keep_n: {
                        value: {};
                    };
                    older_than: {
                        value: {};
                    };
                    name_regex: {
                        value: {};
                    };
                    name_regex_keep: {
                        value: {};
                    };
                    next_run_at: {
                        value: {};
                    };
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    default_branch: {
                        value: {};
                    };
                    tag_list: {
                        value: {};
                    };
                    topics: {
                        value: {};
                    };
                    ssh_url_to_repo: {
                        value: {};
                    };
                    http_url_to_repo: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    readme_url: {
                        value: {};
                    };
                    forks_count: {
                        value: {};
                    };
                    license_url: {
                        value: {};
                    };
                    license: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    star_count: {
                        value: {};
                    };
                    last_activity_at: {
                        value: {};
                    };
                    namespace: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    repository_storage: {
                        value: {};
                    };
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: {
                        value: {};
                    };
                    storage_size: {
                        value: {};
                    };
                    repository_size: {
                        value: {};
                    };
                    wiki_size: {
                        value: {};
                    };
                    lfs_objects_size: {
                        value: {};
                    };
                    job_artifacts_size: {
                        value: {};
                    };
                    pipeline_artifacts_size: {
                        value: {};
                    };
                    packages_size: {
                        value: {};
                    };
                    snippets_size: {
                        value: {};
                    };
                    uploads_size: {
                        value: {};
                    };
                    container_registry_size: {
                        value: {};
                    };
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            }, {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    nickname: {
                        value: {};
                    };
                    html_url: {
                        value: {};
                    };
                    source_url: {
                        value: {};
                    };
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    kind: {
                        value: {};
                    };
                    full_path: {
                        value: {};
                    };
                    parent_id: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                custom_attributes: {
                    key: {
                        value: {};
                    };
                    value: {
                        value: {};
                    };
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: {
                        value: {};
                    };
                    enabled: {
                        value: {};
                    };
                    keep_n: {
                        value: {};
                    };
                    older_than: {
                        value: {};
                    };
                    name_regex: {
                        value: {};
                    };
                    name_regex_keep: {
                        value: {};
                    };
                    next_run_at: {
                        value: {};
                    };
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    name_with_namespace: {
                        value: {};
                    };
                    path: {
                        value: {};
                    };
                    path_with_namespace: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    default_branch: {
                        value: {};
                    };
                    tag_list: {
                        value: {};
                    };
                    topics: {
                        value: {};
                    };
                    ssh_url_to_repo: {
                        value: {};
                    };
                    http_url_to_repo: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    readme_url: {
                        value: {};
                    };
                    forks_count: {
                        value: {};
                    };
                    license_url: {
                        value: {};
                    };
                    license: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    star_count: {
                        value: {};
                    };
                    last_activity_at: {
                        value: {};
                    };
                    namespace: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    repository_storage: {
                        value: {};
                    };
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: {
                        value: {};
                    };
                    storage_size: {
                        value: {};
                    };
                    repository_size: {
                        value: {};
                    };
                    wiki_size: {
                        value: {};
                    };
                    lfs_objects_size: {
                        value: {};
                    };
                    job_artifacts_size: {
                        value: {};
                    };
                    pipeline_artifacts_size: {
                        value: {};
                    };
                    packages_size: {
                        value: {};
                    };
                    snippets_size: {
                        value: {};
                    };
                    uploads_size: {
                        value: {};
                    };
                    container_registry_size: {
                        value: {};
                    };
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            }];
        }>;
    };
    pages_access: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
        } | {
            code: 403;
        }>;
    };
    archive: {
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        } | {
            code: 403;
        }>;
    };
    unarchive: {
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        } | {
            code: 403;
        }>;
    };
    star: {
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        } | {
            code: 304;
        } | {
            code: 403;
        }>;
    };
    unstar: {
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        } | {
            code: 304;
        } | {
            code: 403;
        }>;
    };
    starrers: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                search: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
            }, {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
            }];
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    languages: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
        } | {
            code: 404;
        }>;
    };
    share: {
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                group_id: number;
                group_access: number;
                expires_at: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                project_id: number;
                group_id: number;
                group_access: number;
                expires_at: string;
            };
        } | {
            code: 400;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                group_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 404;
        }>;
    };
    import_project_members: {
        post: ({ params }: {
            params: {
                id: string;
                project_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
    };
    uploads: {
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                file: ArrayBuffer;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                alt: string;
                url: string;
                full_path: string;
                markdown: string;
            };
        } | {
            code: 404;
        }>;
        authorize: {
            post: ({ params }: {
                params: {
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 404;
            }>;
        };
    };
    users: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                search: string;
                skip_users: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
            }, {
                id: number;
                username: string;
                name: string;
                state: string;
                locked: boolean;
                avatar_url: string;
                avatar_path: string;
                custom_attributes: [{
                    value: {};
                }, {
                    value: {};
                }];
                web_url: string;
            }];
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    groups: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                search: string;
                skip_groups: string;
                with_shared: string;
                shared_visible_only: string;
                shared_min_access_level: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: string;
                web_url: string;
                name: string;
                avatar_url: string;
                full_name: string;
                full_path: string;
            }, {
                id: string;
                web_url: string;
                name: string;
                avatar_url: string;
                full_name: string;
                full_path: string;
            }];
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    housekeeping: {
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                task: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 409;
        }>;
    };
    repository_size: {
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
        } | {
            code: 401;
        } | {
            code: 403;
        }>;
    };
    transfer: {
        put: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                namespace: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        } | {
            code: 400;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    transfer_locations: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                search: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: string;
                web_url: string;
                name: string;
                avatar_url: string;
                full_name: string;
                full_path: string;
            }, {
                id: string;
                web_url: string;
                name: string;
                avatar_url: string;
                full_name: string;
                full_path: string;
            }];
        } | {
            code: 403;
        }>;
    };
    storage: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                disk_path: string;
                project_id: number;
                repository_storage: string;
                created_at: string;
            };
        } | {
            code: 403;
        }>;
    };
    restore: {
        post: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        }>;
    };
    protected_branches: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                search: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                name: string;
                push_access_levels: [{
                    value: {};
                }, {
                    value: {};
                }];
                merge_access_levels: [{
                    value: {};
                }, {
                    value: {};
                }];
                allow_force_push: boolean;
                unprotect_access_levels: [{
                    value: {};
                }, {
                    value: {};
                }];
                code_owner_approval_required: boolean;
                inherited: boolean;
            }, {
                id: number;
                name: string;
                push_access_levels: [{
                    value: {};
                }, {
                    value: {};
                }];
                merge_access_levels: [{
                    value: {};
                }, {
                    value: {};
                }];
                allow_force_push: boolean;
                unprotect_access_levels: [{
                    value: {};
                }, {
                    value: {};
                }];
                code_owner_approval_required: boolean;
                inherited: boolean;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                push_access_level: number;
                merge_access_level: number;
                allow_force_push: false;
                unprotect_access_level: number;
                allowed_to_push: [{
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }, {
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }];
                allowed_to_merge: [{
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }, {
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }];
                allowed_to_unprotect: [{
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }, {
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }];
                code_owner_approval_required: false;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                name: string;
                push_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                merge_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                allow_force_push: boolean;
                unprotect_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                code_owner_approval_required: boolean;
                inherited: boolean;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        } | {
            code: 409;
        } | {
            code: 422;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                push_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                merge_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                allow_force_push: boolean;
                unprotect_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                code_owner_approval_required: boolean;
                inherited: boolean;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        patch: ({ params, data }: {
            params: {
                id: string;
                name: string;
            };
            data: {
                allow_force_push: boolean;
                unprotect_access_level: number;
                allowed_to_push: [{
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }, {
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }];
                allowed_to_merge: [{
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }, {
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }];
                allowed_to_unprotect: [{
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }, {
                    access_level: number;
                    user_id: number;
                    group_id: number;
                    id: number;
                    _destroy: boolean;
                }];
                code_owner_approval_required: false;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                push_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                merge_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                allow_force_push: boolean;
                unprotect_access_levels: [{
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }, {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                }];
                code_owner_approval_required: boolean;
                inherited: boolean;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
    };
    protected_tags: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                name: string;
                create_access_levels: {
                    id: {
                        value: {};
                    };
                    access_level: {
                        value: {};
                    };
                    access_level_description: {
                        value: {};
                    };
                    deploy_key_id: {
                        value: {};
                    };
                    user_id: {
                        value: {};
                    };
                    group_id: {
                        value: {};
                    };
                };
            }, {
                name: string;
                create_access_levels: {
                    id: {
                        value: {};
                    };
                    access_level: {
                        value: {};
                    };
                    access_level_description: {
                        value: {};
                    };
                    deploy_key_id: {
                        value: {};
                    };
                    user_id: {
                        value: {};
                    };
                    group_id: {
                        value: {};
                    };
                };
            }];
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                create_access_level: number;
                allowed_to_create: [{
                    access_level: number;
                    user_id: number;
                    group_id: number;
                }, {
                    access_level: number;
                    user_id: number;
                    group_id: number;
                }];
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                name: string;
                create_access_levels: {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                };
            };
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                name: string;
                create_access_levels: {
                    id: number;
                    access_level: number;
                    access_level_description: string;
                    deploy_key_id: number;
                    user_id: number;
                    group_id: number;
                };
            };
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                name: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 412;
        }>;
    };
    releases: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                order_by: string;
                sort: string;
                include_html_description: string;
                updated_before: string;
                updated_after: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                name: string;
                tag_name: string;
                description: string;
                created_at: string;
                released_at: string;
                upcoming_release: boolean;
                description_html: string;
                author: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                commit: {
                    id: {
                        value: {};
                    };
                    short_id: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    parent_ids: {
                        value: {};
                    };
                    title: {
                        value: {};
                    };
                    message: {
                        value: {};
                    };
                    author_name: {
                        value: {};
                    };
                    author_email: {
                        value: {};
                    };
                    authored_string: {
                        value: {};
                    };
                    committer_name: {
                        value: {};
                    };
                    committer_email: {
                        value: {};
                    };
                    committed_string: {
                        value: {};
                    };
                    trailers: {
                        value: {};
                    };
                    extended_trailers: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                milestones: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    group_id: {
                        value: {};
                    };
                    title: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    due_string: {
                        value: {};
                    };
                    start_string: {
                        value: {};
                    };
                    expired: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    issue_stats: {
                        value: {};
                    };
                };
                commit_path: string;
                tag_path: string;
                assets: {
                    count: number;
                    sources: {
                        value: {};
                    };
                    links: {
                        value: {};
                    };
                };
                evidences: {
                    sha: {
                        value: {};
                    };
                    filepath: {
                        value: {};
                    };
                    collected_at: {
                        value: {};
                    };
                };
                _links: {
                    closed_issues_url: string;
                    closed_merge_requests_url: string;
                    edit_url: string;
                    merged_merge_requests_url: string;
                    opened_issues_url: string;
                    opened_merge_requests_url: string;
                    self: string;
                };
            }, {
                name: string;
                tag_name: string;
                description: string;
                created_at: string;
                released_at: string;
                upcoming_release: boolean;
                description_html: string;
                author: {
                    id: {
                        value: {};
                    };
                    username: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    locked: {
                        value: {};
                    };
                    avatar_url: {
                        value: {};
                    };
                    avatar_path: {
                        value: {};
                    };
                    custom_attributes: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                commit: {
                    id: {
                        value: {};
                    };
                    short_id: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    parent_ids: {
                        value: {};
                    };
                    title: {
                        value: {};
                    };
                    message: {
                        value: {};
                    };
                    author_name: {
                        value: {};
                    };
                    author_email: {
                        value: {};
                    };
                    authored_string: {
                        value: {};
                    };
                    committer_name: {
                        value: {};
                    };
                    committer_email: {
                        value: {};
                    };
                    committed_string: {
                        value: {};
                    };
                    trailers: {
                        value: {};
                    };
                    extended_trailers: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                };
                milestones: {
                    id: {
                        value: {};
                    };
                    iid: {
                        value: {};
                    };
                    project_id: {
                        value: {};
                    };
                    group_id: {
                        value: {};
                    };
                    title: {
                        value: {};
                    };
                    description: {
                        value: {};
                    };
                    state: {
                        value: {};
                    };
                    created_at: {
                        value: {};
                    };
                    upstringd_at: {
                        value: {};
                    };
                    due_string: {
                        value: {};
                    };
                    start_string: {
                        value: {};
                    };
                    expired: {
                        value: {};
                    };
                    web_url: {
                        value: {};
                    };
                    issue_stats: {
                        value: {};
                    };
                };
                commit_path: string;
                tag_path: string;
                assets: {
                    count: number;
                    sources: {
                        value: {};
                    };
                    links: {
                        value: {};
                    };
                };
                evidences: {
                    sha: {
                        value: {};
                    };
                    filepath: {
                        value: {};
                    };
                    collected_at: {
                        value: {};
                    };
                };
                _links: {
                    closed_issues_url: string;
                    closed_merge_requests_url: string;
                    edit_url: string;
                    merged_merge_requests_url: string;
                    opened_issues_url: string;
                    opened_merge_requests_url: string;
                    self: string;
                };
            }];
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                tag_name: string;
                tag_message: string;
                name: string;
                description: string;
                ref: string;
                assets: {
                    links: [{
                        name: string;
                        url: string;
                        direct_asset_path: string;
                        filepath: string;
                        link_type: string;
                    }, {
                        name: string;
                        url: string;
                        direct_asset_path: string;
                        filepath: string;
                        link_type: string;
                    }];
                };
                milestones: [string, string];
                milestone_ids: string;
                released_at: string;
                legacy_catalog_publish: boolean;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                name: string;
                tag_name: string;
                description: string;
                created_at: string;
                released_at: string;
                upcoming_release: boolean;
                description_html: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                commit: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
                milestones: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                    issue_stats: {
                        total: string;
                        closed: string;
                    };
                };
                commit_path: string;
                tag_path: string;
                assets: {
                    count: number;
                    sources: {
                        format: string;
                        url: string;
                    };
                    links: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                };
                evidences: {
                    sha: string;
                    filepath: string;
                    collected_at: string;
                };
                _links: {
                    closed_issues_url: string;
                    closed_merge_requests_url: string;
                    edit_url: string;
                    merged_merge_requests_url: string;
                    opened_issues_url: string;
                    opened_merge_requests_url: string;
                    self: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 409;
        } | {
            code: 422;
        }>;
        getOne: ({ params, query }: {
            params: {
                id: string;
                tag_name: string;
            };
            query?: {
                include_html_description: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                name: string;
                tag_name: string;
                description: string;
                created_at: string;
                released_at: string;
                upcoming_release: boolean;
                description_html: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                commit: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
                milestones: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                    issue_stats: {
                        total: string;
                        closed: string;
                    };
                };
                commit_path: string;
                tag_path: string;
                assets: {
                    count: number;
                    sources: {
                        format: string;
                        url: string;
                    };
                    links: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                };
                evidences: {
                    sha: string;
                    filepath: string;
                    collected_at: string;
                };
                _links: {
                    closed_issues_url: string;
                    closed_merge_requests_url: string;
                    edit_url: string;
                    merged_merge_requests_url: string;
                    opened_issues_url: string;
                    opened_merge_requests_url: string;
                    self: string;
                };
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                tag_name: string;
            };
            data: {
                name: string;
                description: string;
                released_at: string;
                milestones: [string, string];
                milestone_ids: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                name: string;
                tag_name: string;
                description: string;
                created_at: string;
                released_at: string;
                upcoming_release: boolean;
                description_html: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                commit: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
                milestones: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                    issue_stats: {
                        total: string;
                        closed: string;
                    };
                };
                commit_path: string;
                tag_path: string;
                assets: {
                    count: number;
                    sources: {
                        format: string;
                        url: string;
                    };
                    links: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                };
                evidences: {
                    sha: string;
                    filepath: string;
                    collected_at: string;
                };
                _links: {
                    closed_issues_url: string;
                    closed_merge_requests_url: string;
                    edit_url: string;
                    merged_merge_requests_url: string;
                    opened_issues_url: string;
                    opened_merge_requests_url: string;
                    self: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                tag_name: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                name: string;
                tag_name: string;
                description: string;
                created_at: string;
                released_at: string;
                upcoming_release: boolean;
                description_html: string;
                author: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                commit: {
                    id: string;
                    short_id: string;
                    created_at: string;
                    parent_ids: [string, string];
                    title: string;
                    message: string;
                    author_name: string;
                    author_email: string;
                    authored_string: string;
                    committer_name: string;
                    committer_email: string;
                    committed_string: string;
                    trailers: object;
                    extended_trailers: object;
                    web_url: string;
                };
                milestones: {
                    id: string;
                    iid: string;
                    project_id: string;
                    group_id: string;
                    title: string;
                    description: string;
                    state: string;
                    created_at: string;
                    upstringd_at: string;
                    due_string: string;
                    start_string: string;
                    expired: string;
                    web_url: string;
                    issue_stats: {
                        total: string;
                        closed: string;
                    };
                };
                commit_path: string;
                tag_path: string;
                assets: {
                    count: number;
                    sources: {
                        format: string;
                        url: string;
                    };
                    links: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                };
                evidences: {
                    sha: string;
                    filepath: string;
                    collected_at: string;
                };
                _links: {
                    closed_issues_url: string;
                    closed_merge_requests_url: string;
                    edit_url: string;
                    merged_merge_requests_url: string;
                    opened_issues_url: string;
                    opened_merge_requests_url: string;
                    self: string;
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        downloads: {
            get: ({ params, query }: {
                params: {
                    id: string;
                    tag_name: string;
                };
                query?: {
                    direct_asset_path: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        evidence: {
            post: ({ params }: {
                params: {
                    tag_name: string;
                    id: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    name: string;
                    tag_name: string;
                    description: string;
                    created_at: string;
                    released_at: string;
                    upcoming_release: boolean;
                    description_html: string;
                    author: {
                        id: number;
                        username: string;
                        name: string;
                        state: string;
                        locked: boolean;
                        avatar_url: string;
                        avatar_path: string;
                        custom_attributes: [{
                            value: {};
                        }, {
                            value: {};
                        }];
                        web_url: string;
                    };
                    commit: {
                        id: string;
                        short_id: string;
                        created_at: string;
                        parent_ids: [string, string];
                        title: string;
                        message: string;
                        author_name: string;
                        author_email: string;
                        authored_string: string;
                        committer_name: string;
                        committer_email: string;
                        committed_string: string;
                        trailers: object;
                        extended_trailers: object;
                        web_url: string;
                    };
                    milestones: {
                        id: string;
                        iid: string;
                        project_id: string;
                        group_id: string;
                        title: string;
                        description: string;
                        state: string;
                        created_at: string;
                        upstringd_at: string;
                        due_string: string;
                        start_string: string;
                        expired: string;
                        web_url: string;
                        issue_stats: {
                            total: string;
                            closed: string;
                        };
                    };
                    commit_path: string;
                    tag_path: string;
                    assets: {
                        count: number;
                        sources: {
                            format: string;
                            url: string;
                        };
                        links: {
                            id: number;
                            name: string;
                            url: string;
                            direct_asset_url: string;
                            link_type: string;
                        };
                    };
                    evidences: {
                        sha: string;
                        filepath: string;
                        collected_at: string;
                    };
                    _links: {
                        closed_issues_url: string;
                        closed_merge_requests_url: string;
                        edit_url: string;
                        merged_merge_requests_url: string;
                        opened_issues_url: string;
                        opened_merge_requests_url: string;
                        self: string;
                    };
                };
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
        assets: {
            links: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                        tag_name: string;
                    };
                    query?: {
                        page: string;
                        per_page: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: [{
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    }, {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    }];
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
                post: ({ params, data }: {
                    params: {
                        id: string;
                        tag_name: string;
                    };
                    data: {
                        name: string;
                        url: string;
                        direct_asset_path: string;
                        filepath: string;
                        link_type: string;
                    };
                }, options?: {}) => Promise<{
                    code: 201;
                    data: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                } | {
                    code: 400;
                } | {
                    code: 401;
                }>;
                getOne: ({ params }: {
                    params: {
                        id: string;
                        tag_name: string;
                        link_id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
                put: ({ params, data }: {
                    params: {
                        id: string;
                        tag_name: string;
                        link_id: string;
                    };
                    data: {
                        name: string;
                        url: string;
                        direct_asset_path: string;
                        filepath: string;
                        link_type: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                } | {
                    code: 400;
                } | {
                    code: 401;
                }>;
                delete: ({ params }: {
                    params: {
                        id: string;
                        tag_name: string;
                        link_id: string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                    data: {
                        id: number;
                        name: string;
                        url: string;
                        direct_asset_url: string;
                        link_type: string;
                    };
                } | {
                    code: 400;
                } | {
                    code: 401;
                }>;
            };
        };
        permalink: {
            latest: {
                get: ({ params, query }: {
                    params: {
                        id: string;
                    };
                    query?: {
                        suffix_path: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 401;
                } | {
                    code: 404;
                }>;
            };
        };
    };
    remote_mirrors: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                enabled: boolean;
                url: string;
                upstring_status: string;
                last_upstring_at: string;
                last_upstring_started_at: string;
                last_successful_upstring_at: string;
                last_error: number;
                only_protected_branches: boolean;
                keep_divergent_refs: boolean;
                auth_method: string;
                mirror_branch_regex: string;
            }, {
                id: number;
                enabled: boolean;
                url: string;
                upstring_status: string;
                last_upstring_at: string;
                last_upstring_started_at: string;
                last_successful_upstring_at: string;
                last_error: number;
                only_protected_branches: boolean;
                keep_divergent_refs: boolean;
                auth_method: string;
                mirror_branch_regex: string;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                url: string;
                enabled: boolean;
                auth_method: string;
                keep_divergent_refs: boolean;
                only_protected_branches: boolean;
                mirror_branch_regex: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                enabled: boolean;
                url: string;
                upstring_status: string;
                last_upstring_at: string;
                last_upstring_started_at: string;
                last_successful_upstring_at: string;
                last_error: number;
                only_protected_branches: boolean;
                keep_divergent_refs: boolean;
                auth_method: string;
                mirror_branch_regex: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                mirror_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                enabled: boolean;
                url: string;
                upstring_status: string;
                last_upstring_at: string;
                last_upstring_started_at: string;
                last_successful_upstring_at: string;
                last_error: number;
                only_protected_branches: boolean;
                keep_divergent_refs: boolean;
                auth_method: string;
                mirror_branch_regex: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                mirror_id: string;
            };
            data: {
                enabled: boolean;
                auth_method: string;
                keep_divergent_refs: boolean;
                only_protected_branches: boolean;
                mirror_branch_regex: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                enabled: boolean;
                url: string;
                upstring_status: string;
                last_upstring_at: string;
                last_upstring_started_at: string;
                last_successful_upstring_at: string;
                last_error: number;
                only_protected_branches: boolean;
                keep_divergent_refs: boolean;
                auth_method: string;
                mirror_branch_regex: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                mirror_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        sync: {
            post: ({ params }: {
                params: {
                    id: string;
                    mirror_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 400;
            } | {
                code: 401;
            } | {
                code: 404;
            }>;
        };
    };
    access_tokens: {
        get: ({ params }: {
            params: {
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                name: string;
                revoked: boolean;
                created_at: string;
                user_id: number;
                last_used_at: string;
                active: boolean;
                expires_at: string;
                access_level: number;
            }, {
                id: number;
                name: string;
                revoked: boolean;
                created_at: string;
                user_id: number;
                last_used_at: string;
                active: boolean;
                expires_at: string;
                access_level: number;
            }];
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                scopes: [string, string];
                expires_at: string;
                access_level: 40;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                name: string;
                revoked: boolean;
                created_at: string;
                user_id: number;
                last_used_at: string;
                active: boolean;
                expires_at: string;
                access_level: number;
                token: string;
            };
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                token_id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                name: string;
                revoked: boolean;
                created_at: string;
                user_id: number;
                last_used_at: string;
                active: boolean;
                expires_at: string;
                access_level: number;
            };
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                token_id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 404;
        }>;
        rotate: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    token_id: string;
                };
                data: {
                    expires_at: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    id: number;
                    name: string;
                    revoked: boolean;
                    created_at: string;
                    user_id: number;
                    last_used_at: string;
                    active: boolean;
                    expires_at: string;
                    access_level: number;
                    token: string;
                };
            }>;
        };
    };
    wikis: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                with_content: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                format: string;
                slug: string;
                title: string;
            }, {
                format: string;
                slug: string;
                title: string;
            }];
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                title: string;
                content: string;
                front_matter: {
                    title: string;
                };
                format: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                format: string;
                slug: string;
                title: string;
                content: string;
                encoding: string;
                front_matter: object;
            };
        } | {
            code: 400;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        getOne: ({ params, query }: {
            params: {
                slug: string;
                id: string;
            };
            query?: {
                version: string;
                render_html: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                format: string;
                slug: string;
                title: string;
                content: string;
                encoding: string;
                front_matter: object;
            };
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                slug: string;
            };
            data: {
                title: string;
                front_matter: {
                    title: string;
                };
                content: string;
                format: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                format: string;
                slug: string;
                title: string;
                content: string;
                encoding: string;
                front_matter: object;
            };
        } | {
            code: 400;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        delete: ({ params }: {
            params: {
                slug: string;
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 400;
        } | {
            code: 404;
        }>;
        attachments: {
            post: ({ params, data }: {
                params: {
                    id: string;
                };
                data: {
                    file: ArrayBuffer;
                    branch: string;
                };
            }, options?: {}) => Promise<{
                code: 201;
                data: {
                    file_name: string;
                    file_path: string;
                    branch: string;
                    link: {
                        url: string;
                        markdown: string;
                    };
                };
            } | {
                code: 404;
            }>;
        };
    };
    alert_management_alerts: {
        metric_images: {
            post: ({ params, data }: {
                params: {
                    id: string;
                    alert_iid: string;
                };
                data: {
                    url: string;
                    url_string: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    created_at: string;
                    filename: string;
                    file_path: string;
                    url: string;
                    url_string: string;
                };
            } | {
                code: 403;
            }>;
            get: ({ params }: {
                params: {
                    id: string;
                    alert_iid: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: [{
                    id: number;
                    created_at: string;
                    filename: string;
                    file_path: string;
                    url: string;
                    url_string: string;
                }, {
                    id: number;
                    created_at: string;
                    filename: string;
                    file_path: string;
                    url: string;
                    url_string: string;
                }];
            } | {
                code: 404;
            }>;
            authorize: {
                post: ({ params }: {
                    params: {
                        id: string;
                        alert_iid: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 403;
                }>;
            };
            put: ({ params, data }: {
                params: {
                    id: string;
                    alert_iid: string;
                    metric_image_id: string;
                };
                data: {
                    url: string;
                    url_string: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    created_at: string;
                    filename: string;
                    file_path: string;
                    url: string;
                    url_string: string;
                };
            } | {
                code: 403;
            } | {
                code: 422;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    alert_iid: string;
                    metric_image_id: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
                data: {
                    id: number;
                    created_at: string;
                    filename: string;
                    file_path: string;
                    url: string;
                    url_string: string;
                };
            } | {
                code: 403;
            } | {
                code: 422;
            }>;
        };
    };
    feature_flags: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                scope: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                name: string;
                description: string;
                active: boolean;
                version: string;
                created_at: string;
                upstringd_at: string;
                scopes: string;
                strategies: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    parameters: {
                        value: {};
                    };
                    scopes: {
                        value: {};
                    };
                    user_list: {
                        value: {};
                    };
                };
            }, {
                name: string;
                description: string;
                active: boolean;
                version: string;
                created_at: string;
                upstringd_at: string;
                scopes: string;
                strategies: {
                    id: {
                        value: {};
                    };
                    name: {
                        value: {};
                    };
                    parameters: {
                        value: {};
                    };
                    scopes: {
                        value: {};
                    };
                    user_list: {
                        value: {};
                    };
                };
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                description: string;
                active: boolean;
                version: string;
                strategies: [{
                    name: string;
                    parameters: string;
                    user_list_id: number;
                    scopes: [{
                        environment_scope: object;
                    }, {
                        environment_scope: object;
                    }];
                }, {
                    name: string;
                    parameters: string;
                    user_list_id: number;
                    scopes: [{
                        environment_scope: object;
                    }, {
                        environment_scope: object;
                    }];
                }];
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                name: string;
                description: string;
                active: boolean;
                version: string;
                created_at: string;
                upstringd_at: string;
                scopes: string;
                strategies: {
                    id: number;
                    name: string;
                    parameters: string;
                    scopes: {
                        id: {
                            value: {};
                        };
                        environment_scope: {
                            value: {};
                        };
                    };
                    user_list: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        user_xids: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                feature_flag_name: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                name: string;
                description: string;
                active: boolean;
                version: string;
                created_at: string;
                upstringd_at: string;
                scopes: string;
                strategies: {
                    id: number;
                    name: string;
                    parameters: string;
                    scopes: {
                        id: {
                            value: {};
                        };
                        environment_scope: {
                            value: {};
                        };
                    };
                    user_list: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        user_xids: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                feature_flag_name: string;
            };
            data: {
                name: string;
                description: string;
                active: boolean;
                strategies: [{
                    id: number;
                    name: string;
                    parameters: string;
                    user_list_id: number;
                    _destroy: boolean;
                    scopes: [{
                        id: object;
                        environment_scope: object;
                        _destroy: object;
                    }, {
                        id: object;
                        environment_scope: object;
                        _destroy: object;
                    }];
                }, {
                    id: number;
                    name: string;
                    parameters: string;
                    user_list_id: number;
                    _destroy: boolean;
                    scopes: [{
                        id: object;
                        environment_scope: object;
                        _destroy: object;
                    }, {
                        id: object;
                        environment_scope: object;
                        _destroy: object;
                    }];
                }];
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                name: string;
                description: string;
                active: boolean;
                version: string;
                created_at: string;
                upstringd_at: string;
                scopes: string;
                strategies: {
                    id: number;
                    name: string;
                    parameters: string;
                    scopes: {
                        id: {
                            value: {};
                        };
                        environment_scope: {
                            value: {};
                        };
                    };
                    user_list: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        user_xids: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        } | {
            code: 422;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                feature_flag_name: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
            data: {
                name: string;
                description: string;
                active: boolean;
                version: string;
                created_at: string;
                upstringd_at: string;
                scopes: string;
                strategies: {
                    id: number;
                    name: string;
                    parameters: string;
                    scopes: {
                        id: {
                            value: {};
                        };
                        environment_scope: {
                            value: {};
                        };
                    };
                    user_list: {
                        id: {
                            value: {};
                        };
                        iid: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        user_xids: {
                            value: {};
                        };
                    };
                };
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
    feature_flags_user_lists: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                search: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: number;
                iid: number;
                name: string;
                user_xids: string;
                project_id: number;
                created_at: string;
                upstringd_at: string;
                path: string;
                edit_path: string;
            }, {
                id: number;
                iid: number;
                name: string;
                user_xids: string;
                project_id: number;
                created_at: string;
                upstringd_at: string;
                path: string;
                edit_path: string;
            }];
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                name: string;
                user_xids: string;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                iid: number;
                name: string;
                user_xids: string;
                project_id: number;
                created_at: string;
                upstringd_at: string;
                path: string;
                edit_path: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                iid: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                name: string;
                user_xids: string;
                project_id: number;
                created_at: string;
                upstringd_at: string;
                path: string;
                edit_path: string;
            };
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                iid: string;
            };
            data: {
                name: string;
                user_xids: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                iid: number;
                name: string;
                user_xids: string;
                project_id: number;
                created_at: string;
                upstringd_at: string;
                path: string;
                edit_path: string;
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 404;
        }>;
        delete: ({ params }: {
            params: {
                id: string;
                iid: string;
            };
        }, options?: {}) => Promise<{
            code: 204;
        } | {
            code: 401;
        } | {
            code: 404;
        } | {
            code: 409;
        }>;
    };
    debian_distributions: {
        post: ({ params, data }: {
            params: {
                id: string;
            };
            data: {
                codename: string;
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: number;
                components: [string, string];
                architectures: [string, string];
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                codename: string;
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: number;
                components: [string, string];
                architectures: [string, string];
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                page: string;
                per_page: string;
                codename: string;
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: string;
                components: string;
                architectures: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                codename: string;
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: number;
                components: [string, string];
                architectures: [string, string];
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        getOne: ({ params }: {
            params: {
                id: string;
                codename: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                codename: string;
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: number;
                components: [string, string];
                architectures: [string, string];
            };
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        put: ({ params, data }: {
            params: {
                id: string;
                codename: string;
            };
            data: {
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: number;
                components: [string, string];
                architectures: [string, string];
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: number;
                codename: string;
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: number;
                components: [string, string];
                architectures: [string, string];
            };
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        delete: ({ params, query }: {
            params: {
                id: string;
                codename: string;
            };
            query?: {
                suite: string;
                origin: string;
                label: string;
                version: string;
                description: string;
                valid_time_duration_seconds: string;
                components: string;
                architectures: string;
            };
        }, options?: {}) => Promise<{
            code: 202;
        } | {
            code: 400;
        } | {
            code: 401;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
        "key.asc": {
            get: ({ params }: {
                params: {
                    id: string;
                    codename: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
                data: {
                    id: number;
                    codename: string;
                    suite: string;
                    origin: string;
                    label: string;
                    version: string;
                    description: string;
                    valid_time_duration_seconds: number;
                    components: [string, string];
                    architectures: [string, string];
                };
            } | {
                code: 401;
            } | {
                code: 403;
            } | {
                code: 404;
            }>;
        };
    };
    audit_events: {
        get: ({ params, query }: {
            params: {
                id: string;
            };
            query?: {
                created_after: string;
                created_before: string;
                page: string;
                per_page: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: [{
                id: string;
                author_id: string;
                entity_id: string;
                entity_type: string;
                details: string;
                created_at: string;
            }, {
                id: string;
                author_id: string;
                entity_id: string;
                entity_type: string;
                details: string;
                created_at: string;
            }];
        }>;
        getOne: ({ params }: {
            params: {
                audit_event_id: string;
                id: string;
            };
        }, options?: {}) => Promise<{
            code: 200;
            data: {
                id: string;
                author_id: string;
                entity_id: string;
                entity_type: string;
                details: string;
                created_at: string;
            };
        }>;
    };
    terraform: {
        state: {
            getOne: ({ params, query }: {
                params: {
                    id: string;
                    name: string;
                };
                query?: {
                    ID: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 204;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 422;
            }>;
            post: ({ params }: {
                params: {
                    id: string;
                    name: string;
                };
            }, options?: {}) => Promise<{
                code: 200;
            } | {
                code: 204;
            } | {
                code: 403;
            } | {
                code: 413;
            } | {
                code: 422;
            }>;
            delete: ({ params }: {
                params: {
                    id: string;
                    name: string;
                };
            }, options?: {}) => Promise<{
                code: 204;
            } | {
                code: 403;
            } | {
                code: 404;
            } | {
                code: 422;
            }>;
            lock: {
                post: ({ params, data }: {
                    params: {
                        id: string;
                        name: string;
                    };
                    data: {
                        ID: string;
                        Operation: string;
                        Info: string;
                        Who: string;
                        Version: string;
                        Created: string;
                        Path: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                } | {
                    code: 403;
                } | {
                    code: 404;
                } | {
                    code: 409;
                } | {
                    code: 422;
                }>;
                delete: ({ params, query }: {
                    params: {
                        id: string;
                        name: string;
                    };
                    query?: {
                        ID: string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                } | {
                    code: 403;
                } | {
                    code: 404;
                } | {
                    code: 409;
                } | {
                    code: 422;
                }>;
            };
            versions: {
                getOne: ({ params }: {
                    params: {
                        id: string;
                        name: string;
                        serial: string;
                    };
                }, options?: {}) => Promise<{
                    code: 200;
                    data: ArrayBuffer;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
                delete: ({ params }: {
                    params: {
                        id: string;
                        name: string;
                        serial: string;
                    };
                }, options?: {}) => Promise<{
                    code: 204;
                } | {
                    code: 403;
                } | {
                    code: 404;
                }>;
            };
        };
    };
    user: {
        post: ({ params, data }: {
            params: {
                user_id: string;
            };
            data: {
                name: string;
                path: string;
                default_branch: string;
                description: string;
                build_git_strategy: string;
                build_timeout: number;
                auto_cancel_pending_pipelines: string;
                ci_config_path: string;
                service_desk_enabled: boolean;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                show_default_award_emojis: boolean;
                show_diff_preview_in_email: boolean;
                warn_about_potentially_unwanted_characters: boolean;
                enforce_auth_checks_on_uploads: boolean;
                shared_runners_enabled: boolean;
                group_runners_enabled: boolean;
                resolve_outstringd_diff_discussions: boolean;
                remove_source_branch_after_merge: boolean;
                container_registry_enabled: boolean;
                container_expiration_policy_attributes: {
                    cadence: string;
                    keep_n: number;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    enabled: boolean;
                };
                lfs_enabled: boolean;
                visibility: string;
                public_builds: boolean;
                public_jobs: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                tag_list: [string, string];
                topics: [string, string];
                avatar: ArrayBuffer;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                initialize_with_readme: boolean;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                autoclose_referenced_issues: boolean;
                repository_storage: string;
                packages_enabled: boolean;
                squash_option: string;
                mr_default_target_self: boolean;
                only_allow_merge_if_all_status_checks_passed: boolean;
                approvals_before_merge: number;
                mirror: boolean;
                mirror_trigger_builds: boolean;
                external_authorization_classification_label: string;
                requirements_access_level: string;
                prevent_merge_without_jira_issue: boolean;
                repository_object_format: string;
                use_custom_template: boolean;
                group_with_project_templates_id: number;
                namespace_id: number;
                import_url: string;
                template_name: string;
                template_project_id: number;
            };
        }, options?: {}) => Promise<{
            code: 201;
            data: {
                id: number;
                description: string;
                name: string;
                name_with_namespace: string;
                path: string;
                path_with_namespace: string;
                created_at: string;
                default_branch: string;
                tag_list: [string, string];
                topics: [string, string];
                ssh_url_to_repo: string;
                http_url_to_repo: string;
                web_url: string;
                readme_url: string;
                forks_count: number;
                license_url: string;
                license: {
                    key: string;
                    name: string;
                    nickname: string;
                    html_url: string;
                    source_url: string;
                };
                avatar_url: string;
                star_count: number;
                last_activity_at: string;
                namespace: {
                    id: number;
                    name: string;
                    path: string;
                    kind: string;
                    full_path: string;
                    parent_id: number;
                    avatar_url: string;
                    web_url: string;
                };
                custom_attributes: {
                    key: string;
                    value: string;
                };
                repository_storage: string;
                container_registry_image_prefix: string;
                _links: {
                    self: string;
                    issues: string;
                    merge_requests: string;
                    repo_branches: string;
                    labels: string;
                    events: string;
                    members: string;
                    cluster_agents: string;
                };
                packages_enabled: boolean;
                empty_repo: boolean;
                archived: boolean;
                visibility: string;
                owner: {
                    id: number;
                    username: string;
                    name: string;
                    state: string;
                    locked: boolean;
                    avatar_url: string;
                    avatar_path: string;
                    custom_attributes: [{
                        value: {};
                    }, {
                        value: {};
                    }];
                    web_url: string;
                };
                resolve_outstringd_diff_discussions: boolean;
                container_expiration_policy: {
                    cadence: string;
                    enabled: string;
                    keep_n: string;
                    older_than: string;
                    name_regex: string;
                    name_regex_keep: string;
                    next_run_at: string;
                };
                repository_object_format: string;
                issues_enabled: boolean;
                merge_requests_enabled: boolean;
                wiki_enabled: boolean;
                jobs_enabled: boolean;
                snippets_enabled: boolean;
                container_registry_enabled: boolean;
                service_desk_enabled: boolean;
                service_desk_address: string;
                can_create_merge_request_in: boolean;
                issues_access_level: string;
                repository_access_level: string;
                merge_requests_access_level: string;
                forking_access_level: string;
                wiki_access_level: string;
                builds_access_level: string;
                snippets_access_level: string;
                pages_access_level: string;
                analytics_access_level: string;
                container_registry_access_level: string;
                security_and_compliance_access_level: string;
                releases_access_level: string;
                environments_access_level: string;
                feature_flags_access_level: string;
                infrastructure_access_level: string;
                monitor_access_level: string;
                model_experiments_access_level: string;
                model_registry_access_level: string;
                emails_disabled: boolean;
                emails_enabled: boolean;
                shared_runners_enabled: boolean;
                lfs_enabled: boolean;
                creator_id: number;
                forked_from_project: {
                    id: number;
                    description: string;
                    name: string;
                    name_with_namespace: string;
                    path: string;
                    path_with_namespace: string;
                    created_at: string;
                    default_branch: string;
                    tag_list: [string, string];
                    topics: [string, string];
                    ssh_url_to_repo: string;
                    http_url_to_repo: string;
                    web_url: string;
                    readme_url: string;
                    forks_count: number;
                    license_url: string;
                    license: {
                        key: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        nickname: {
                            value: {};
                        };
                        html_url: {
                            value: {};
                        };
                        source_url: {
                            value: {};
                        };
                    };
                    avatar_url: string;
                    star_count: number;
                    last_activity_at: string;
                    namespace: {
                        id: {
                            value: {};
                        };
                        name: {
                            value: {};
                        };
                        path: {
                            value: {};
                        };
                        kind: {
                            value: {};
                        };
                        full_path: {
                            value: {};
                        };
                        parent_id: {
                            value: {};
                        };
                        avatar_url: {
                            value: {};
                        };
                        web_url: {
                            value: {};
                        };
                    };
                    custom_attributes: {
                        key: {
                            value: {};
                        };
                        value: {
                            value: {};
                        };
                    };
                    repository_storage: string;
                };
                mr_default_target_self: boolean;
                import_url: string;
                import_type: string;
                import_status: string;
                import_error: string;
                open_issues_count: number;
                description_html: string;
                upstringd_at: string;
                ci_default_git_depth: number;
                ci_forward_deployment_enabled: boolean;
                ci_forward_deployment_rollback_allowed: boolean;
                ci_job_token_scope_enabled: boolean;
                ci_separated_caches: boolean;
                ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
                build_git_strategy: string;
                keep_latest_artifact: boolean;
                restrict_user_defined_variables: boolean;
                ci_pipeline_variables_minimum_override_role: string;
                runners_token: string;
                runner_token_expiration_interval: number;
                group_runners_enabled: boolean;
                auto_cancel_pending_pipelines: string;
                build_timeout: number;
                auto_devops_enabled: boolean;
                auto_devops_deploy_strategy: string;
                ci_config_path: string;
                public_jobs: boolean;
                shared_with_groups: [string, string];
                only_allow_merge_if_pipeline_succeeds: boolean;
                allow_merge_on_skipped_pipeline: boolean;
                request_access_enabled: boolean;
                only_allow_merge_if_all_discussions_are_resolved: boolean;
                remove_source_branch_after_merge: boolean;
                printing_merge_request_link_enabled: boolean;
                merge_method: string;
                squash_option: string;
                enforce_auth_checks_on_uploads: boolean;
                suggestion_commit_message: string;
                merge_commit_template: string;
                squash_commit_template: string;
                issue_branch_template: string;
                statistics: {
                    commit_count: string;
                    storage_size: string;
                    repository_size: string;
                    wiki_size: string;
                    lfs_objects_size: string;
                    job_artifacts_size: string;
                    pipeline_artifacts_size: string;
                    packages_size: string;
                    snippets_size: string;
                    uploads_size: string;
                    container_registry_size: string;
                };
                warn_about_potentially_unwanted_characters: boolean;
                autoclose_referenced_issues: boolean;
                approvals_before_merge: string;
                mirror: string;
                mirror_user_id: string;
                mirror_trigger_builds: string;
                only_mirror_protected_branches: string;
                mirror_overwrites_diverged_branches: string;
                external_authorization_classification_label: string;
                marked_for_deletion_at: string;
                marked_for_deletion_on: string;
                requirements_enabled: string;
                requirements_access_level: string;
                security_and_compliance_enabled: string;
                compliance_frameworks: string;
                issues_template: string;
                merge_requests_template: string;
                ci_restrict_pipeline_cancellation_role: string;
                merge_pipelines_enabled: string;
                merge_trains_enabled: string;
                merge_trains_skip_train_allowed: string;
                only_allow_merge_if_all_status_checks_passed: string;
                allow_pipeline_trigger_approve_deployment: boolean;
                prevent_merge_without_jira_issue: string;
            };
        } | {
            code: 400;
        } | {
            code: 403;
        } | {
            code: 404;
        }>;
    };
};

export default (client: Client, handler: Handler): Projects => ({
  get: ({query}: {query?:{order_by:string,sort:string,archived:string,visibility:string,search:string,search_namespaces:string,owned:string,starred:string,imported:string,membership:string,with_issues_enabled:string,with_merge_requests_enabled:string,with_programming_language:string,min_access_level:string,id_after:string,id_before:string,last_activity_after:string,last_activity_before:string,repository_storage:string,topic:string,topic_id:string,updated_before:string,updated_after:string,include_pending_delete:string,wiki_checksum_failed:string,repository_checksum_failed:string,include_hidden:string,page:string,per_page:string,simple:string,statistics:string,with_custom_attributes:string}}, options?: {}): Promise<{code:200,data:[{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string}]}|{code:400}> => handler.apply({method:'get',url:'api/v4/projects',headers:{Accept:'application/json'},variable:[],query:[{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'archived',type:'string'},{name:'visibility',type:'string'},{name:'search',type:'string'},{name:'search_namespaces',type:'string'},{name:'owned',type:'string'},{name:'starred',type:'string'},{name:'imported',type:'string'},{name:'membership',type:'string'},{name:'with_issues_enabled',type:'string'},{name:'with_merge_requests_enabled',type:'string'},{name:'with_programming_language',type:'string'},{name:'min_access_level',type:'string'},{name:'id_after',type:'string'},{name:'id_before',type:'string'},{name:'last_activity_after',type:'string'},{name:'last_activity_before',type:'string'},{name:'repository_storage',type:'string'},{name:'topic',type:'string'},{name:'topic_id',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'},{name:'include_pending_delete',type:'string'},{name:'wiki_checksum_failed',type:'string'},{name:'repository_checksum_failed',type:'string'},{name:'include_hidden',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'simple',type:'string'},{name:'statistics',type:'string'},{name:'with_custom_attributes',type:'string'}]}, [client, {query}, options]),
  post: ({data}: {data:{name:string,path:string,default_branch:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outstringd_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:ArrayBuffer,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,repository_object_format:string,use_custom_template:boolean,group_with_project_templates_id:number,namespace_id:number,import_url:string,template_name:string,template_project_id:number}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[],data:{mode:'raw',raw:{name:'string',path:'string',default_branch:'string',description:'string',build_git_strategy:'string',build_timeout:'number',auto_cancel_pending_pipelines:'string',ci_config_path:'string',service_desk_enabled:'boolean',issues_enabled:'boolean',merge_requests_enabled:'boolean',wiki_enabled:'boolean',jobs_enabled:'boolean',snippets_enabled:'boolean',issues_access_level:'string',repository_access_level:'string',merge_requests_access_level:'string',forking_access_level:'string',wiki_access_level:'string',builds_access_level:'string',snippets_access_level:'string',pages_access_level:'string',analytics_access_level:'string',container_registry_access_level:'string',security_and_compliance_access_level:'string',releases_access_level:'string',environments_access_level:'string',feature_flags_access_level:'string',infrastructure_access_level:'string',monitor_access_level:'string',model_experiments_access_level:'string',model_registry_access_level:'string',emails_disabled:'boolean',emails_enabled:'boolean',show_default_award_emojis:'boolean',show_diff_preview_in_email:'boolean',warn_about_potentially_unwanted_characters:'boolean',enforce_auth_checks_on_uploads:'boolean',shared_runners_enabled:'boolean',group_runners_enabled:'boolean',resolve_outstringd_diff_discussions:'boolean',remove_source_branch_after_merge:'boolean',container_registry_enabled:'boolean',container_expiration_policy_attributes:{cadence:'string',keep_n:'number',older_than:'string',name_regex:'string',name_regex_keep:'string',enabled:'boolean'},lfs_enabled:'boolean',visibility:'string',public_builds:'boolean',public_jobs:'boolean',request_access_enabled:'boolean',only_allow_merge_if_pipeline_succeeds:'boolean',allow_merge_on_skipped_pipeline:'boolean',only_allow_merge_if_all_discussions_are_resolved:'boolean',tag_list:['string','string'],topics:['string','string'],avatar:'ArrayBuffer',printing_merge_request_link_enabled:'boolean',merge_method:'string',suggestion_commit_message:'string',merge_commit_template:'string',squash_commit_template:'string',issue_branch_template:'string',initialize_with_readme:'boolean',auto_devops_enabled:'boolean',auto_devops_deploy_strategy:'string',autoclose_referenced_issues:'boolean',repository_storage:'string',packages_enabled:'boolean',squash_option:'string',mr_default_target_self:'boolean',only_allow_merge_if_all_status_checks_passed:'boolean',approvals_before_merge:'number',mirror:'boolean',mirror_trigger_builds:'boolean',external_authorization_classification_label:'string',requirements_access_level:'string',prevent_merge_without_jira_issue:'boolean',repository_object_format:'string',use_custom_template:'boolean',group_with_project_templates_id:'number',namespace_id:'number',import_url:'string',template_name:'string',template_project_id:'number'},options:{raw:{language:'json'}}}}, [client, {data}, options]),
  getOne: ({params,query}: {params:{id:string},query?:{statistics:string,with_custom_attributes:string,license:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string,permissions:{project_access:{access_level:string,notification_level:string},group_access:{access_level:string,notification_level:string}}}}> => handler.apply({method:'get',url:'api/v4/projects/:id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'statistics',type:'string'},{name:'with_custom_attributes',type:'string'},{name:'license',type:'string'}]}, [client, { params, query}, options]),
  put: ({params,data}: {params:{id:string},data:{name:string,default_branch:string,path:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outstringd_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:ArrayBuffer,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,ci_default_git_depth:number,keep_latest_artifact:boolean,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,ci_separated_caches:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,allow_pipeline_trigger_approve_deployment:boolean,mirror_user_id:number,only_mirror_protected_branches:boolean,mirror_branch_regex:string,mirror_overwrites_diverged_branches:boolean,import_url:string,fallback_approvals_required:number,issues_template:string,merge_requests_template:string,merge_pipelines_enabled:boolean,merge_trains_enabled:boolean,merge_trains_skip_train_allowed:boolean,ci_restrict_pipeline_cancellation_role:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:400}|{code:403}> => handler.apply({method:'put',url:'api/v4/projects/:id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',default_branch:'string',path:'string',description:'string',build_git_strategy:'string',build_timeout:'number',auto_cancel_pending_pipelines:'string',ci_config_path:'string',service_desk_enabled:'boolean',issues_enabled:'boolean',merge_requests_enabled:'boolean',wiki_enabled:'boolean',jobs_enabled:'boolean',snippets_enabled:'boolean',issues_access_level:'string',repository_access_level:'string',merge_requests_access_level:'string',forking_access_level:'string',wiki_access_level:'string',builds_access_level:'string',snippets_access_level:'string',pages_access_level:'string',analytics_access_level:'string',container_registry_access_level:'string',security_and_compliance_access_level:'string',releases_access_level:'string',environments_access_level:'string',feature_flags_access_level:'string',infrastructure_access_level:'string',monitor_access_level:'string',model_experiments_access_level:'string',model_registry_access_level:'string',emails_disabled:'boolean',emails_enabled:'boolean',show_default_award_emojis:'boolean',show_diff_preview_in_email:'boolean',warn_about_potentially_unwanted_characters:'boolean',enforce_auth_checks_on_uploads:'boolean',shared_runners_enabled:'boolean',group_runners_enabled:'boolean',resolve_outstringd_diff_discussions:'boolean',remove_source_branch_after_merge:'boolean',container_registry_enabled:'boolean',container_expiration_policy_attributes:{cadence:'string',keep_n:'number',older_than:'string',name_regex:'string',name_regex_keep:'string',enabled:'boolean'},lfs_enabled:'boolean',visibility:'string',public_builds:'boolean',public_jobs:'boolean',request_access_enabled:'boolean',only_allow_merge_if_pipeline_succeeds:'boolean',allow_merge_on_skipped_pipeline:'boolean',only_allow_merge_if_all_discussions_are_resolved:'boolean',tag_list:['string','string'],topics:['string','string'],avatar:'ArrayBuffer',printing_merge_request_link_enabled:'boolean',merge_method:'string',suggestion_commit_message:'string',merge_commit_template:'string',squash_commit_template:'string',issue_branch_template:'string',initialize_with_readme:'boolean',auto_devops_enabled:'boolean',auto_devops_deploy_strategy:'string',autoclose_referenced_issues:'boolean',repository_storage:'string',packages_enabled:'boolean',squash_option:'string',mr_default_target_self:'boolean',only_allow_merge_if_all_status_checks_passed:'boolean',approvals_before_merge:'number',mirror:'boolean',mirror_trigger_builds:'boolean',external_authorization_classification_label:'string',requirements_access_level:'string',prevent_merge_without_jira_issue:'boolean',ci_default_git_depth:'number',keep_latest_artifact:'boolean',ci_forward_deployment_enabled:'boolean',ci_forward_deployment_rollback_allowed:'boolean',ci_allow_fork_pipelines_to_run_in_parent_project:'boolean',ci_separated_caches:'boolean',restrict_user_defined_variables:'boolean',ci_pipeline_variables_minimum_override_role:'string',allow_pipeline_trigger_approve_deployment:'boolean',mirror_user_id:'number',only_mirror_protected_branches:'boolean',mirror_branch_regex:'string',mirror_overwrites_diverged_branches:'boolean',import_url:'string',fallback_approvals_required:'number',issues_template:'string',merge_requests_template:'string',merge_pipelines_enabled:'boolean',merge_trains_enabled:'boolean',merge_trains_skip_train_allowed:'boolean',ci_restrict_pipeline_cancellation_role:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
  delete: ({params}: {params:{id:string}}, options?: {}): Promise<{code:202}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id',variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
  "access_requests": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/access_requests',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/access_requests',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,user_id:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/access_requests/:user_id',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}]}, [client, { params}, options]),
    "approve": {
      put: ({params,data}: {params:{id:string,user_id:string},data:{access_level:30}}, options?: {}): Promise<{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}> => handler.apply({method:'put',url:'api/v4/projects/:id/access_requests/:user_id/approve',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],data:{mode:'raw',raw:{access_level:30},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "badges": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,name:string}}, options?: {}): Promise<{code:200,data:[{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string},{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/badges',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'name',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{link_url:string,image_url:string,name:string}}, options?: {}): Promise<{code:201,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/badges',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{link_url:'string',image_url:'string',name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "render": {
      get: ({params,query}: {params:{id:string},query?:{link_url:string,image_url:string}}, options?: {}): Promise<{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/badges/render',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'link_url',type:'string'},{name:'image_url',type:'string'}]}, [client, { params, query}, options])
    },
    getOne: ({params}: {params:{id:string,badge_id:string}}, options?: {}): Promise<{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/badges/:badge_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'badge_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,badge_id:string},data:{link_url:string,image_url:string,name:string}}, options?: {}): Promise<{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}> => handler.apply({method:'put',url:'api/v4/projects/:id/badges/:badge_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'badge_id',type:'string'}],data:{mode:'raw',raw:{link_url:'string',image_url:'string',name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,badge_id:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/badges/:badge_id',variable:[{name:'id',type:'string'},{name:'badge_id',type:'string'}]}, [client, { params}, options])
  },
  "repository": {
    "branches": {
      get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,search:string,regex:string,sort:string,page_token:string}}, options?: {}): Promise<{code:200,data:[{name:string,commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string},{name:string,commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/branches',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'search',type:'string'},{name:'regex',type:'string'},{name:'sort',type:'string'},{name:'page_token',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{branch:string,ref:string}}, options?: {}): Promise<{code:201,data:{name:string,commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}}|{code:400}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/branches',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{branch:'string',ref:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{id:string,branch:string}}, options?: {}): Promise<{code:204}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/branches/:branch',variable:[{name:'id',type:'string'},{name:'branch',type:'string'}]}, [client, { params}, options]),
      head: ({params}: {params:{id:string,branch:string}}, options?: {}): Promise<{code:204}|{code:404}> => handler.apply({method:'head',url:'api/v4/projects/:id/repository/branches/:branch',variable:[{name:'id',type:'string'},{name:'branch',type:'string'}]}, [client, { params}, options]),
      getOne: ({params}: {params:{id:string,branch:string}}, options?: {}): Promise<{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/branches/:branch',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'branch',type:'string'}]}, [client, { params}, options]),
      "protect": {
        put: ({params,data}: {params:{id:string,branch:string},data:{developers_can_push:boolean,developers_can_merge:boolean}}, options?: {}): Promise<{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/branches/:branch/protect',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'branch',type:'string'}],data:{mode:'raw',raw:{developers_can_push:'boolean',developers_can_merge:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      },
      "unprotect": {
        put: ({params}: {params:{id:string,branch:string}}, options?: {}): Promise<{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/branches/:branch/unprotect',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'branch',type:'string'}]}, [client, { params}, options])
      }
    },
    "merged_branches": {
      delete: ({params}: {params:{id:string}}, options?: {}): Promise<{code:202}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/merged_branches',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
    },
    "commits": {
      get: ({params,query}: {params:{id:string},query?:{ref_name:string,since:string,until:string,path:string,author:string,all:string,with_stats:string,first_parent:string,order:string,trailers:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'ref_name',type:'string'},{name:'since',type:'string'},{name:'until',type:'string'},{name:'path',type:'string'},{name:'author',type:'string'},{name:'all',type:'string'},{name:'with_stats',type:'string'},{name:'first_parent',type:'string'},{name:'order',type:'string'},{name:'trailers',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{branch:string,commit_message:string,actions:[{action:string,file_path:string,previous_path:string,content:string,execute_filemode:boolean,encoding:string,last_commit_id:string},{action:string,file_path:string,previous_path:string,content:string,execute_filemode:boolean,encoding:string,last_commit_id:string}],start_branch:string,start_sha:string,start_project:number,author_email:string,author_name:string,stats:true,force:false}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{branch:'string',commit_message:'string',actions:[{action:'string',file_path:'string',previous_path:'string',content:'string',execute_filemode:'boolean',encoding:'string',last_commit_id:'string'},{action:'string',file_path:'string',previous_path:'string',content:'string',execute_filemode:'boolean',encoding:'string',last_commit_id:'string'}],start_branch:'string',start_sha:'string',start_project:'number',author_email:'string',author_name:'string',stats:true,force:false},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      getOne: ({params,query}: {params:{id:string,sha:string},query?:{stats:string}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string}}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],query:[{name:'stats',type:'string'}]}, [client, { params, query}, options]),
      "diff": {
        get: ({params,query}: {params:{id:string,sha:string},query?:{page:string,per_page:string,unidiff:string}}, options?: {}): Promise<{code:200,data:[{diff:string,string_path:string,old_path:string,a_mode:string,b_mode:string,string_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},{diff:string,string_path:string,old_path:string,a_mode:string,b_mode:string,string_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/diff',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'unidiff',type:'string'}]}, [client, { params, query}, options])
      },
      "comments": {
        get: ({params,query}: {params:{id:string,sha:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{note:string,path:string,line:number,line_type:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string},{note:string,path:string,line:number,line_type:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/comments',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
        post: ({params,data}: {params:{id:string,sha:string},data:{note:string,line:number,line_type:string,path:string}}, options?: {}): Promise<{code:200,data:{note:string,path:string,line:number,line_type:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string}}|{code:400}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits/:sha/comments',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],data:{mode:'raw',raw:{note:'string',line:'number',line_type:'string',path:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      },
      "sequence": {
        get: ({params,query}: {params:{id:string,sha:string},query?:{first_parent:string}}, options?: {}): Promise<{code:200,data:{count:number}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/sequence',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],query:[{name:'first_parent',type:'string'}]}, [client, { params, query}, options])
      },
      "cherry_pick": {
        post: ({params,data}: {params:{id:string,sha:string},data:{branch:string,dry_run:false,message:string}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}}|{code:400}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits/:sha/cherry_pick',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],data:{mode:'raw',raw:{branch:'string',dry_run:false,message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      },
      "revert": {
        post: ({params,data}: {params:{id:string,sha:string},data:{branch:string,dry_run:false}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}}|{code:400}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/commits/:sha/revert',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],data:{mode:'raw',raw:{branch:'string',dry_run:false},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      },
      "refs": {
        get: ({params,query}: {params:{id:string,sha:string},query?:{type:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{type:string,name:string},{type:string,name:string}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/refs',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],query:[{name:'type',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
      },
      "merge_requests": {
        get: ({params,query}: {params:{id:string,sha:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merge_user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merged_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},reviewers:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:any,relative:any,full:any},web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merge_user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merged_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},reviewers:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:any,relative:any,full:any},web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/merge_requests',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
      },
      "signature": {
        get: ({params}: {params:{id:string,sha:string}}, options?: {}): Promise<{code:200,data:{signature_type:string,signature:string,commit_source:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/signature',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}]}, [client, { params}, options])
      },
      "statuses": {
        get: ({params,query}: {params:{id:string,sha:string},query?:{ref:string,stage:string,name:string,all:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:string,started_at:string,finished_at:string,allow_failure:boolean,coverage:number,pipeline_id:number,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}},{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:string,started_at:string,finished_at:string,allow_failure:boolean,coverage:number,pipeline_id:number,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/commits/:sha/statuses',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],query:[{name:'ref',type:'string'},{name:'stage',type:'string'},{name:'name',type:'string'},{name:'all',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
      }
    },
    "files": {
      head: ({params,query}: {params:{id:string,file_path:string},query?:{ref:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'head',url:'api/v4/projects/:id/repository/files/:file_path',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],query:[{name:'ref',type:'string'}]}, [client, { params, query}, options]),
      getOne: ({params,query}: {params:{id:string,file_path:string},query?:{ref:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/files/:file_path',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],query:[{name:'ref',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string,file_path:string},data:{branch:string,commit_message:string,content:string,start_branch:string,author_email:string,author_name:string,encoding:string,last_commit_id:string,execute_filemode:boolean}}, options?: {}): Promise<{code:201}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/files/:file_path',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],data:{mode:'raw',raw:{branch:'string',commit_message:'string',content:'string',start_branch:'string',author_email:'string',author_name:'string',encoding:'string',last_commit_id:'string',execute_filemode:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      put: ({params,data}: {params:{id:string,file_path:string},data:{branch:string,commit_message:string,content:string,start_branch:string,author_email:string,author_name:string,encoding:string,last_commit_id:string,execute_filemode:boolean}}, options?: {}): Promise<{code:200}> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/files/:file_path',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],data:{mode:'raw',raw:{branch:'string',commit_message:'string',content:'string',start_branch:'string',author_email:'string',author_name:'string',encoding:'string',last_commit_id:'string',execute_filemode:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params,query}: {params:{id:string,file_path:string},query?:{branch:string,commit_message:string,start_branch:string,author_email:string,author_name:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/files/:file_path',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],query:[{name:'branch',type:'string'},{name:'commit_message',type:'string'},{name:'start_branch',type:'string'},{name:'author_email',type:'string'},{name:'author_name',type:'string'}]}, [client, { params, query}, options]),
      "blame": {
        head: ({params,query}: {params:{id:string,file_path:string},query?:{ref:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'head',url:'api/v4/projects/:id/repository/files/:file_path/blame',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],query:[{name:'ref',type:'string'}]}, [client, { params, query}, options]),
        get: ({params,query}: {params:{id:string,file_path:string},query?:{ref:string,'range[start]':string,'range[end]':string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/files/:file_path/blame',variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],query:[{name:'ref',type:'string'},{name:'range[start]',type:'string'},{name:'range[end]',type:'string'}]}, [client, { params, query}, options])
      },
      "raw": {
        get: ({params,query}: {params:{id:string,file_path:string},query?:{ref:string,lfs:string}}, options?: {}): Promise<{code:200,data:ArrayBuffer}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/files/:file_path/raw',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'file_path',type:'string'}],query:[{name:'ref',type:'string'},{name:'lfs',type:'string'}]}, [client, { params, query}, options])
      }
    },
    "tree": {
      get: ({params,query}: {params:{id:string},query?:{ref:string,path:string,recursive:string,page:string,per_page:string,pagination:string,page_token:string}}, options?: {}): Promise<{code:200,data:{id:string,name:string,type:string,path:string,mode:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tree',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'ref',type:'string'},{name:'path',type:'string'},{name:'recursive',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'pagination',type:'string'},{name:'page_token',type:'string'}]}, [client, { params, query}, options])
    },
    "blobs": {
      getOne: ({params}: {params:{id:string,sha:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/blobs/:sha',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}]}, [client, { params}, options]),
      "raw": {
        get: ({params}: {params:{id:string,sha:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/blobs/:sha/raw',variable:[{name:'id',type:'string'},{name:'sha',type:'string'}]}, [client, { params}, options])
      }
    },
    "archive": {
      get: ({params,query}: {params:{id:string},query?:{sha:string,format:string,path:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/archive',variable:[{name:'id',type:'string'}],query:[{name:'sha',type:'string'},{name:'format',type:'string'},{name:'path',type:'string'}]}, [client, { params, query}, options])
    },
    "compare": {
      get: ({params,query}: {params:{id:string},query?:{from:string,to:string,from_project_id:string,straight:string,unidiff:string}}, options?: {}): Promise<{code:200,data:{commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},commits:[{id:string,short_id:string,created_at:string,parent_ids:[any,any],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},{id:string,short_id:string,created_at:string,parent_ids:[any,any],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}],diffs:[{diff:string,string_path:string,old_path:string,a_mode:string,b_mode:string,string_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},{diff:string,string_path:string,old_path:string,a_mode:string,b_mode:string,string_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}],compare_timeout:boolean,compare_same_ref:boolean,web_url:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/compare',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'from',type:'string'},{name:'to',type:'string'},{name:'from_project_id',type:'string'},{name:'straight',type:'string'},{name:'unidiff',type:'string'}]}, [client, { params, query}, options])
    },
    "contributors": {
      get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,order_by:string,sort:string}}, options?: {}): Promise<{code:200,data:{name:string,email:string,commits:number,additions:number,deletions:number}}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/contributors',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'}]}, [client, { params, query}, options])
    },
    "merge_base": {
      get: ({params,query}: {params:{id:string},query?:{refs:string}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/merge_base',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'refs',type:'string'}]}, [client, { params, query}, options])
    },
    "changelog": {
      get: ({params,query}: {params:{id:string},query?:{version:string,from:string,to:string,date:string,trailer:string,config_file:string}}, options?: {}): Promise<{code:200,data:{notes:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/changelog',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'version',type:'string'},{name:'from',type:'string'},{name:'to',type:'string'},{name:'date',type:'string'},{name:'trailer',type:'string'},{name:'config_file',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{version:string,from:string,to:string,string:string,trailer:string,branch:string,config_file:string,file:string,message:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/changelog',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{version:'string',from:'string',to:'string',string:'string',trailer:'Changelog',branch:'string',config_file:'string',file:'CHANGELOG.md',message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "submodules": {
      put: ({params,data}: {params:{id:string,submodule:string},data:{commit_sha:string,branch:string,commit_message:string}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string}}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/repository/submodules/:submodule',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'submodule',type:'string'}],data:{mode:'raw',raw:{commit_sha:'string',branch:'string',commit_message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "tags": {
      get: ({params,query}: {params:{id:string},query?:{sort:string,order_by:string,search:string,page_token:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{name:string,message:string,target:string,commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},release:{tag_name:any,description:any},protected:boolean,created_at:string},{name:string,message:string,target:string,commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},release:{tag_name:any,description:any},protected:boolean,created_at:string}]}|{code:403}|{code:404}|{code:422}|{code:503}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tags',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'sort',type:'string'},{name:'order_by',type:'string'},{name:'search',type:'string'},{name:'page_token',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{tag_name:string,ref:string,message:string}}, options?: {}): Promise<{code:201,data:{name:string,message:string,target:string,commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},release:{tag_name:string,description:string},protected:boolean,created_at:string}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository/tags',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{tag_name:'string',ref:'string',message:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      getOne: ({params}: {params:{id:string,tag_name:string}}, options?: {}): Promise<{code:200,data:{name:string,message:string,target:string,commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},release:{tag_name:string,description:string},protected:boolean,created_at:string}}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tags/:tag_name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}]}, [client, { params}, options]),
      delete: ({params}: {params:{id:string,tag_name:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}|{code:412}> => handler.apply({method:'delete',url:'api/v4/projects/:id/repository/tags/:tag_name',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}]}, [client, { params}, options]),
      "signature": {
        get: ({params}: {params:{id:string,tag_name:string}}, options?: {}): Promise<{code:200,data:{signature_type:string,signature:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository/tags/:tag_name/signature',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}]}, [client, { params}, options])
      }
    }
  },
  "jobs": {
    get: ({params,query}: {params:{id:string},query?:{scope:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:any,size:any},artifacts:[any,any],runner:{id:any,description:any,ip_address:any,active:any,paused:any,is_shared:any,runner_type:any,name:any,online:any,status:any},runner_manager:{id:any,system_id:any,version:any,revision:any,platform:any,architecture:any,created_at:any,contacted_at:any,ip_address:any,status:any},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:any,size:any},artifacts:[any,any],runner:{id:any,description:any,ip_address:any,active:any,paused:any,is_shared:any,runner_type:any,name:any,online:any,status:any},runner_manager:{id:any,system_id:any,version:any,revision:any,platform:any,architecture:any,created_at:any,contacted_at:any,ip_address:any,status:any},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    "artifacts": {
      "download": {
        get: ({params,query}: {params:{id:string,ref_name:string},query?:{job:string,job_token:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/artifacts/:ref_name/download',variable:[{name:'id',type:'string'},{name:'ref_name',type:'string'}],query:[{name:'job',type:'string'},{name:'job_token',type:'string'}]}, [client, { params, query}, options])
      },
      "raw": {
        get: ({params,query}: {params:{id:string,ref_name:string},query?:{job:string,artifact_path:string,job_token:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path',variable:[{name:'id',type:'string'},{name:'ref_name',type:'string'}],query:[{name:'job',type:'string'},{name:'artifact_path',type:'string'},{name:'job_token',type:'string'}]}, [client, { params, query}, options])
      },
      get: ({params,query}: {params:{id:string,job_id:string},query?:{artifact_path:string,job_token:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/:job_id/artifacts/*artifact_path',variable:[{name:'id',type:'string'},{name:'job_id',type:'string'}],query:[{name:'artifact_path',type:'string'},{name:'job_token',type:'string'}]}, [client, { params, query}, options]),
      delete: ({params}: {params:{id:string,job_id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:403}|{code:409}> => handler.apply({method:'delete',url:'api/v4/projects/:id/jobs/:job_id/artifacts',variable:[{name:'id',type:'string'},{name:'job_id',type:'string'}]}, [client, { params}, options]),
      "keep": {
        post: ({params}: {params:{id:string,job_id:string}}, options?: {}): Promise<{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/artifacts/keep',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'job_id',type:'string'}]}, [client, { params}, options])
      }
    },
    getOne: ({params}: {params:{job_id:string,id:string}}, options?: {}): Promise<{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/:job_id',headers:{Accept:'application/json'},variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options]),
    "trace": {
      get: ({params}: {params:{job_id:string,id:string}}, options?: {}): Promise<{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/jobs/:job_id/trace',headers:{Accept:'application/json'},variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
    },
    "cancel": {
      post: ({params}: {params:{job_id:string,id:string}}, options?: {}): Promise<{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/cancel',headers:{Accept:'application/json'},variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
    },
    "retry": {
      post: ({params}: {params:{job_id:string,id:string}}, options?: {}): Promise<{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/retry',headers:{Accept:'application/json'},variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
    },
    "erase": {
      post: ({params}: {params:{job_id:string,id:string}}, options?: {}): Promise<{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}}|{code:401}|{code:403}|{code:404}|{code:409}> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/erase',headers:{Accept:'application/json'},variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
    },
    "play": {
      post: ({params,data}: {params:{job_id:string,id:string},data:{job_variables_attributes:[{key:string,value:string},{key:string,value:string}]}}, options?: {}): Promise<{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/jobs/:job_id/play',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'job_id',type:'string'},{name:'id',type:'string'}],data:{mode:'raw',raw:{job_variables_attributes:[{key:'string',value:'string'},{key:'string',value:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "artifacts": {
    delete: ({params}: {params:{id:string}}, options?: {}): Promise<{code:202}|{code:401}|{code:403}|{code:409}> => handler.apply({method:'delete',url:'api/v4/projects/:id/artifacts',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "resource_groups": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,key:string,process_mode:string,created_at:string,upstringd_at:string},{id:number,key:string,process_mode:string,created_at:string,upstringd_at:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/resource_groups',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    getOne: ({params}: {params:{id:string,key:string}}, options?: {}): Promise<{code:200,data:{id:number,key:string,process_mode:string,created_at:string,upstringd_at:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/resource_groups/:key',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,key:string},data:{process_mode:string}}, options?: {}): Promise<{code:200,data:{id:number,key:string,process_mode:string,created_at:string,upstringd_at:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/resource_groups/:key',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key',type:'string'}],data:{mode:'raw',raw:{process_mode:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "upcoming_jobs": {
      get: ({params,query}: {params:{id:string,key:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/resource_groups/:key/upcoming_jobs',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
    }
  },
  "runners": {
    get: ({params,query}: {params:{id:string},query?:{scope:string,type:string,paused:string,status:string,tag_list:string,version_prefix:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}}|{code:400}|{code:403}> => handler.apply({method:'get',url:'api/v4/projects/:id/runners',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'scope',type:'string'},{name:'type',type:'string'},{name:'paused',type:'string'},{name:'status',type:'string'},{name:'tag_list',type:'string'},{name:'version_prefix',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{runner_id:number}}, options?: {}): Promise<{code:201,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/runners',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{runner_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,runner_id:string}}, options?: {}): Promise<{code:204,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}}|{code:400}|{code:403}|{code:404}|{code:412}> => handler.apply({method:'delete',url:'api/v4/projects/:id/runners/:runner_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'runner_id',type:'string'}]}, [client, { params}, options]),
    "reset_registration_token": {
      post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201,data:{token:string,token_expires_at:string}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/runners/reset_registration_token',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
    }
  },
  "secure_files": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:string,expires_at:string,metadata:object,file_extension:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/secure_files',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,file:ArrayBuffer}}, options?: {}): Promise<{code:201,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:string,expires_at:string,metadata:object,file_extension:string}}|{code:400}> => handler.apply({method:'post',url:'api/v4/projects/:id/secure_files',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',file:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,secure_file_id:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:string,expires_at:string,metadata:object,file_extension:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/secure_files/:secure_file_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'secure_file_id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,secure_file_id:string}}, options?: {}): Promise<{code:204}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/secure_files/:secure_file_id',variable:[{name:'id',type:'string'},{name:'secure_file_id',type:'string'}]}, [client, { params}, options]),
    "download": {
      get: ({params}: {params:{id:string,secure_file_id:string}}, options?: {}): Promise<{code:200}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/secure_files/:secure_file_id/download',variable:[{name:'id',type:'string'},{name:'secure_file_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "pipelines": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,scope:string,status:string,ref:string,sha:string,yaml_errors:string,username:string,updated_before:string,updated_after:string,order_by:string,sort:string,source:string,name:string}}, options?: {}): Promise<{code:200,data:[{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string}]}|{code:401}|{code:403}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'scope',type:'string'},{name:'status',type:'string'},{name:'ref',type:'string'},{name:'sha',type:'string'},{name:'yaml_errors',type:'string'},{name:'username',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'source',type:'string'},{name:'name',type:'string'}]}, [client, { params, query}, options]),
    "latest": {
      get: ({params,query}: {params:{id:string},query?:{ref:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/latest',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'ref',type:'string'}]}, [client, { params, query}, options])
    },
    getOne: ({params}: {params:{id:string,pipeline_id:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,pipeline_id:string}}, options?: {}): Promise<{code:204}|{code:403}> => handler.apply({method:'delete',url:'api/v4/projects/:id/pipelines/:pipeline_id',variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}]}, [client, { params}, options]),
    "jobs": {
      get: ({params,query}: {params:{id:string,pipeline_id:string},query?:{include_retried:string,scope:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:any,size:any},artifacts:[any,any],runner:{id:any,description:any,ip_address:any,active:any,paused:any,is_shared:any,runner_type:any,name:any,online:any,status:any},runner_manager:{id:any,system_id:any,version:any,revision:any,platform:any,architecture:any,created_at:any,contacted_at:any,ip_address:any,status:any},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:any,size:any},artifacts:[any,any],runner:{id:any,description:any,ip_address:any,active:any,paused:any,is_shared:any,runner_type:any,name:any,online:any,status:any},runner_manager:{id:any,system_id:any,version:any,revision:any,platform:any,architecture:any,created_at:any,contacted_at:any,ip_address:any,status:any},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/jobs',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],query:[{name:'include_retried',type:'string'},{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
    },
    "bridges": {
      get: ({params,query}: {params:{id:string,pipeline_id:string},query?:{scope:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},downstream_pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any}},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},downstream_pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any}}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/bridges',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],query:[{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
    },
    "variables": {
      get: ({params}: {params:{id:string,pipeline_id:string}}, options?: {}): Promise<{code:200,data:[{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string},{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/variables',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}]}, [client, { params}, options])
    },
    "test_report": {
      get: ({params}: {params:{id:string,pipeline_id:string}}, options?: {}): Promise<{code:200,data:{total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,test_suites:[{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[any,any]},{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[any,any]}]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/test_report',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}]}, [client, { params}, options])
    },
    "test_report_summary": {
      get: ({params}: {params:{id:string,pipeline_id:string}}, options?: {}): Promise<{code:200,data:{total:number,test_suites:{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[any,any],build_ids:[number,number]}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipelines/:pipeline_id/test_report_summary',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}]}, [client, { params}, options])
    },
    "metadata": {
      put: ({params,data}: {params:{id:string,pipeline_id:string},data:{name:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/pipelines/:pipeline_id/metadata',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}],data:{mode:'raw',raw:{name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "retry": {
      post: ({params}: {params:{id:string,pipeline_id:string}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/pipelines/:pipeline_id/retry',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}]}, [client, { params}, options])
    },
    "cancel": {
      post: ({params}: {params:{id:string,pipeline_id:string}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/pipelines/:pipeline_id/cancel',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "pipeline": {
    post: ({params,data}: {params:{id:string},data:{ref:string,variables:[{key:string,value:string,variable_type:string},{key:string,value:string,variable_type:string}]}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{ref:'string',variables:[{key:'string',value:'string',variable_type:'env_var'},{key:'string',value:'string',variable_type:'env_var'}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
  },
  "pipeline_schedules": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,scope:string}}, options?: {}): Promise<{code:200,data:[{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:string,active:boolean,created_at:string,upstringd_at:string,owner:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}},{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:string,active:boolean,created_at:string,upstringd_at:string,owner:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipeline_schedules',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'scope',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{description:string,ref:string,cron:string,cron_timezone:string,active:true}}, options?: {}): Promise<{code:201,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:string,active:boolean,created_at:string,upstringd_at:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{description:'string',ref:'string',cron:'string',cron_timezone:'UTC',active:true},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,pipeline_schedule_id:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:string,active:boolean,created_at:string,upstringd_at:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,pipeline_schedule_id:string},data:{description:string,ref:string,cron:string,cron_timezone:string,active:boolean}}, options?: {}): Promise<{code:200,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:string,active:boolean,created_at:string,upstringd_at:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],data:{mode:'raw',raw:{description:'string',ref:'string',cron:'string',cron_timezone:'string',active:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,pipeline_schedule_id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:403}|{code:404}|{code:412}> => handler.apply({method:'delete',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}]}, [client, { params}, options]),
    "pipelines": {
      get: ({params}: {params:{id:string,pipeline_schedule_id:string}}, options?: {}): Promise<{code:200,data:[{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/pipelines',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}]}, [client, { params}, options])
    },
    "take_ownership": {
      post: ({params}: {params:{id:string,pipeline_schedule_id:string}}, options?: {}): Promise<{code:201,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:string,active:boolean,created_at:string,upstringd_at:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/take_ownership',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}]}, [client, { params}, options])
    },
    "play": {
      post: ({params}: {params:{id:string,pipeline_schedule_id:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/play',variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}]}, [client, { params}, options])
    },
    "variables": {
      post: ({params,data}: {params:{id:string,pipeline_schedule_id:string},data:{key:string,value:string,variable_type:string}}, options?: {}): Promise<{code:201,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'}],data:{mode:'raw',raw:{key:'string',value:'string',variable_type:'env_var'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      put: ({params,data}: {params:{id:string,pipeline_schedule_id:string,key:string},data:{value:string,variable_type:string}}, options?: {}): Promise<{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'},{name:'key',type:'string'}],data:{mode:'raw',raw:{value:'string',variable_type:'env_var'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{id:string,pipeline_schedule_id:string,key:string}}, options?: {}): Promise<{code:202,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'pipeline_schedule_id',type:'string'},{name:'key',type:'string'}]}, [client, { params}, options])
    }
  },
  "ref": {
    "pipeline": {
      post: ({params,data}: {params:{id:string,ref:string},data:{token:string,variables:object}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/(ref/:ref/)trigger/pipeline',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'ref',type:'string'}],data:{mode:'raw',raw:{token:'string',variables:'object'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "triggers": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,token:string,description:string,created_at:string,upstringd_at:string,last_used:string,owner:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}},{id:number,token:string,description:string,created_at:string,upstringd_at:string,last_used:string,owner:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/triggers',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{description:string}}, options?: {}): Promise<{code:201,data:{id:number,token:string,description:string,created_at:string,upstringd_at:string,last_used:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/triggers',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,trigger_id:string}}, options?: {}): Promise<{code:200,data:{id:number,token:string,description:string,created_at:string,upstringd_at:string,last_used:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/triggers/:trigger_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'trigger_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,trigger_id:string},data:{description:string}}, options?: {}): Promise<{code:200,data:{id:number,token:string,description:string,created_at:string,upstringd_at:string,last_used:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/triggers/:trigger_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'trigger_id',type:'string'}],data:{mode:'raw',raw:{description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,trigger_id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:403}|{code:404}|{code:412}> => handler.apply({method:'delete',url:'api/v4/projects/:id/triggers/:trigger_id',variable:[{name:'id',type:'string'},{name:'trigger_id',type:'string'}]}, [client, { params}, options])
  },
  "variables": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/variables',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{key:string,value:string,protected:boolean,masked:boolean,masked_and_hidden:boolean,raw:boolean,variable_type:string,environment_scope:string,description:string}}, options?: {}): Promise<{code:201,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}|{code:400}> => handler.apply({method:'post',url:'api/v4/projects/:id/variables',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{key:'string',value:'string',protected:'boolean',masked:'boolean',masked_and_hidden:'boolean',raw:'boolean',variable_type:'string',environment_scope:'string',description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params,query}: {params:{id:string,key:string},query?:{'filter[environment_scope]':string}}, options?: {}): Promise<{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/variables/:key',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key',type:'string'}],query:[{name:'filter[environment_scope]',type:'string'}]}, [client, { params, query}, options]),
    put: ({params,data}: {params:{id:string,key:string},data:{value:string,protected:boolean,masked:boolean,environment_scope:string,raw:boolean,variable_type:string,filter:{environment_scope:string},description:string}}, options?: {}): Promise<{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/variables/:key',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key',type:'string'}],data:{mode:'raw',raw:{value:'string',protected:'boolean',masked:'boolean',environment_scope:'string',raw:'boolean',variable_type:'string',filter:{environment_scope:'string'},description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params,query}: {params:{id:string,key:string},query?:{'filter[environment_scope]':string}}, options?: {}): Promise<{code:204,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/variables/:key',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key',type:'string'}],query:[{name:'filter[environment_scope]',type:'string'}]}, [client, { params, query}, options])
  },
  "cluster_agents": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},created_at:string,created_by_user_id:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string}}, options?: {}): Promise<{code:201,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},created_at:string,created_by_user_id:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/cluster_agents',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,agent_id:string}}, options?: {}): Promise<{code:200,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},created_at:string,created_by_user_id:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents/:agent_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,agent_id:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/cluster_agents/:agent_id',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}]}, [client, { params}, options]),
    "tokens": {
      get: ({params,query}: {params:{id:string,agent_id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string,agent_id:string},data:{name:string,description:string}}, options?: {}): Promise<{code:201,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string,last_used_at:string,token:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'}],data:{mode:'raw',raw:{name:'string',description:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      getOne: ({params}: {params:{id:string,agent_id:string,token_id:string}}, options?: {}): Promise<{code:200,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string,last_used_at:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens/:token_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'},{name:'token_id',type:'string'}]}, [client, { params}, options]),
      delete: ({params}: {params:{id:string,agent_id:string,token_id:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/cluster_agents/:agent_id/tokens/:token_id',variable:[{name:'id',type:'string'},{name:'agent_id',type:'string'},{name:'token_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "statuses": {
    post: ({params,data}: {params:{id:string,sha:string},data:{state:string,ref:string,target_url:string,description:string,name:string,constring:string,coverage:number,pipeline_id:number}}, options?: {}): Promise<{code:200,data:{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:string,started_at:string,finished_at:string,allow_failure:boolean,coverage:number,pipeline_id:number,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/statuses/:sha',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'sha',type:'string'}],data:{mode:'raw',raw:{state:'string',ref:'string',target_url:'string',description:'string',name:'default',constring:'default',coverage:'float',pipeline_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
  },
  "deploy_keys": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,title:string,created_at:string,expires_at:string,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any},projects_with_readonly_access:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any},can_push:boolean},{id:number,title:string,created_at:string,expires_at:string,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any},projects_with_readonly_access:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any},can_push:boolean}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_keys',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{key:string,title:string,can_push:boolean,expires_at:string}}, options?: {}): Promise<{code:201,data:{id:number,title:string,created_at:string,expires_at:string,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},can_push:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/deploy_keys',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{key:'string',title:'string',can_push:'boolean',expires_at:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,key_id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,created_at:string,expires_at:string,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},can_push:boolean}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_keys/:key_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,key_id:string},data:{title:string,can_push:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,created_at:string,expires_at:string,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/deploy_keys/:key_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}],data:{mode:'raw',raw:{title:'string',can_push:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,key_id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/deploy_keys/:key_id',variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}]}, [client, { params}, options]),
    "enable": {
      post: ({params}: {params:{id:string,key_id:string}}, options?: {}): Promise<{code:201,data:{id:number,title:string,created_at:string,expires_at:string,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string}}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/deploy_keys/:key_id/enable',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "deploy_tokens": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,active:string}}, options?: {}): Promise<{code:200,data:[{id:number,name:string,username:string,expires_at:string,revoked:boolean,expired:boolean},{id:number,name:string,username:string,expires_at:string,revoked:boolean,expired:boolean}]}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_tokens',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'active',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,scopes:[string,string],expires_at:string,username:string}}, options?: {}): Promise<{code:201,data:{id:number,name:string,username:string,expires_at:string,revoked:boolean,expired:boolean,token:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/deploy_tokens',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',scopes:['string','string'],expires_at:'string',username:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,token_id:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,username:string,expires_at:string,revoked:boolean,expired:boolean}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/deploy_tokens/:token_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,token_id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/deploy_tokens/:token_id',variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}]}, [client, { params}, options])
  },
  "deployments": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,order_by:string,sort:string,updated_after:string,updated_before:string,finished_after:string,finished_before:string,environment:string,status:string}}, options?: {}): Promise<{code:200,data:[{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},environment:{id:any,name:any,slug:any,external_url:any,created_at:any,upstringd_at:any},deployable:{id:any,status:any,stage:any,name:any,ref:any,tag:any,coverage:any,allow_failure:any,created_at:any,started_at:any,finished_at:any,erased_at:any,duration:any,queued_duration:any,user:any,commit:any,pipeline:any,failure_reason:any,web_url:any,project:any,artifacts_file:any,artifacts:any,runner:any,runner_manager:any,artifacts_expire_at:any,archived:any,tag_list:any},status:string},{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},environment:{id:any,name:any,slug:any,external_url:any,created_at:any,upstringd_at:any},deployable:{id:any,status:any,stage:any,name:any,ref:any,tag:any,coverage:any,allow_failure:any,created_at:any,started_at:any,finished_at:any,erased_at:any,duration:any,queued_duration:any,user:any,commit:any,pipeline:any,failure_reason:any,web_url:any,project:any,artifacts_file:any,artifacts:any,runner:any,runner_manager:any,artifacts_expire_at:any,archived:any,tag_list:any},status:string}]}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/deployments',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'updated_after',type:'string'},{name:'updated_before',type:'string'},{name:'finished_after',type:'string'},{name:'finished_before',type:'string'},{name:'environment',type:'string'},{name:'status',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{environment:string,sha:string,ref:string,tag:boolean,status:string}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:any,size:any},artifacts:[any,any],runner:{id:any,description:any,ip_address:any,active:any,paused:any,is_shared:any,runner_type:any,name:any,online:any,status:any},runner_manager:{id:any,system_id:any,version:any,revision:any,platform:any,architecture:any,created_at:any,contacted_at:any,ip_address:any,status:any},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},status:string,created_at:string,comment:string},approval_summary:{rules:{id:any,user_id:any,group_id:any,access_level:any,access_level_description:any,required_approvals:any,group_inheritance_type:any,deployment_approvals:any}}}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/deployments',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{environment:'string',sha:'string',ref:'string',tag:'boolean',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,deployment_id:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:any,size:any},artifacts:[any,any],runner:{id:any,description:any,ip_address:any,active:any,paused:any,is_shared:any,runner_type:any,name:any,online:any,status:any},runner_manager:{id:any,system_id:any,version:any,revision:any,platform:any,architecture:any,created_at:any,contacted_at:any,ip_address:any,status:any},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},status:string,created_at:string,comment:string},approval_summary:{rules:{id:any,user_id:any,group_id:any,access_level:any,access_level_description:any,required_approvals:any,group_inheritance_type:any,deployment_approvals:any}}}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/deployments/:deployment_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,deployment_id:string},data:{status:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:number,allow_failure:boolean,created_at:string,started_at:string,finished_at:string,erased_at:string,duration:number,queued_duration:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any,created_at:any,bio:any,location:any,public_email:any,skype:any,linkedin:any,twitter:any,discord:any,website_url:any,organization:any,job_title:any,pronouns:any,bot:any,work_information:any,followers:any,following:any,is_followed:any,local_time:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:any,size:any},artifacts:[any,any],runner:{id:any,description:any,ip_address:any,active:any,paused:any,is_shared:any,runner_type:any,name:any,online:any,status:any},runner_manager:{id:any,system_id:any,version:any,revision:any,platform:any,architecture:any,created_at:any,contacted_at:any,ip_address:any,status:any},artifacts_expire_at:string,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},status:string,created_at:string,comment:string},approval_summary:{rules:{id:any,user_id:any,group_id:any,access_level:any,access_level_description:any,required_approvals:any,group_inheritance_type:any,deployment_approvals:any}}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/deployments/:deployment_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],data:{mode:'raw',raw:{status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,deployment_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:403}> => handler.apply({method:'delete',url:'api/v4/projects/:id/deployments/:deployment_id',variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}]}, [client, { params}, options]),
    "merge_requests": {
      get: ({params,query}: {params:{id:string,deployment_id:string},query?:{page:string,per_page:string,author_id:string,author_username:string,assignee_id:string,assignee_username:string,reviewer_username:string,labels:string,milestone:string,my_reaction_emoji:string,reviewer_id:string,state:string,order_by:string,sort:string,with_labels_details:string,with_merge_status_recheck:string,created_after:string,created_before:string,updated_after:string,updated_before:string,view:string,scope:string,source_branch:string,source_project_id:string,target_branch:string,search:string,in:string,wip:string,'not[author_id]':string,'not[author_username]':string,'not[assignee_id]':string,'not[assignee_username]':string,'not[reviewer_username]':string,'not[labels]':string,'not[milestone]':string,'not[my_reaction_emoji]':string,'not[reviewer_id]':string,deployed_before:string,deployed_after:string,environment:string,approved:string,merge_user_id:string,merge_user_username:string}}, options?: {}): Promise<{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merge_user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merged_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},reviewers:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:any,relative:any,full:any},web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merge_user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},merged_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},reviewers:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:any,relative:any,full:any},web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/deployments/:deployment_id/merge_requests',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'author_id',type:'string'},{name:'author_username',type:'string'},{name:'assignee_id',type:'string'},{name:'assignee_username',type:'string'},{name:'reviewer_username',type:'string'},{name:'labels',type:'string'},{name:'milestone',type:'string'},{name:'my_reaction_emoji',type:'string'},{name:'reviewer_id',type:'string'},{name:'state',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'with_labels_details',type:'string'},{name:'with_merge_status_recheck',type:'string'},{name:'created_after',type:'string'},{name:'created_before',type:'string'},{name:'updated_after',type:'string'},{name:'updated_before',type:'string'},{name:'view',type:'string'},{name:'scope',type:'string'},{name:'source_branch',type:'string'},{name:'source_project_id',type:'string'},{name:'target_branch',type:'string'},{name:'search',type:'string'},{name:'in',type:'string'},{name:'wip',type:'string'},{name:'not[author_id]',type:'string'},{name:'not[author_username]',type:'string'},{name:'not[assignee_id]',type:'string'},{name:'not[assignee_username]',type:'string'},{name:'not[reviewer_username]',type:'string'},{name:'not[labels]',type:'string'},{name:'not[milestone]',type:'string'},{name:'not[my_reaction_emoji]',type:'string'},{name:'not[reviewer_id]',type:'string'},{name:'deployed_before',type:'string'},{name:'deployed_after',type:'string'},{name:'environment',type:'string'},{name:'approved',type:'string'},{name:'merge_user_id',type:'string'},{name:'merge_user_username',type:'string'}]}, [client, { params, query}, options])
    },
    "approval": {
      post: ({params,data}: {params:{id:string,deployment_id:string},data:{status:string,comment:string,represented_as:string}}, options?: {}): Promise<{code:201,data:{user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},status:string,created_at:string,comment:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/deployments/:deployment_id/approval',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'deployment_id',type:'string'}],data:{mode:'raw',raw:{status:'string',comment:'string',represented_as:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "merge_requests": {
    get: ({params,query}: {params:{id:string},query?:{author_id:string,author_username:string,assignee_id:string,assignee_username:string,reviewer_username:string,labels:string,milestone:string,my_reaction_emoji:string,reviewer_id:string,state:string,order_by:string,sort:string,with_labels_details:string,with_merge_status_recheck:string,created_after:string,created_before:string,updated_after:string,updated_before:string,view:string,scope:string,source_branch:string,source_project_id:string,target_branch:string,search:string,in:string,wip:string,'not[author_id]':string,'not[author_username]':string,'not[assignee_id]':string,'not[assignee_username]':string,'not[reviewer_username]':string,'not[labels]':string,'not[milestone]':string,'not[my_reaction_emoji]':string,'not[reviewer_id]':string,deployed_before:string,deployed_after:string,environment:string,approved:string,merge_user_id:string,merge_user_username:string,approver_ids:string,approved_by_ids:string,approved_by_usernames:string,page:string,per_page:string,iids:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}}|{code:401}|{code:404}|{code:422}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'author_id',type:'string'},{name:'author_username',type:'string'},{name:'assignee_id',type:'string'},{name:'assignee_username',type:'string'},{name:'reviewer_username',type:'string'},{name:'labels',type:'string'},{name:'milestone',type:'string'},{name:'my_reaction_emoji',type:'string'},{name:'reviewer_id',type:'string'},{name:'state',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'with_labels_details',type:'string'},{name:'with_merge_status_recheck',type:'string'},{name:'created_after',type:'string'},{name:'created_before',type:'string'},{name:'updated_after',type:'string'},{name:'updated_before',type:'string'},{name:'view',type:'string'},{name:'scope',type:'string'},{name:'source_branch',type:'string'},{name:'source_project_id',type:'string'},{name:'target_branch',type:'string'},{name:'search',type:'string'},{name:'in',type:'string'},{name:'wip',type:'string'},{name:'not[author_id]',type:'string'},{name:'not[author_username]',type:'string'},{name:'not[assignee_id]',type:'string'},{name:'not[assignee_username]',type:'string'},{name:'not[reviewer_username]',type:'string'},{name:'not[labels]',type:'string'},{name:'not[milestone]',type:'string'},{name:'not[my_reaction_emoji]',type:'string'},{name:'not[reviewer_id]',type:'string'},{name:'deployed_before',type:'string'},{name:'deployed_after',type:'string'},{name:'environment',type:'string'},{name:'approved',type:'string'},{name:'merge_user_id',type:'string'},{name:'merge_user_username',type:'string'},{name:'approver_ids',type:'string'},{name:'approved_by_ids',type:'string'},{name:'approved_by_usernames',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'iids',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{title:string,source_branch:string,target_branch:string,target_project_id:number,assignee_id:number,assignee_ids:[number,number],reviewer_ids:[number,number],description:string,labels:[string,string],add_labels:[string,string],remove_labels:[string,string],milestone_id:number,remove_source_branch:boolean,allow_collaboration:boolean,allow_maintainer_to_push:boolean,squash:boolean,approvals_before_merge:number}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:any,string:any,label:any,group:any,tooltip:any,has_details:any,details_path:any,illustration:any,favicon:any,action:any}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}}|{code:400}|{code:401}|{code:404}|{code:409}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{title:'string',source_branch:'string',target_branch:'string',target_project_id:'number',assignee_id:'number',assignee_ids:['number','number'],reviewer_ids:['number','number'],description:'string',labels:['string','string'],add_labels:['string','string'],remove_labels:['string','string'],milestone_id:'number',remove_source_branch:'boolean',allow_collaboration:'boolean',allow_maintainer_to_push:'boolean',squash:'boolean',approvals_before_merge:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}|{code:412}> => handler.apply({method:'delete',url:'api/v4/projects/:id/merge_requests/:merge_request_iid',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options]),
    getOne: ({params,query}: {params:{id:string,merge_request_iid:string},query?:{render_html:string,include_diverged_commits_count:string,include_rebase_in_progress:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:any,string:any,label:any,group:any,tooltip:any,has_details:any,details_path:any,illustration:any,favicon:any,action:any}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],query:[{name:'render_html',type:'string'},{name:'include_diverged_commits_count',type:'string'},{name:'include_rebase_in_progress',type:'string'}]}, [client, { params, query}, options]),
    put: ({params,data}: {params:{id:string,merge_request_iid:string},data:{title:string,target_branch:string,state_event:string,discussion_locked:boolean,assignee_id:number,assignee_ids:[number,number],reviewer_ids:[number,number],description:string,labels:[string,string],add_labels:[string,string],remove_labels:[string,string],milestone_id:number,remove_source_branch:boolean,allow_collaboration:boolean,allow_maintainer_to_push:boolean,squash:boolean,approvals_before_merge:number}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:any,string:any,label:any,group:any,tooltip:any,has_details:any,details_path:any,illustration:any,favicon:any,action:any}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}}|{code:400}|{code:404}|{code:409}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{title:'string',target_branch:'string',state_event:'string',discussion_locked:'boolean',assignee_id:'number',assignee_ids:['number','number'],reviewer_ids:['number','number'],description:'string',labels:['string','string'],add_labels:['string','string'],remove_labels:['string','string'],milestone_id:'number',remove_source_branch:'boolean',allow_collaboration:'boolean',allow_maintainer_to_push:'boolean',squash:'boolean',approvals_before_merge:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "draft_notes": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:[{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object},{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options]),
      post: ({params,data}: {params:{id:string,merge_request_iid:string},data:{note:string,in_reply_to_discussion_id:string,commit_id:string,resolve_discussion:boolean,position:{base_sha:string,start_sha:string,head_sha:string,position_type:string,string_path:string,string_line:number,old_path:string,old_line:number,width:number,height:number,x:number,y:number,line_range:{start:{line_code:string,type:string,old_line:string,string_line:string},end:{line_code:string,type:string,old_line:string,string_line:string}}}}}, options?: {}): Promise<{code:201,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{note:'string',in_reply_to_discussion_id:'string',commit_id:'string',resolve_discussion:'boolean',position:{base_sha:'string',start_sha:'string',head_sha:'string',position_type:'string',string_path:'string',string_line:'number',old_path:'string',old_line:'number',width:'number',height:'number',x:'number',y:'number',line_range:{start:{line_code:'string',type:'string',old_line:'string',string_line:'string'},end:{line_code:'string',type:'string',old_line:'string',string_line:'string'}}}},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      getOne: ({params}: {params:{id:string,merge_request_iid:string,draft_note_id:string}}, options?: {}): Promise<{code:200,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}]}, [client, { params}, options]),
      put: ({params,data}: {params:{id:string,merge_request_iid:string,draft_note_id:string},data:{note:string,position:{base_sha:string,start_sha:string,head_sha:string,position_type:string,string_path:string,string_line:number,old_path:string,old_line:number,width:number,height:number,x:number,y:number,line_range:{start:{line_code:string,type:string,old_line:string,string_line:string},end:{line_code:string,type:string,old_line:string,string_line:string}}}}}, options?: {}): Promise<{code:200,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}],data:{mode:'raw',raw:{note:'string',position:{base_sha:'string',start_sha:'string',head_sha:'string',position_type:'string',string_path:'string',string_line:'number',old_path:'string',old_line:'number',width:'number',height:'number',x:'number',y:'number',line_range:{start:{line_code:'string',type:'string',old_line:'string',string_line:'string'},end:{line_code:'string',type:'string',old_line:'string',string_line:'string'}}}},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{id:string,merge_request_iid:string,draft_note_id:string}}, options?: {}): Promise<{code:204,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}]}, [client, { params}, options]),
      "publish": {
        put: ({params}: {params:{id:string,merge_request_iid:string,draft_note_id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id/publish',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'draft_note_id',type:'string'}]}, [client, { params}, options])
      },
      "bulk_publish": {
        post: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/bulk_publish',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
      }
    },
    "time_estimate": {
      post: ({params,data}: {params:{id:string,merge_request_iid:string},data:{duration:string}}, options?: {}): Promise<{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/time_estimate',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{duration:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "reset_time_estimate": {
      post: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reset_time_estimate',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "add_spent_time": {
      post: ({params,data}: {params:{id:string,merge_request_iid:string},data:{duration:string}}, options?: {}): Promise<{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/add_spent_time',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{duration:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "reset_spent_time": {
      post: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reset_spent_time',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "time_stats": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/time_stats',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "participants": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/participants',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "reviewers": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},state:string,created_at:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reviewers',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "commits": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/commits',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "context_commits": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options]),
      post: ({params,data}: {params:{id:string,merge_request_iid:string},data:{commits:[string,string]}}, options?: {}): Promise<{code:201,data:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{commits:['string','string']},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params,query}: {params:{id:string,merge_request_iid:string},query?:{commits:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],query:[{name:'commits',type:'string'}]}, [client, { params, query}, options])
    },
    "changes": {
      get: ({params,query}: {params:{id:string,merge_request_iid:string},query?:{unidiff:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:any,string:any,label:any,group:any,tooltip:any,has_details:any,details_path:any,illustration:any,favicon:any,action:any}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string},changes:{diff:string,string_path:string,old_path:string,a_mode:string,b_mode:string,string_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},overflow:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/changes',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],query:[{name:'unidiff',type:'string'}]}, [client, { params, query}, options])
    },
    "diffs": {
      get: ({params,query}: {params:{id:string,merge_request_iid:string},query?:{page:string,per_page:string,unidiff:string}}, options?: {}): Promise<{code:200,data:{diff:string,string_path:string,old_path:string,a_mode:string,b_mode:string,string_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/diffs',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'unidiff',type:'string'}]}, [client, { params, query}, options])
    },
    "pipelines": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/pipelines',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options]),
      post: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:string,string:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}}|{code:400}|{code:404}|{code:405}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/pipelines',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "merge": {
      put: ({params,data}: {params:{id:string,merge_request_iid:string},data:{merge_commit_message:string,squash_commit_message:string,should_remove_source_branch:boolean,merge_when_pipeline_succeeds:boolean,sha:string,squash:boolean,skip_merge_train:boolean}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:any,string:any,label:any,group:any,tooltip:any,has_details:any,details_path:any,illustration:any,favicon:any,action:any}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}}|{code:400}|{code:401}|{code:404}|{code:405}|{code:409}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/merge',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{merge_commit_message:'string',squash_commit_message:'string',should_remove_source_branch:'boolean',merge_when_pipeline_succeeds:'boolean',sha:'string',squash:'boolean',skip_merge_train:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "merge_ref": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200}|{code:400}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/merge_ref',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "cancel_merge_when_pipeline_succeeds": {
      post: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},started_at:string,finished_at:string,committed_at:string,duration:number,queued_duration:number,coverage:number,detailed_status:{icon:any,string:any,label:any,group:any,tooltip:any,has_details:any,details_path:any,illustration:any,favicon:any,action:any}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}}|{code:401}|{code:404}|{code:405}|{code:406}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/cancel_merge_when_pipeline_succeeds',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "rebase": {
      put: ({params,data}: {params:{id:string,merge_request_iid:string},data:{skip_ci:boolean}}, options?: {}): Promise<{code:200}|{code:403}|{code:404}|{code:409}> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/rebase',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{skip_ci:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "closes_issues": {
      get: ({params,query}: {params:{id:string,merge_request_iid:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{note:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/closes_issues',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
    },
    "versions": {
      get: ({params,query}: {params:{id:string,merge_request_iid:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string},{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/versions',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      getOne: ({params,query}: {params:{id:string,merge_request_iid:string,version_id:string},query?:{unidiff:string}}, options?: {}): Promise<{code:200,data:{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string,commits:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},diffs:{diff:string,string_path:string,old_path:string,a_mode:string,b_mode:string,string_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}}}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/versions/:version_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'},{name:'version_id',type:'string'}],query:[{name:'unidiff',type:'string'}]}, [client, { params, query}, options])
    },
    "approvals": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}}}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approvals',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options]),
      post: ({params,data}: {params:{id:string,merge_request_iid:string},data:{approvals_required:number}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,merge_status:string,approved:boolean,approvals_required:number,approvals_left:number,require_password_to_approve:boolean,approved_by:[{user:any},{user:any}],suggested_approvers:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}],approvers:string,approver_groups:string,user_has_approved:boolean,user_can_approve:boolean,approval_rules_left:[{id:number,name:string,rule_type:string},{id:number,name:string,rule_type:string}],has_approval_rules:boolean,merge_request_approvers_available:boolean,multiple_approval_rules_available:boolean,invalid_approvers_rules:[{id:number,name:string,rule_type:string},{id:number,name:string,rule_type:string}]}}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approvals',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{approvals_required:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "approve": {
      post: ({params,data}: {params:{id:string,merge_request_iid:string},data:{sha:string,approval_password:string}}, options?: {}): Promise<{code:201,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}}}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approve',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}],data:{mode:'raw',raw:{sha:'string',approval_password:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "unapprove": {
      post: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:201,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}}}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/unapprove',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "reset_approvals": {
      put: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/reset_approvals',variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "approval_state": {
      get: ({params}: {params:{id:string,merge_request_iid:string}}, options?: {}): Promise<{code:200,data:{approval_rules_overwritten:boolean,rules:[{id:number,name:string,rule_type:string,eligible_approvers:[any,any],approvals_required:number,users:[any,any],groups:[any,any],contains_hidden_groups:boolean,section:string,source_rule:any,overridden:boolean,code_owner:boolean,approved_by:[any,any],approved:boolean},{id:number,name:string,rule_type:string,eligible_approvers:[any,any],approvals_required:number,users:[any,any],groups:[any,any],contains_hidden_groups:boolean,section:string,source_rule:any,overridden:boolean,code_owner:boolean,approved_by:[any,any],approved:boolean}]}}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:merge_request_iid/approval_state',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'merge_request_iid',type:'string'}]}, [client, { params}, options])
    },
    "resource_milestone_events": {
      get: ({params,query}: {params:{id:string,eventable_id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string,resource_type:string,resource_id:number,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},action:string,state:string},{id:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string,resource_type:string,resource_id:number,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},action:string,state:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:eventable_id/resource_milestone_events',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'eventable_id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      getOne: ({params}: {params:{id:string,event_id:string,eventable_id:string}}, options?: {}): Promise<{code:200,data:{id:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string,resource_type:string,resource_id:number,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},action:string,state:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/merge_requests/:eventable_id/resource_milestone_events/:event_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'event_id',type:'string'},{name:'eventable_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "environments": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,name:string,search:string,states:string}}, options?: {}): Promise<{code:200,data:[{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string,tier:string,project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any,default_branch:any,tag_list:any,topics:any,ssh_url_to_repo:any,http_url_to_repo:any,web_url:any,readme_url:any,forks_count:any,license_url:any,license:any,avatar_url:any,star_count:any,last_activity_at:any,namespace:any,custom_attributes:any,repository_storage:any},last_deployment:{id:any,iid:any,ref:any,sha:any,created_at:any,upstringd_at:any,user:any,environment:any,deployable:any,status:any},state:string,auto_stop_at:string},{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string,tier:string,project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any,default_branch:any,tag_list:any,topics:any,ssh_url_to_repo:any,http_url_to_repo:any,web_url:any,readme_url:any,forks_count:any,license_url:any,license:any,avatar_url:any,star_count:any,last_activity_at:any,namespace:any,custom_attributes:any,repository_storage:any},last_deployment:{id:any,iid:any,ref:any,sha:any,created_at:any,upstringd_at:any,user:any,environment:any,deployable:any,status:any},state:string,auto_stop_at:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/environments',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'name',type:'string'},{name:'search',type:'string'},{name:'states',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,external_url:string,tier:string}}, options?: {}): Promise<{code:201,data:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},environment:{id:any,name:any,slug:any,external_url:any,created_at:any,upstringd_at:any},deployable:{id:any,status:any,stage:any,name:any,ref:any,tag:any,coverage:any,allow_failure:any,created_at:any,started_at:any,finished_at:any,erased_at:any,duration:any,queued_duration:any,user:any,commit:any,pipeline:any,failure_reason:any,web_url:any,project:any,artifacts_file:any,artifacts:any,runner:any,runner_manager:any,artifacts_expire_at:any,archived:any,tag_list:any},status:string},state:string,auto_stop_at:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/environments',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',external_url:'string',tier:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    put: ({params,data}: {params:{id:string,environment_id:string},data:{external_url:string,tier:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},environment:{id:any,name:any,slug:any,external_url:any,created_at:any,upstringd_at:any},deployable:{id:any,status:any,stage:any,name:any,ref:any,tag:any,coverage:any,allow_failure:any,created_at:any,started_at:any,finished_at:any,erased_at:any,duration:any,queued_duration:any,user:any,commit:any,pipeline:any,failure_reason:any,web_url:any,project:any,artifacts_file:any,artifacts:any,runner:any,runner_manager:any,artifacts_expire_at:any,archived:any,tag_list:any},status:string},state:string,auto_stop_at:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/environments/:environment_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}],data:{mode:'raw',raw:{external_url:'string',tier:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,environment_id:string}}, options?: {}): Promise<{code:204,data:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},environment:{id:any,name:any,slug:any,external_url:any,created_at:any,upstringd_at:any},deployable:{id:any,status:any,stage:any,name:any,ref:any,tag:any,coverage:any,allow_failure:any,created_at:any,started_at:any,finished_at:any,erased_at:any,duration:any,queued_duration:any,user:any,commit:any,pipeline:any,failure_reason:any,web_url:any,project:any,artifacts_file:any,artifacts:any,runner:any,runner_manager:any,artifacts_expire_at:any,archived:any,tag_list:any},status:string},state:string,auto_stop_at:string}}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/environments/:environment_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}]}, [client, { params}, options]),
    getOne: ({params}: {params:{id:string,environment_id:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},environment:{id:any,name:any,slug:any,external_url:any,created_at:any,upstringd_at:any},deployable:{id:any,status:any,stage:any,name:any,ref:any,tag:any,coverage:any,allow_failure:any,created_at:any,started_at:any,finished_at:any,erased_at:any,duration:any,queued_duration:any,user:any,commit:any,pipeline:any,failure_reason:any,web_url:any,project:any,artifacts_file:any,artifacts:any,runner:any,runner_manager:any,artifacts_expire_at:any,archived:any,tag_list:any},status:string},state:string,auto_stop_at:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/environments/:environment_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}]}, [client, { params}, options]),
    "stop": {
      post: ({params,data}: {params:{id:string,environment_id:string},data:{force:false}}, options?: {}): Promise<{code:201,data:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:string,upstringd_at:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},environment:{id:any,name:any,slug:any,external_url:any,created_at:any,upstringd_at:any},deployable:{id:any,status:any,stage:any,name:any,ref:any,tag:any,coverage:any,allow_failure:any,created_at:any,started_at:any,finished_at:any,erased_at:any,duration:any,queued_duration:any,user:any,commit:any,pipeline:any,failure_reason:any,web_url:any,project:any,artifacts_file:any,artifacts:any,runner:any,runner_manager:any,artifacts_expire_at:any,archived:any,tag_list:any},status:string},state:string,auto_stop_at:string}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/environments/:environment_id/stop',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'environment_id',type:'string'}],data:{mode:'raw',raw:{force:false},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "review_apps": {
      delete: ({params,query}: {params:{id:string},query?:{limit:string,dry_run:string}}, options?: {}): Promise<{code:204,data:{id:number,name:string,slug:string,external_url:string,created_at:string,upstringd_at:string}}|{code:400}|{code:401}|{code:404}|{code:409}> => handler.apply({method:'delete',url:'api/v4/projects/:id/environments/review_apps',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'limit',type:'string'},{name:'dry_run',type:'string'}]}, [client, { params, query}, options])
    },
    "stop_stale": {
      post: ({params,data}: {params:{id:string},data:{before:string}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}> => handler.apply({method:'post',url:'api/v4/projects/:id/environments/stop_stale',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{before:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "error_tracking": {
    "settings": {
      get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}}> => handler.apply({method:'get',url:'api/v4/projects/:id/error_tracking/settings',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
      patch: ({params,data}: {params:{id:string},data:{active:boolean,integrated:boolean}}, options?: {}): Promise<{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'patch',url:'api/v4/projects/:id/error_tracking/settings',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{active:'boolean',integrated:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      put: ({params,data}: {params:{id:string},data:{active:boolean,integrated:boolean}}, options?: {}): Promise<{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/error_tracking/settings',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{active:'boolean',integrated:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "client_keys": {
      get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:[{id:number,active:boolean,public_key:string,sentry_dsn:string},{id:number,active:boolean,public_key:string,sentry_dsn:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/error_tracking/client_keys',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
      post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201,data:{id:number,active:boolean,public_key:string,sentry_dsn:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/error_tracking/client_keys',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
      delete: ({params}: {params:{id:string,key_id:string}}, options?: {}): Promise<{code:204,data:{id:number,active:boolean,public_key:string,sentry_dsn:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/error_tracking/client_keys/:key_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'key_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "freeze_periods": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:string,upstringd_at:string},{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:string,upstringd_at:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/freeze_periods',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{freeze_start:string,freeze_end:string,cron_timezone:string}}, options?: {}): Promise<{code:201,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:string,upstringd_at:string}}|{code:400}|{code:401}> => handler.apply({method:'post',url:'api/v4/projects/:id/freeze_periods',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{freeze_start:'string',freeze_end:'string',cron_timezone:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,freeze_period_id:string}}, options?: {}): Promise<{code:200,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:string,upstringd_at:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/freeze_periods/:freeze_period_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'freeze_period_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,freeze_period_id:string},data:{freeze_start:string,freeze_end:string,cron_timezone:string}}, options?: {}): Promise<{code:200,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:string,upstringd_at:string}}|{code:400}|{code:401}> => handler.apply({method:'put',url:'api/v4/projects/:id/freeze_periods/:freeze_period_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'freeze_period_id',type:'string'}],data:{mode:'raw',raw:{freeze_start:'string',freeze_end:'string',cron_timezone:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,freeze_period_id:string}}, options?: {}): Promise<{code:204,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:string,upstringd_at:string}}|{code:401}> => handler.apply({method:'delete',url:'api/v4/projects/:id/freeze_periods/:freeze_period_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'freeze_period_id',type:'string'}]}, [client, { params}, options])
  },
  "services": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:[{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean},{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/services',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    "apple-app-store": {
      put: ({params,data}: {params:{id:string},data:{app_store_issuer_id:string,app_store_key_id:string,app_store_private_key_file_name:string,app_store_private_key:string,app_store_protected_refs:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/apple-app-store',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{app_store_issuer_id:'string',app_store_key_id:'string',app_store_private_key_file_name:'string',app_store_private_key:'string',app_store_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "asana": {
      put: ({params,data}: {params:{id:string},data:{api_key:string,restrict_to_branch:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/asana',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_key:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "assembla": {
      put: ({params,data}: {params:{id:string},data:{token:string,subdomain:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/assembla',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',subdomain:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "bamboo": {
      put: ({params,data}: {params:{id:string},data:{bamboo_url:string,build_key:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/bamboo',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{bamboo_url:'string',build_key:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "bugzilla": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/bugzilla',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "buildkite": {
      put: ({params,data}: {params:{id:string},data:{token:string,project_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/buildkite',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',project_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "campfire": {
      put: ({params,data}: {params:{id:string},data:{token:string,subdomain:string,room:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/campfire',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',subdomain:'string',room:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "confluence": {
      put: ({params,data}: {params:{id:string},data:{confluence_url:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/confluence',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{confluence_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "custom-issue-tracker": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/custom-issue-tracker',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "datadog": {
      put: ({params,data}: {params:{id:string},data:{api_key:string,datadog_site:string,api_url:string,archive_trace_events:boolean,datadog_service:string,datadog_env:string,datadog_tags:string,pipeline_events:boolean,build_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/datadog',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_key:'string',datadog_site:'string',api_url:'string',archive_trace_events:'boolean',datadog_service:'string',datadog_env:'string',datadog_tags:'string',pipeline_events:'boolean',build_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "diffblue-cover": {
      put: ({params,data}: {params:{id:string},data:{diffblue_license_key:string,diffblue_access_token_name:string,diffblue_access_token_secret:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/diffblue-cover',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{diffblue_license_key:'string',diffblue_access_token_name:'string',diffblue_access_token_secret:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "discord": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/discord',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "drone-ci": {
      put: ({params,data}: {params:{id:string},data:{token:string,drone_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/drone-ci',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',drone_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "emails-on-push": {
      put: ({params,data}: {params:{id:string},data:{recipients:string,disable_diffs:boolean,send_from_committer_email:boolean,branches_to_be_notified:string,push_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/emails-on-push',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{recipients:'string',disable_diffs:'boolean',send_from_committer_email:'boolean',branches_to_be_notified:'string',push_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "external-wiki": {
      put: ({params,data}: {params:{id:string},data:{external_wiki_url:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/external-wiki',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{external_wiki_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "gitlab-slack-application": {
      put: ({params,data}: {params:{id:string},data:{channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/gitlab-slack-application',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "google-play": {
      put: ({params,data}: {params:{id:string},data:{package_name:string,service_account_key_file_name:string,service_account_key:string,google_play_protected_refs:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/google-play',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{package_name:'string',service_account_key_file_name:'string',service_account_key:'string',google_play_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "hangouts-chat": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/hangouts-chat',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "harbor": {
      put: ({params,data}: {params:{id:string},data:{url:string,project_name:string,username:string,password:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/harbor',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',project_name:'string',username:'string',password:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "irker": {
      put: ({params,data}: {params:{id:string},data:{recipients:string,default_irc_uri:string,server_host:string,server_port:number,colorize_messages:boolean,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/irker',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{recipients:'string',default_irc_uri:'string',server_host:'string',server_port:'number',colorize_messages:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "jenkins": {
      put: ({params,data}: {params:{id:string},data:{jenkins_url:string,project_name:string,enable_ssl_verification:boolean,username:string,password:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/jenkins',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{jenkins_url:'string',project_name:'string',enable_ssl_verification:'boolean',username:'string',password:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "jira": {
      put: ({params,data}: {params:{id:string},data:{url:string,password:string,api_url:string,jira_auth_type:number,username:string,jira_issue_transition_automatic:boolean,jira_issue_transition_id:string,jira_issue_prefix:string,jira_issue_regex:string,issues_enabled:boolean,project_keys:[string,string],comment_on_event_enabled:boolean,commit_events:boolean,merge_requests_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/jira',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',password:'string',api_url:'string',jira_auth_type:'number',username:'string',jira_issue_transition_automatic:'boolean',jira_issue_transition_id:'string',jira_issue_prefix:'string',jira_issue_regex:'string',issues_enabled:'boolean',project_keys:['string','string'],comment_on_event_enabled:'boolean',commit_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mattermost-slash-commands": {
      put: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mattermost-slash-commands',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "slack-slash-commands": {
      put: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/slack-slash-commands',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "packagist": {
      put: ({params,data}: {params:{id:string},data:{username:string,token:string,server:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/packagist',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{username:'string',token:'string',server:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "phorge": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/phorge',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pipelines-email": {
      put: ({params,data}: {params:{id:string},data:{recipients:string,notify_only_broken_pipelines:boolean,notify_only_default_branch:boolean,branches_to_be_notified:string,pipeline_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pipelines-email',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{recipients:'string',notify_only_broken_pipelines:'boolean',notify_only_default_branch:'boolean',branches_to_be_notified:'string',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pivotaltracker": {
      put: ({params,data}: {params:{id:string},data:{token:string,restrict_to_branch:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pivotaltracker',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "prometheus": {
      put: ({params,data}: {params:{id:string},data:{api_url:string,google_iap_audience_client_id:string,google_iap_service_account_json:string,manual_configuration:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/prometheus',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_url:'string',google_iap_audience_client_id:'string',google_iap_service_account_json:'string',manual_configuration:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pumble": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pumble',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pushover": {
      put: ({params,data}: {params:{id:string},data:{api_key:string,user_key:string,priority:string,device:string,sound:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/pushover',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_key:'string',user_key:'string',priority:'string',device:'string',sound:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "redmine": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/redmine',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "ewm": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/ewm',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "youtrack": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/youtrack',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "clickup": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/clickup',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "slack": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/slack',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "microsoft-teams": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/microsoft-teams',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mattermost": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mattermost',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "teamcity": {
      put: ({params,data}: {params:{id:string},data:{teamcity_url:string,build_type:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/teamcity',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{teamcity_url:'string',build_type:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "telegram": {
      put: ({params,data}: {params:{id:string},data:{token:string,room:string,hostname:string,thread:number,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,incident_events:boolean,vulnerability_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/telegram',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',room:'string',hostname:'string',thread:'number',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "unify-circuit": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/unify-circuit',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "webex-teams": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/webex-teams',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "zentao": {
      put: ({params,data}: {params:{id:string},data:{url:string,api_token:string,zentao_product_xid:string,api_url:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/zentao',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',api_token:'string',zentao_product_xid:'string',api_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "squash-tm": {
      put: ({params,data}: {params:{id:string},data:{url:string,token:string,issues_events:boolean,confidential_issues_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/squash-tm',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',token:'string',issues_events:'boolean',confidential_issues_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "github": {
      put: ({params,data}: {params:{id:string},data:{token:string,repository_url:string,static_constring:boolean,pipeline_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/github',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',repository_url:'string',static_constring:'boolean',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "git-guardian": {
      put: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/git-guardian',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "google-cloud-platform-artifact-registry": {
      put: ({params,data}: {params:{id:string},data:{artifact_registry_project_id:string,artifact_registry_repositories:string,artifact_registry_location:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/google-cloud-platform-artifact-registry',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{artifact_registry_project_id:'string',artifact_registry_repositories:'string',artifact_registry_location:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "google-cloud-platform-workload-identity-federation": {
      put: ({params,data}: {params:{id:string},data:{workload_identity_federation_project_id:string,workload_identity_federation_project_number:string,workload_identity_pool_id:string,workload_identity_pool_provider_id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/google-cloud-platform-workload-identity-federation',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{workload_identity_federation_project_id:'string',workload_identity_federation_project_number:'string',workload_identity_pool_id:'string',workload_identity_pool_provider_id:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mock-ci": {
      put: ({params,data}: {params:{id:string},data:{mock_service_url:string,enable_ssl_verification:boolean,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mock-ci',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{mock_service_url:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mock-monitoring": {
      put: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/services/mock-monitoring',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
    },
    delete: ({params}: {params:{id:string,slug:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/services/:slug',variable:[{name:'id',type:'string'},{name:'slug',type:'string'}]}, [client, { params}, options]),
    getOne: ({params}: {params:{id:string,slug:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean,properties:object}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/services/:slug',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'slug',type:'string'}]}, [client, { params}, options]),
    "mattermost_slash_commands": {
      "trigger": {
        post: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/services/mattermost_slash_commands/trigger',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      }
    },
    "slack_slash_commands": {
      "trigger": {
        post: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/services/slack_slash_commands/trigger',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      }
    }
  },
  "integrations": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:[{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean},{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/integrations',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    "apple-app-store": {
      put: ({params,data}: {params:{id:string},data:{app_store_issuer_id:string,app_store_key_id:string,app_store_private_key_file_name:string,app_store_private_key:string,app_store_protected_refs:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/apple-app-store',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{app_store_issuer_id:'string',app_store_key_id:'string',app_store_private_key_file_name:'string',app_store_private_key:'string',app_store_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "asana": {
      put: ({params,data}: {params:{id:string},data:{api_key:string,restrict_to_branch:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/asana',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_key:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "assembla": {
      put: ({params,data}: {params:{id:string},data:{token:string,subdomain:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/assembla',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',subdomain:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "bamboo": {
      put: ({params,data}: {params:{id:string},data:{bamboo_url:string,build_key:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/bamboo',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{bamboo_url:'string',build_key:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "bugzilla": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/bugzilla',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "buildkite": {
      put: ({params,data}: {params:{id:string},data:{token:string,project_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/buildkite',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',project_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "campfire": {
      put: ({params,data}: {params:{id:string},data:{token:string,subdomain:string,room:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/campfire',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',subdomain:'string',room:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "confluence": {
      put: ({params,data}: {params:{id:string},data:{confluence_url:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/confluence',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{confluence_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "custom-issue-tracker": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/custom-issue-tracker',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "datadog": {
      put: ({params,data}: {params:{id:string},data:{api_key:string,datadog_site:string,api_url:string,archive_trace_events:boolean,datadog_service:string,datadog_env:string,datadog_tags:string,pipeline_events:boolean,build_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/datadog',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_key:'string',datadog_site:'string',api_url:'string',archive_trace_events:'boolean',datadog_service:'string',datadog_env:'string',datadog_tags:'string',pipeline_events:'boolean',build_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "diffblue-cover": {
      put: ({params,data}: {params:{id:string},data:{diffblue_license_key:string,diffblue_access_token_name:string,diffblue_access_token_secret:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/diffblue-cover',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{diffblue_license_key:'string',diffblue_access_token_name:'string',diffblue_access_token_secret:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "discord": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/discord',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "drone-ci": {
      put: ({params,data}: {params:{id:string},data:{token:string,drone_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/drone-ci',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',drone_url:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "emails-on-push": {
      put: ({params,data}: {params:{id:string},data:{recipients:string,disable_diffs:boolean,send_from_committer_email:boolean,branches_to_be_notified:string,push_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/emails-on-push',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{recipients:'string',disable_diffs:'boolean',send_from_committer_email:'boolean',branches_to_be_notified:'string',push_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "external-wiki": {
      put: ({params,data}: {params:{id:string},data:{external_wiki_url:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/external-wiki',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{external_wiki_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "gitlab-slack-application": {
      put: ({params,data}: {params:{id:string},data:{channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/gitlab-slack-application',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "google-play": {
      put: ({params,data}: {params:{id:string},data:{package_name:string,service_account_key_file_name:string,service_account_key:string,google_play_protected_refs:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/google-play',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{package_name:'string',service_account_key_file_name:'string',service_account_key:'string',google_play_protected_refs:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "hangouts-chat": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/hangouts-chat',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "harbor": {
      put: ({params,data}: {params:{id:string},data:{url:string,project_name:string,username:string,password:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/harbor',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',project_name:'string',username:'string',password:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "irker": {
      put: ({params,data}: {params:{id:string},data:{recipients:string,default_irc_uri:string,server_host:string,server_port:number,colorize_messages:boolean,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/irker',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{recipients:'string',default_irc_uri:'string',server_host:'string',server_port:'number',colorize_messages:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "jenkins": {
      put: ({params,data}: {params:{id:string},data:{jenkins_url:string,project_name:string,enable_ssl_verification:boolean,username:string,password:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/jenkins',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{jenkins_url:'string',project_name:'string',enable_ssl_verification:'boolean',username:'string',password:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "jira": {
      put: ({params,data}: {params:{id:string},data:{url:string,password:string,api_url:string,jira_auth_type:number,username:string,jira_issue_transition_automatic:boolean,jira_issue_transition_id:string,jira_issue_prefix:string,jira_issue_regex:string,issues_enabled:boolean,project_keys:[string,string],comment_on_event_enabled:boolean,commit_events:boolean,merge_requests_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/jira',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',password:'string',api_url:'string',jira_auth_type:'number',username:'string',jira_issue_transition_automatic:'boolean',jira_issue_transition_id:'string',jira_issue_prefix:'string',jira_issue_regex:'string',issues_enabled:'boolean',project_keys:['string','string'],comment_on_event_enabled:'boolean',commit_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mattermost-slash-commands": {
      put: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mattermost-slash-commands',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "slack-slash-commands": {
      put: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/slack-slash-commands',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "packagist": {
      put: ({params,data}: {params:{id:string},data:{username:string,token:string,server:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/packagist',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{username:'string',token:'string',server:'string',push_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "phorge": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/phorge',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pipelines-email": {
      put: ({params,data}: {params:{id:string},data:{recipients:string,notify_only_broken_pipelines:boolean,notify_only_default_branch:boolean,branches_to_be_notified:string,pipeline_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pipelines-email',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{recipients:'string',notify_only_broken_pipelines:'boolean',notify_only_default_branch:'boolean',branches_to_be_notified:'string',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pivotaltracker": {
      put: ({params,data}: {params:{id:string},data:{token:string,restrict_to_branch:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pivotaltracker',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',restrict_to_branch:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "prometheus": {
      put: ({params,data}: {params:{id:string},data:{api_url:string,google_iap_audience_client_id:string,google_iap_service_account_json:string,manual_configuration:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/prometheus',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_url:'string',google_iap_audience_client_id:'string',google_iap_service_account_json:'string',manual_configuration:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pumble": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pumble',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "pushover": {
      put: ({params,data}: {params:{id:string},data:{api_key:string,user_key:string,priority:string,device:string,sound:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/pushover',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{api_key:'string',user_key:'string',priority:'string',device:'string',sound:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "redmine": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/redmine',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "ewm": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,string_issue_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/ewm',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',string_issue_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "youtrack": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/youtrack',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "clickup": {
      put: ({params,data}: {params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/clickup',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{project_url:'string',issues_url:'string',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "slack": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/slack',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean',alert_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "microsoft-teams": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/microsoft-teams',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mattermost": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mattermost',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',username:'string',channel:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',labels_to_be_notified:'string',labels_to_be_notified_behavior:'string',push_channel:'string',issue_channel:'string',incident_channel:'string',alert_channel:'string',confidential_issue_channel:'string',merge_request_channel:'string',note_channel:'string',confidential_note_channel:'string',tag_push_channel:'string',deployment_channel:'string',pipeline_channel:'string',wiki_page_channel:'string',vulnerability_channel:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "teamcity": {
      put: ({params,data}: {params:{id:string},data:{teamcity_url:string,build_type:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/teamcity',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{teamcity_url:'string',build_type:'string',username:'string',password:'string',enable_ssl_verification:'boolean',push_events:'boolean',merge_requests_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "telegram": {
      put: ({params,data}: {params:{id:string},data:{token:string,room:string,hostname:string,thread:number,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,incident_events:boolean,vulnerability_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/telegram',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',room:'string',hostname:'string',thread:'number',branches_to_be_notified:'string',notify_only_broken_pipelines:'boolean',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',incident_events:'boolean',vulnerability_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "unify-circuit": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/unify-circuit',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "webex-teams": {
      put: ({params,data}: {params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/webex-teams',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{webhook:'string',notify_only_broken_pipelines:'boolean',branches_to_be_notified:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',tag_push_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "zentao": {
      put: ({params,data}: {params:{id:string},data:{url:string,api_token:string,zentao_product_xid:string,api_url:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/zentao',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',api_token:'string',zentao_product_xid:'string',api_url:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "squash-tm": {
      put: ({params,data}: {params:{id:string},data:{url:string,token:string,issues_events:boolean,confidential_issues_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/squash-tm',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',token:'string',issues_events:'boolean',confidential_issues_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "github": {
      put: ({params,data}: {params:{id:string},data:{token:string,repository_url:string,static_constring:boolean,pipeline_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/github',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string',repository_url:'string',static_constring:'boolean',pipeline_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "git-guardian": {
      put: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/git-guardian',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "google-cloud-platform-artifact-registry": {
      put: ({params,data}: {params:{id:string},data:{artifact_registry_project_id:string,artifact_registry_repositories:string,artifact_registry_location:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/google-cloud-platform-artifact-registry',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{artifact_registry_project_id:'string',artifact_registry_repositories:'string',artifact_registry_location:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "google-cloud-platform-workload-identity-federation": {
      put: ({params,data}: {params:{id:string},data:{workload_identity_federation_project_id:string,workload_identity_federation_project_number:string,workload_identity_pool_id:string,workload_identity_pool_provider_id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/google-cloud-platform-workload-identity-federation',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{workload_identity_federation_project_id:'string',workload_identity_federation_project_number:'string',workload_identity_pool_id:'string',workload_identity_pool_provider_id:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mock-ci": {
      put: ({params,data}: {params:{id:string},data:{mock_service_url:string,enable_ssl_verification:boolean,push_events:boolean}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mock-ci',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{mock_service_url:'string',enable_ssl_verification:'boolean',push_events:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "mock-monitoring": {
      put: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/integrations/mock-monitoring',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
    },
    delete: ({params}: {params:{id:string,slug:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/integrations/:slug',variable:[{name:'id',type:'string'},{name:'slug',type:'string'}]}, [client, { params}, options]),
    getOne: ({params}: {params:{id:string,slug:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,slug:number,created_at:string,upstringd_at:string,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean,properties:object}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/integrations/:slug',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'slug',type:'string'}]}, [client, { params}, options]),
    "mattermost_slash_commands": {
      "trigger": {
        post: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/integrations/mattermost_slash_commands/trigger',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      }
    },
    "slack_slash_commands": {
      "trigger": {
        post: ({params,data}: {params:{id:string},data:{token:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/integrations/slack_slash_commands/trigger',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{token:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      }
    }
  },
  "invitations": {
    post: ({params,data}: {params:{id:string},data:{access_level:number,email:[string,string],user_id:[string,string],expires_at:string,invite_source:string}}, options?: {}): Promise<{code:201,data:{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/invitations',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{access_level:'number',email:['string','string'],user_id:['string','string'],expires_at:'string',invite_source:'invitations-api'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,query:string}}, options?: {}): Promise<{code:200,data:[{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string},{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/invitations',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'query',type:'string'}]}, [client, { params, query}, options]),
    put: ({params,data}: {params:{id:string,email:string},data:{access_level:number,expires_at:string}}, options?: {}): Promise<{code:200,data:{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}}> => handler.apply({method:'put',url:'api/v4/projects/:id/invitations/:email',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'email',type:'string'}],data:{mode:'raw',raw:{access_level:'number',expires_at:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,email:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}|{code:409}> => handler.apply({method:'delete',url:'api/v4/projects/:id/invitations/:email',variable:[{name:'id',type:'string'},{name:'email',type:'string'}]}, [client, { params}, options])
  },
  "issues": {
    "links": {
      get: ({params}: {params:{id:string,issue_iid:string}}, options?: {}): Promise<{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string,has_tasks:string,task_status:string,_links:{self:string,notes:string,award_emoji:string,project:string,closed_as_duplicate_of:string},references:{short:any,relative:any,full:any},severity:string,subscribed:string,moved_to_id:string,imported:string,imported_from:string,service_desk_reply_to:string,epic_iid:string,epic:{id:any,iid:any,title:any,url:any,group_id:any,human_readable_end_string:any,human_readable_timestamp:any},iteration:{id:any,iid:any,sequence:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,start_string:any,due_string:any,web_url:any},health_status:string,issue_link_id:string,link_type:string,link_created_at:string,link_upstringd_at:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string,has_tasks:string,task_status:string,_links:{self:string,notes:string,award_emoji:string,project:string,closed_as_duplicate_of:string},references:{short:any,relative:any,full:any},severity:string,subscribed:string,moved_to_id:string,imported:string,imported_from:string,service_desk_reply_to:string,epic_iid:string,epic:{id:any,iid:any,title:any,url:any,group_id:any,human_readable_end_string:any,human_readable_timestamp:any},iteration:{id:any,iid:any,sequence:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,start_string:any,due_string:any,web_url:any},health_status:string,issue_link_id:string,link_type:string,link_created_at:string,link_upstringd_at:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:issue_iid/links',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'}]}, [client, { params}, options]),
      post: ({params,data}: {params:{id:string,issue_iid:string},data:{target_project_id:string,target_issue_iid:string,link_type:string}}, options?: {}): Promise<{code:201,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}}|{code:400}|{code:401}> => handler.apply({method:'post',url:'api/v4/projects/:id/issues/:issue_iid/links',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'}],data:{mode:'raw',raw:{target_project_id:'string',target_issue_iid:'string',link_type:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      getOne: ({params}: {params:{id:string,issue_iid:string,issue_link_id:string}}, options?: {}): Promise<{code:200,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:issue_iid/links/:issue_link_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'},{name:'issue_link_id',type:'string'}]}, [client, { params}, options]),
      delete: ({params}: {params:{id:string,issue_iid:string,issue_link_id:string}}, options?: {}): Promise<{code:204,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:string,upstringd_at:string,closed_at:string,closed_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},labels:[string,string],milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},assignees:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},type:string,assignee:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_string:string,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:any,total_time_spent:any,human_time_estimate:any,human_total_time_spent:any},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/issues/:issue_iid/links/:issue_link_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'issue_iid',type:'string'},{name:'issue_link_id',type:'string'}]}, [client, { params}, options])
    },
    "resource_milestone_events": {
      get: ({params,query}: {params:{id:string,eventable_id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string,resource_type:string,resource_id:number,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},action:string,state:string},{id:number,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string,resource_type:string,resource_id:number,milestone:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any},action:string,state:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:eventable_id/resource_milestone_events',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'eventable_id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      getOne: ({params}: {params:{id:string,event_id:string,eventable_id:string}}, options?: {}): Promise<{code:200,data:{id:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string,resource_type:string,resource_id:number,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string},action:string,state:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/issues/:eventable_id/resource_milestone_events/:event_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'event_id',type:'string'},{name:'eventable_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "ci": {
    "lint": {
      get: ({params,query}: {params:{id:string},query?:{sha:string,content_ref:string,dry_run:string,include_jobs:string,ref:string,dry_run_ref:string}}, options?: {}): Promise<{code:200,data:{valid:boolean,errors:[string,string],warnings:[string,string],merged_yaml:string,includes:[object,object],jobs:[object,object]}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/ci/lint',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'sha',type:'string'},{name:'content_ref',type:'string'},{name:'dry_run',type:'string'},{name:'include_jobs',type:'string'},{name:'ref',type:'string'},{name:'dry_run_ref',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{content:string,dry_run:false,include_jobs:boolean,ref:string}}, options?: {}): Promise<{code:200,data:{valid:boolean,errors:[string,string],warnings:[string,string],merged_yaml:string,includes:[object,object],jobs:[object,object]}}> => handler.apply({method:'post',url:'api/v4/projects/:id/ci/lint',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{content:'string',dry_run:false,include_jobs:'boolean',ref:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "packages": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,order_by:string,sort:string,package_type:string,package_name:string,package_version:string,include_versionless:string,status:string}}, options?: {}): Promise<{code:200,data:[{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:string,last_downloaded_at:string,project_id:number,project_path:string,tags:string,pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any,user:any},pipelines:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any,user:any},versions:{id:any,version:any,created_at:any,tags:any,pipeline:any}},{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:string,last_downloaded_at:string,project_id:number,project_path:string,tags:string,pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any,user:any},pipelines:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any,user:any},versions:{id:any,version:any,created_at:any,tags:any,pipeline:any}}]}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'package_type',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'include_versionless',type:'string'},{name:'status',type:'string'}]}, [client, { params, query}, options]),
    "maven": {
      getOne: ({params,query}: {params:{id:string,file_name:string},query?:{path:string}}, options?: {}): Promise<{code:200}|{code:302}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/maven/*path/:file_name',variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],query:[{name:'path',type:'string'}]}, [client, { params, query}, options]),
      put: ({params,data}: {params:{id:string,file_name:string},data:{path:string,file:ArrayBuffer}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/maven/*path/:file_name',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],data:{mode:'raw',raw:{path:'string',file:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      "authorize": {
        put: ({params,data}: {params:{id:string,file_name:string},data:{path:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/maven/*path/:file_name/authorize',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],data:{mode:'raw',raw:{path:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      }
    },
    getOne: ({params}: {params:{id:string,package_id:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:string,last_downloaded_at:string,project_id:number,project_path:string,tags:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}},pipelines:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any}},versions:{id:string,version:string,created_at:string,tags:string,pipeline:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any,user:any}}}}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/:package_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,package_id:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/:package_id',variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}]}, [client, { params}, options]),
    "package_files": {
      get: ({params,query}: {params:{id:string,package_id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,package_id:number,created_at:string,file_name:string,size:number,file_md5:string,file_sha1:string,file_sha256:string,pipelines:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any,user:any}},{id:number,package_id:number,created_at:string,file_name:string,size:number,file_md5:string,file_sha1:string,file_sha256:string,pipelines:{id:any,iid:any,project_id:any,sha:any,ref:any,status:any,source:any,created_at:any,upstringd_at:any,web_url:any,user:any}}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/:package_id/package_files',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      delete: ({params}: {params:{id:string,package_id:string,package_file_id:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/:package_id/package_files/:package_file_id',variable:[{name:'id',type:'string'},{name:'package_id',type:'string'},{name:'package_file_id',type:'string'}]}, [client, { params}, options])
    },
    "pipelines": {
      get: ({params,query}: {params:{id:string,package_id:string},query?:{page:string,per_page:string,cursor:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:string,upstringd_at:string,web_url:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/:package_id/pipelines',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'cursor',type:'string'}]}, [client, { params, query}, options])
    },
    "composer": {
      post: ({params,data}: {params:{id:string},data:{branch:string,tag:string}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/composer',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{branch:'string',tag:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      "archives": {
        get: ({params,query}: {params:{id:string},query?:{sha:string,package_name:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/composer/archives/*package_name',variable:[{name:'id',type:'string'}],query:[{name:'sha',type:'string'},{name:'package_name',type:'string'}]}, [client, { params, query}, options])
      }
    },
    "conan": {
      "v1": {
        "ping": {
          get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/ping',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
        },
        "conans": {
          "search": {
            get: ({params,query}: {params:{id:string},query?:{q:string}}, options?: {}): Promise<{code:200}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/search',variable:[{name:'id',type:'string'}],query:[{name:'q',type:'string'}]}, [client, { params, query}, options])
          },
          getOne: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string}}, options?: {}): Promise<{code:200,data:{recipe_snapshot:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}]}, [client, { params}, options]),
          delete: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}]}, [client, { params}, options]),
          "packages": {
            getOne: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string}}, options?: {}): Promise<{code:200,data:{package_snapshot:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}]}, [client, { params}, options]),
            "digest": {
              get: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string}}, options?: {}): Promise<{code:200,data:{package_urls:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/digest',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}]}, [client, { params}, options])
            },
            "download_urls": {
              get: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string}}, options?: {}): Promise<{code:200,data:{package_urls:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/download_urls',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}]}, [client, { params}, options])
            },
            "upload_urls": {
              post: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string}}, options?: {}): Promise<{code:200,data:{upload_urls:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/upload_urls',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'conan_package_reference',type:'string'}]}, [client, { params}, options])
            }
          },
          "digest": {
            get: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string}}, options?: {}): Promise<{code:200,data:{recipe_urls:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/digest',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}]}, [client, { params}, options])
          },
          "download_urls": {
            get: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string}}, options?: {}): Promise<{code:200,data:{recipe_urls:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/download_urls',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}]}, [client, { params}, options])
          },
          "upload_urls": {
            post: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string}}, options?: {}): Promise<{code:200,data:{upload_urls:object}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/upload_urls',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'}]}, [client, { params}, options])
          }
        },
        "users": {
          "authenticate": {
            get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/users/authenticate',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
          },
          "check_credentials": {
            get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/users/check_credentials',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
          }
        },
        "files": {
          "export": {
            getOne: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'file_name',type:'string'}]}, [client, { params}, options]),
            put: ({params,data}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string},data:{file:ArrayBuffer}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'file_name',type:'string'}],data:{mode:'raw',raw:{file:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
            "authorize": {
              put: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name/authorize',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'file_name',type:'string'}]}, [client, { params}, options])
            }
          },
          "package": {
            getOne: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string}}, options?: {}): Promise<{code:200}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'conan_package_reference',type:'string'},{name:'package_revision',type:'string'},{name:'file_name',type:'string'}]}, [client, { params}, options]),
            put: ({params,data}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string},data:{file:ArrayBuffer}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'conan_package_reference',type:'string'},{name:'package_revision',type:'string'},{name:'file_name',type:'string'}],data:{mode:'raw',raw:{file:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
            "authorize": {
              put: ({params}: {params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name/authorize',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_username',type:'string'},{name:'package_channel',type:'string'},{name:'recipe_revision',type:'string'},{name:'conan_package_reference',type:'string'},{name:'package_revision',type:'string'},{name:'file_name',type:'string'}]}, [client, { params}, options])
            }
          }
        }
      }
    },
    "debian": {
      "dists": {
        "Release.gpg": {
          get: ({params,query}: {params:{id:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/Release.gpg',variable:[{name:'id',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
        },
        "Release": {
          get: ({params,query}: {params:{id:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/Release',variable:[{name:'id',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
        },
        "InRelease": {
          get: ({params,query}: {params:{id:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/InRelease',variable:[{name:'id',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
        },
        "debian-installer": {
          "Packages": {
            get: ({params,query}: {params:{id:string,component:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:202}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/debian-installer/binary-{{architecture}}/Packages',variable:[{name:'id',type:'string'},{name:'component',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
          },
          "by-hash": {
            "SHA256": {
              getOne: ({params,query}: {params:{id:string,component:string,file_sha256:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:202}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/debian-installer/binary-{{architecture}}/by-hash/SHA256/:file_sha256',variable:[{name:'id',type:'string'},{name:'component',type:'string'},{name:'file_sha256',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
            }
          }
        },
        "source": {
          "Sources": {
            get: ({params,query}: {params:{id:string,component:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:202}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/source/Sources',variable:[{name:'id',type:'string'},{name:'component',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
          },
          "by-hash": {
            "SHA256": {
              getOne: ({params,query}: {params:{id:string,component:string,file_sha256:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:202}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/source/by-hash/SHA256/:file_sha256',variable:[{name:'id',type:'string'},{name:'component',type:'string'},{name:'file_sha256',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
            }
          }
        },
        "Packages": {
          get: ({params,query}: {params:{id:string,component:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:202}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/binary-{{architecture}}/Packages',variable:[{name:'id',type:'string'},{name:'component',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
        },
        "by-hash": {
          "SHA256": {
            getOne: ({params,query}: {params:{id:string,component:string,file_sha256:string},query?:{distribution:string}}, options?: {}): Promise<{code:200}|{code:202}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/dists/*distribution/:component/binary-{{architecture}}/by-hash/SHA256/:file_sha256',variable:[{name:'id',type:'string'},{name:'component',type:'string'},{name:'file_sha256',type:'string'}],query:[{name:'distribution',type:'string'}]}, [client, { params, query}, options])
          }
        }
      },
      "pool": {
        getOne: ({params}: {params:{id:string,distribution:string,letter:string,package_name:string,package_version:string,file_name:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/debian/pool/:distribution/:letter/:package_name/:package_version/:file_name',variable:[{name:'id',type:'string'},{name:'distribution',type:'string'},{name:'letter',type:'string'},{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'file_name',type:'string'}]}, [client, { params}, options])
      },
      put: ({params,data}: {params:{id:string,file_name:string},data:{file:ArrayBuffer,component:string,distribution:string}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/debian/:file_name',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],data:{mode:'raw',raw:{file:'ArrayBuffer',component:'string',distribution:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      "authorize": {
        put: ({params,data}: {params:{id:string,file_name:string},data:{component:string,distribution:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/debian/:file_name/authorize',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'file_name',type:'string'}],data:{mode:'raw',raw:{component:'string',distribution:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      }
    },
    "generic": {
      put: ({params,data}: {params:{id:string,package_name:string},data:{package_version:string,file:ArrayBuffer,path:string,status:string,select:string}}, options?: {}): Promise<{code:200}|{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],data:{mode:'raw',raw:{package_version:'string',file:'ArrayBuffer',path:'string',status:'string',select:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      get: ({params,query}: {params:{id:string,package_name:string},query?:{package_version:string,path:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}',variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],query:[{name:'package_version',type:'string'},{name:'path',type:'string'}]}, [client, { params, query}, options]),
      "authorize": {
        put: ({params,data}: {params:{id:string,package_name:string},data:{package_version:string,path:number,status:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}/authorize',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],data:{mode:'raw',raw:{package_version:'string',path:'number',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
      }
    },
    "go": {
      "@v": {
        "list": {
          get: ({params,query}: {params:{id:string},query?:{module_name:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/go/*module_name/@v/list',variable:[{name:'id',type:'string'}],query:[{name:'module_name',type:'string'}]}, [client, { params, query}, options])
        },
        get: ({params,query}: {params:{id:string},query?:{module_name:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/go/*module_name/@v/{{module_version}}.zip',variable:[{name:'id',type:'string'}],query:[{name:'module_name',type:'string'}]}, [client, { params, query}, options])
      }
    },
    "helm": {
      "index.yaml": {
        get: ({params}: {params:{id:string,channel:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/helm/:channel/index.yaml',variable:[{name:'id',type:'string'},{name:'channel',type:'string'}]}, [client, { params}, options])
      },
      "charts": {
        get: ({params}: {params:{id:string,channel:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/helm/:channel/charts/{{file_name}}.tgz',variable:[{name:'id',type:'string'},{name:'channel',type:'string'}]}, [client, { params}, options])
      },
      "api": {
        "charts": {
          post: ({params,data}: {params:{id:string,channel:string},data:{chart:ArrayBuffer}}, options?: {}): Promise<{code:201}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/helm/api/:channel/charts',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'channel',type:'string'}],data:{mode:'raw',raw:{chart:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
          "authorize": {
            post: ({params}: {params:{id:string,channel:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/helm/api/:channel/charts/authorize',variable:[{name:'id',type:'string'},{name:'channel',type:'string'}]}, [client, { params}, options])
          }
        }
      }
    },
    "ml_models": {
      "files": {
        put: ({params,data}: {params:{id:string,model_version_id:string},data:{file:ArrayBuffer,path:string,status:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'model_version_id',type:'string'}],data:{mode:'raw',raw:{file:'ArrayBuffer',path:'string',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
        get: ({params,query}: {params:{id:string,model_version_id:string},query?:{path:string,status:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}',variable:[{name:'id',type:'string'},{name:'model_version_id',type:'string'}],query:[{name:'path',type:'string'},{name:'status',type:'string'}]}, [client, { params, query}, options]),
        "authorize": {
          put: ({params,data}: {params:{id:string,model_version_id:string},data:{path:string,status:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}/authorize',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'model_version_id',type:'string'}],data:{mode:'raw',raw:{path:'string',status:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
        }
      }
    },
    "npm": {
      get: ({params,query}: {params:{id:string},query?:{package_name:string}}, options?: {}): Promise<{code:200,data:{name:string,versions:object,'dist-tags':object}}|{code:302}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/npm/*package_name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'}]}, [client, { params, query}, options]),
      "-": {
        get: ({params,query}: {params:{id:string},query?:{package_name:string,file_name:string}}, options?: {}): Promise<{code:200}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/npm/*package_name/-/*file_name',variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'},{name:'file_name',type:'string'}]}, [client, { params, query}, options]),
        "npm": {
          "v1": {
            "security": {
              "advisories": {
                "bulk": {
                  post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:307}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/npm/-/npm/v1/security/advisories/bulk',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
                }
              },
              "audits": {
                "quick": {
                  post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:307}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/npm/-/npm/v1/security/audits/quick',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
                }
              }
            }
          }
        },
        "package": {
          "dist-tags": {
            get: ({params,query}: {params:{id:string},query?:{package_name:string}}, options?: {}): Promise<{code:200,data:{dist_tags:object}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'}]}, [client, { params, query}, options]),
            put: ({params,data}: {params:{id:string,tag:string},data:{package_name:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags/:tag',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'tag',type:'string'}],data:{mode:'raw',raw:{package_name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
            delete: ({params,query}: {params:{id:string,tag:string},query?:{package_name:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags/:tag',variable:[{name:'id',type:'string'},{name:'tag',type:'string'}],query:[{name:'package_name',type:'string'}]}, [client, { params, query}, options])
          }
        }
      },
      put: ({params,data}: {params:{id:string,package_name:string},data:{versions:object}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/npm/:package_name',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'package_name',type:'string'}],data:{mode:'raw',raw:{versions:'object'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    },
    "nuget": {
      put: ({params,data}: {params:{id:string},data:{package:ArrayBuffer}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{package:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      "index": {
        get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{version:string,resources:[object,object]}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/index',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
      },
      "authorize": {
        put: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/authorize',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
      },
      "symbolpackage": {
        put: ({params,data}: {params:{id:string},data:{package:ArrayBuffer}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/symbolpackage',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{package:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
        "authorize": {
          put: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/symbolpackage/authorize',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
        }
      },
      delete: ({params,query}: {params:{id:string},query?:{package_name:string,package_version:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/packages/nuget/*package_name/*package_version',variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'},{name:'package_version',type:'string'}]}, [client, { params, query}, options]),
      "symbolfiles": {
        get: ({params,query}: {params:{id:string},query?:{file_name:string,signature:string,same_file_name:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name',headers:{Symbolchecksum:'<string>'},variable:[{name:'id',type:'string'}],query:[{name:'file_name',type:'string'},{name:'signature',type:'string'},{name:'same_file_name',type:'string'}]}, [client, { params, query}, options])
      },
      "v2": {
        get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/v2',variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
        put: ({params,data}: {params:{id:string},data:{package:ArrayBuffer}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/v2',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{package:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
        "$metadata": {
          get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/v2/$metadata',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
        },
        "authorize": {
          put: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/nuget/v2/authorize',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
        }
      },
      "metadata": {
        "index": {
          get: ({params,query}: {params:{id:string},query?:{package_name:string}}, options?: {}): Promise<{code:200,data:{count:number,items:[{'@id':string,lower:string,upper:string,count:number,items:[any,any]},{'@id':string,lower:string,upper:string,count:number,items:[any,any]}]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/metadata/*package_name/index',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'}]}, [client, { params, query}, options])
        },
        get: ({params,query}: {params:{id:string},query?:{package_name:string,package_version:string}}, options?: {}): Promise<{code:200,data:{'@id':string,packageContent:string,catalogEntry:{'@id':string,dependencyGroups:[any,any],id:string,version:string,tags:string,packageContent:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string,published:string}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/metadata/*package_name/*package_version',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'},{name:'package_version',type:'string'}]}, [client, { params, query}, options])
      },
      "query": {
        get: ({params,query}: {params:{id:string},query?:{q:string,skip:string,take:string,prerelease:string}}, options?: {}): Promise<{code:200,data:{totalHits:number,data:[{'@type':string,id:string,title:string,totalDownloads:number,verified:boolean,version:string,versions:any,tags:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string},{'@type':string,id:string,title:string,totalDownloads:number,verified:boolean,version:string,versions:any,tags:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string}]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/query',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'q',type:'string'},{name:'skip',type:'string'},{name:'take',type:'string'},{name:'prerelease',type:'string'}]}, [client, { params, query}, options])
      },
      "download": {
        "index": {
          get: ({params,query}: {params:{id:string},query?:{package_name:string}}, options?: {}): Promise<{code:200,data:{versions:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/download/*package_name/index',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'}]}, [client, { params, query}, options])
        },
        get: ({params,query}: {params:{id:string},query?:{package_name:string,package_version:string,package_filename:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/nuget/download/*package_name/*package_version/*package_filename',variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'},{name:'package_version',type:'string'},{name:'package_filename',type:'string'}]}, [client, { params, query}, options])
      }
    },
    "pypi": {
      post: ({params,data}: {params:{id:string},data:{content:ArrayBuffer,name:string,version:string,requires_python:string,md5_digest:string,sha256_digest:string,metadata_version:string,author_email:string,description:string,description_content_type:string,summary:string,keywords:string}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/pypi',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{content:'ArrayBuffer',name:'string',version:'string',requires_python:'string',md5_digest:'string',sha256_digest:'string',metadata_version:'string',author_email:'string',description:'string',description_content_type:'string',summary:'string',keywords:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      "files": {
        get: ({params,query}: {params:{id:string,sha256:string},query?:{file_identifier:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/pypi/files/:sha256/*file_identifier',variable:[{name:'id',type:'string'},{name:'sha256',type:'string'}],query:[{name:'file_identifier',type:'string'}]}, [client, { params, query}, options])
      },
      "simple": {
        get: ({params,query}: {params:{id:string},query?:{package_name:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/pypi/simple/*package_name',variable:[{name:'id',type:'string'}],query:[{name:'package_name',type:'string'}]}, [client, { params, query}, options])
      },
      "authorize": {
        post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/pypi/authorize',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
      }
    },
    "rpm": {
      post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rpm',variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
      "repodata": {
        get: ({params,query}: {params:{id:string},query?:{file_name:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rpm/repodata/*file_name',variable:[{name:'id',type:'string'}],query:[{name:'file_name',type:'string'}]}, [client, { params, query}, options])
      },
      get: ({params,query}: {params:{id:string},query?:{package_file_id:string,file_name:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rpm/*package_file_id/*file_name',variable:[{name:'id',type:'string'}],query:[{name:'package_file_id',type:'string'},{name:'file_name',type:'string'}]}, [client, { params, query}, options]),
      "authorize": {
        post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rpm/authorize',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
      }
    },
    "rubygems": {
      getOne: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/:file_name',headers:{'Content-Type':'application/octet-stream'},variable:[{name:'id',type:'string'}],data:{mode:'file'}}, [client, { params}, options]),
      "quick": {
        "Marshal.4.8": {
          getOne: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/quick/Marshal.4.8/:file_name',headers:{'Content-Type':'application/octet-stream'},variable:[{name:'id',type:'string'}],data:{mode:'file'}}, [client, { params}, options])
        }
      },
      "gems": {
        getOne: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/gems/:file_name',headers:{'Content-Type':'application/octet-stream'},variable:[{name:'id',type:'string'}],data:{mode:'file'}}, [client, { params}, options])
      },
      "api": {
        "v1": {
          "gems": {
            post: ({params,data}: {params:{id:string},data:{file:ArrayBuffer}}, options?: {}): Promise<{code:201}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rubygems/api/v1/gems',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{file:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
            "authorize": {
              post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/packages/rubygems/api/v1/gems/authorize',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
            }
          },
          "dependencies": {
            get: ({params,query}: {params:{id:string},query?:{gems:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/rubygems/api/v1/dependencies',variable:[{name:'id',type:'string'}],query:[{name:'gems',type:'string'}]}, [client, { params, query}, options])
          }
        }
      }
    },
    "terraform": {
      "modules": {
        getOne: ({params,query}: {params:{id:string,module_name:string,module_system:string},query?:{'terraform-get':string}}, options?: {}): Promise<{code:204}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system',variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],query:[{name:'terraform-get',type:'string'}]}, [client, { params, query}, options]),
        get: ({params,query}: {params:{id:string,module_name:string,module_system:string},query?:{module_version:string,'terraform-get':string}}, options?: {}): Promise<{code:204}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version',variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],query:[{name:'module_version',type:'string'},{name:'terraform-get',type:'string'}]}, [client, { params, query}, options]),
        "file": {
          put: ({params,data}: {params:{id:string,module_name:string,module_system:string},data:{module_version:string}}, options?: {}): Promise<{code:201}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version/file',headers:{'Content-Type':'multipart/form-data'},variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],data:{mode:'formdata',formdata:{module_version:'string'}}}, [client, { params, data}, options]),
          "authorize": {
            put: ({params,data}: {params:{id:string,module_name:string,module_system:string},data:{module_version:string}}, options?: {}): Promise<{code:200}|{code:403}> => handler.apply({method:'put',url:'api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version/file/authorize',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'module_name',type:'string'},{name:'module_system',type:'string'}],data:{mode:'raw',raw:{module_version:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
          }
        }
      }
    }
  },
  "members": {
    get: ({params,query}: {params:{id:string},query?:{query:string,user_ids:string,skip_users:string,show_seat_info:string,with_saml_identity:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,access_level:string,created_at:string,created_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},expires_at:string,group_saml_identity:{provider:any,extern_uid:any,saml_provider_id:any},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:any,group_id:any,name:any,description:any,base_access_level:any,admin_cicd_variables:any,admin_compliance_framework:any,admin_group_member:any,admin_merge_request:any,admin_push_rules:any,admin_terraform_state:any,admin_vulnerability:any,admin_web_hook:any,archive_project:any,manage_deploy_tokens:any,manage_group_access_tokens:any,manage_merge_request_settings:any,manage_project_access_tokens:any,manage_security_policy_link:any,read_code:any,read_dependency:any,read_vulnerability:any,remove_group:any,remove_project:any}},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,access_level:string,created_at:string,created_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},expires_at:string,group_saml_identity:{provider:any,extern_uid:any,saml_provider_id:any},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:any,group_id:any,name:any,description:any,base_access_level:any,admin_cicd_variables:any,admin_compliance_framework:any,admin_group_member:any,admin_merge_request:any,admin_push_rules:any,admin_terraform_state:any,admin_vulnerability:any,admin_web_hook:any,archive_project:any,manage_deploy_tokens:any,manage_group_access_tokens:any,manage_merge_request_settings:any,manage_project_access_tokens:any,manage_security_policy_link:any,read_code:any,read_dependency:any,read_vulnerability:any,remove_group:any,remove_project:any}}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/members',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'query',type:'string'},{name:'user_ids',type:'string'},{name:'skip_users',type:'string'},{name:'show_seat_info',type:'string'},{name:'with_saml_identity',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{access_level:number,user_id:number,username:string,expires_at:string,invite_source:string}}, options?: {}): Promise<{code:201,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}> => handler.apply({method:'post',url:'api/v4/projects/:id/members',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{access_level:'number',user_id:'number',username:'string',expires_at:'string',invite_source:'members-api'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "all": {
      get: ({params,query}: {params:{id:string},query?:{query:string,user_ids:string,show_seat_info:string,state:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,access_level:string,created_at:string,created_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},expires_at:string,group_saml_identity:{provider:any,extern_uid:any,saml_provider_id:any},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:any,group_id:any,name:any,description:any,base_access_level:any,admin_cicd_variables:any,admin_compliance_framework:any,admin_group_member:any,admin_merge_request:any,admin_push_rules:any,admin_terraform_state:any,admin_vulnerability:any,admin_web_hook:any,archive_project:any,manage_deploy_tokens:any,manage_group_access_tokens:any,manage_merge_request_settings:any,manage_project_access_tokens:any,manage_security_policy_link:any,read_code:any,read_dependency:any,read_vulnerability:any,remove_group:any,remove_project:any}},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string,access_level:string,created_at:string,created_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},expires_at:string,group_saml_identity:{provider:any,extern_uid:any,saml_provider_id:any},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:any,group_id:any,name:any,description:any,base_access_level:any,admin_cicd_variables:any,admin_compliance_framework:any,admin_group_member:any,admin_merge_request:any,admin_push_rules:any,admin_terraform_state:any,admin_vulnerability:any,admin_web_hook:any,archive_project:any,manage_deploy_tokens:any,manage_group_access_tokens:any,manage_merge_request_settings:any,manage_project_access_tokens:any,manage_security_policy_link:any,read_code:any,read_dependency:any,read_vulnerability:any,remove_group:any,remove_project:any}}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/members/all',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'query',type:'string'},{name:'user_ids',type:'string'},{name:'show_seat_info',type:'string'},{name:'state',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      getOne: ({params}: {params:{id:string,user_id:string}}, options?: {}): Promise<{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}> => handler.apply({method:'get',url:'api/v4/projects/:id/members/all/:user_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}]}, [client, { params}, options])
    },
    getOne: ({params}: {params:{id:string,user_id:string}}, options?: {}): Promise<{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}> => handler.apply({method:'get',url:'api/v4/projects/:id/members/:user_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,user_id:string},data:{access_level:number,expires_at:string,member_role_id:number}}, options?: {}): Promise<{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:string,description:string,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}> => handler.apply({method:'put',url:'api/v4/projects/:id/members/:user_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],data:{mode:'raw',raw:{access_level:'number',expires_at:'string',member_role_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params,query}: {params:{id:string,user_id:string},query?:{skip_subresources:string,unassign_issuables:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/members/:user_id',variable:[{name:'id',type:'string'},{name:'user_id',type:'string'}],query:[{name:'skip_subresources',type:'string'},{name:'unassign_issuables',type:'string'}]}, [client, { params, query}, options])
  },
  "create_ci_config": {
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201}> => handler.apply({method:'post',url:'api/v4/projects/:id/create_ci_config',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "pages": {
    delete: ({params}: {params:{id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/pages',variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    patch: ({params,data}: {params:{id:string},data:{pages_unique_domain_enabled:boolean,pages_https_only:boolean}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'patch',url:'api/v4/projects/:id/pages',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{pages_unique_domain_enabled:'boolean',pages_https_only:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/pages',variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    "domains": {
      get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:any,expired:any,certificate:any,certificate_string:any}},{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:any,expired:any,certificate:any,certificate_string:any}}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/pages/domains',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{domain:string,certificate:ArrayBuffer,key:ArrayBuffer,auto_ssl_enabled:false,user_provided_certificate:string,user_provided_key:string}}, options?: {}): Promise<{code:201,data:{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:string,expired:string,certificate:string,certificate_string:string}}}> => handler.apply({method:'post',url:'api/v4/projects/:id/pages/domains',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{domain:'string',certificate:'ArrayBuffer',key:'ArrayBuffer',auto_ssl_enabled:false,user_provided_certificate:'string',user_provided_key:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      getOne: ({params}: {params:{id:string,domain:string}}, options?: {}): Promise<{code:200,data:{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:string,expired:string,certificate:string,certificate_string:string}}}> => handler.apply({method:'get',url:'api/v4/projects/:id/pages/domains/:domain',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'domain',type:'string'}]}, [client, { params}, options]),
      put: ({params,data}: {params:{id:string,domain:string},data:{certificate:ArrayBuffer,key:ArrayBuffer,auto_ssl_enabled:boolean}}, options?: {}): Promise<{code:200}> => handler.apply({method:'put',url:'api/v4/projects/:id/pages/domains/:domain',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'domain',type:'string'}],data:{mode:'raw',raw:{certificate:'ArrayBuffer',key:'ArrayBuffer',auto_ssl_enabled:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{id:string,domain:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/pages/domains/:domain',variable:[{name:'id',type:'string'},{name:'domain',type:'string'}]}, [client, { params}, options])
    }
  },
  "avatar": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'get',url:'api/v4/projects/:id/avatar',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "clusters": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},platform_kubernetes:{api_url:any,namespace:any,authorization_type:any,ca_cert:any},provider_gcp:{cluster_id:any,status_name:any,gcp_project_id:any,zone:any,machine_type:any,num_nodes:any,endpoint:any},management_project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any}},{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},platform_kubernetes:{api_url:any,namespace:any,authorization_type:any,ca_cert:any},provider_gcp:{cluster_id:any,status_name:any,gcp_project_id:any,zone:any,machine_type:any,num_nodes:any,endpoint:any},management_project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any}}]}|{code:403}> => handler.apply({method:'get',url:'api/v4/projects/:id/clusters',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    getOne: ({params}: {params:{id:string,cluster_id:string}}, options?: {}): Promise<{code:200,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string}}}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/clusters/:cluster_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'cluster_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,cluster_id:string},data:{name:string,domain:string,environment_scope:string,namespace_per_environment:true,management_project_id:number,enabled:boolean,managed:boolean,platform_kubernetes_attributes:{api_url:string,token:string,ca_cert:string,namespace:string}}}, options?: {}): Promise<{code:200,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string}}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/clusters/:cluster_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'cluster_id',type:'string'}],data:{mode:'raw',raw:{name:'string',domain:'string',environment_scope:'string',namespace_per_environment:true,management_project_id:'number',enabled:'boolean',managed:'boolean',platform_kubernetes_attributes:{api_url:'string',token:'string',ca_cert:'string',namespace:'string'}},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,cluster_id:string}}, options?: {}): Promise<{code:204,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string}}}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/clusters/:cluster_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'cluster_id',type:'string'}]}, [client, { params}, options]),
    "user": {
      post: ({params,data}: {params:{id:string},data:{name:string,platform_kubernetes_attributes:{api_url:string,token:string,ca_cert:string,namespace:string,authorization_type:string},enabled:true,domain:string,environment_scope:string,namespace_per_environment:true,management_project_id:number,managed:true}}, options?: {}): Promise<{code:201,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string}}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/clusters/user',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',platform_kubernetes_attributes:{api_url:'string',token:'string',ca_cert:'string',namespace:'string',authorization_type:'rbac'},enabled:true,domain:'string',environment_scope:'*',namespace_per_environment:true,management_project_id:'number',managed:true},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "registry": {
    "repositories": {
      get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,tags:string,tags_count:string}}, options?: {}): Promise<{code:200,data:[{id:number,name:string,path:string,project_id:number,location:string,created_at:string,cleanup_policy_started_at:string,tags_count:number,tags:{name:any,path:any,location:any},delete_api_path:string,size:number,status:string},{id:number,name:string,path:string,project_id:number,location:string,created_at:string,cleanup_policy_started_at:string,tags_count:number,tags:{name:any,path:any,location:any},delete_api_path:string,size:number,status:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/registry/repositories',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'tags',type:'string'},{name:'tags_count',type:'string'}]}, [client, { params, query}, options]),
      delete: ({params}: {params:{id:string,repository_id:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/registry/repositories/:repository_id',variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'}]}, [client, { params}, options]),
      "tags": {
        get: ({params,query}: {params:{id:string,repository_id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{name:string,path:string,location:string},{name:string,path:string,location:string}]}|{code:401}|{code:404}|{code:405}> => handler.apply({method:'get',url:'api/v4/projects/:id/registry/repositories/:repository_id/tags',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
        delete: ({params}: {params:{id:string,repository_id:string,tag_name:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/registry/repositories/:repository_id/tags/:tag_name',variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'},{name:'tag_name',type:'string'}]}, [client, { params}, options]),
        getOne: ({params}: {params:{id:string,repository_id:string,tag_name:string}}, options?: {}): Promise<{code:200,data:{name:string,path:string,location:string,revision:string,short_revision:string,digest:string,created_at:string,total_size:number}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/registry/repositories/:repository_id/tags/:tag_name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'repository_id',type:'string'},{name:'tag_name',type:'string'}]}, [client, { params}, options])
      }
    }
  },
  "events": {
    get: ({params,query}: {params:{id:string},query?:{action:string,target_type:string,before:string,after:string,sort:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:number,project_id:number,action_name:string,target_id:number,target_iid:number,target_type:string,author_id:number,target_title:string,created_at:string,note:{id:string,type:string,body:string,attachment:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string,upstringd_at:string,system:string,noteable_id:string,noteable_type:string,project_id:string,commit_id:string,position:string,resolvable:string,resolved:string,resolved_by:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},resolved_at:string,confidential:string,internal:string,imported:string,imported_from:string,noteable_iid:string,commands_changes:string},author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},wiki_page:{format:string,slug:string,title:string},imported:boolean,imported_from:string,push_data:{commit_count:number,action:string,ref_type:string,commit_from:string,commit_to:string,ref:string,commit_title:string,ref_count:number},author_username:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/events',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'action',type:'string'},{name:'target_type',type:'string'},{name:'before',type:'string'},{name:'after',type:'string'},{name:'sort',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
  },
  "export": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,export_status:string,_links:{api_url:string,web_url:string}}}|{code:401}|{code:403}|{code:404}|{code:503}> => handler.apply({method:'get',url:'api/v4/projects/:id/export',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    post: ({params,data}: {params:{id:string},data:{description:string,upload:{url:string,http_method:string}}}, options?: {}): Promise<{code:202}|{code:400}|{code:401}|{code:403}|{code:404}|{code:429}|{code:503}> => handler.apply({method:'post',url:'api/v4/projects/:id/export',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{description:'string',upload:{url:'string',http_method:'PUT'}},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "download": {
      get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:403}|{code:404}|{code:503}> => handler.apply({method:'get',url:'api/v4/projects/:id/export/download',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
    }
  },
  "export_relations": {
    post: ({params,data}: {params:{id:string},data:{batched:boolean}}, options?: {}): Promise<{code:202}|{code:400}|{code:401}|{code:403}|{code:404}|{code:503}> => handler.apply({method:'post',url:'api/v4/projects/:id/export_relations',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{batched:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "download": {
      get: ({params,query}: {params:{id:string},query?:{relation:string,batched:string,batch_number:string}}, options?: {}): Promise<{code:200}|{code:400}|{code:401}|{code:403}|{code:404}|{code:500}|{code:503}> => handler.apply({method:'get',url:'api/v4/projects/:id/export_relations/download',variable:[{name:'id',type:'string'}],query:[{name:'relation',type:'string'},{name:'batched',type:'string'},{name:'batch_number',type:'string'}]}, [client, { params, query}, options])
    },
    "status": {
      get: ({params,query}: {params:{id:string},query?:{relation:string}}, options?: {}): Promise<{code:200,data:[{relation:string,status:string,error:string,upstringd_at:string,batched:boolean,batches_count:number,total_objects_count:number,batches:{status:any,batch_number:any,objects_count:any,error:any,upstringd_at:any}},{relation:string,status:string,error:string,upstringd_at:string,batched:boolean,batches_count:number,total_objects_count:number,batches:{status:any,batch_number:any,objects_count:any,error:any,upstringd_at:any}}]}|{code:401}|{code:403}|{code:404}|{code:503}> => handler.apply({method:'get',url:'api/v4/projects/:id/export_relations/status',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'relation',type:'string'}]}, [client, { params, query}, options])
    }
  },
  "hooks": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:string,url:string,name:string,description:string,created_at:string,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_upstring_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:string,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean},{id:string,url:string,name:string,description:string,created_at:string,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_upstring_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:string,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/hooks',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{url:string,name:string,description:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,note_events:boolean,confidential_note_events:boolean,job_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,releases_events:boolean,emoji_events:boolean,resource_access_token_events:boolean,enable_ssl_verification:boolean,token:string,push_events_branch_filter:string,custom_webhook_template:string,url_variables:[{key:string,value:string},{key:string,value:string}]}}, options?: {}): Promise<{code:201,data:{id:string,url:string,name:string,description:string,created_at:string,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_upstring_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:string,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}}|{code:400}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/hooks',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',name:'string',description:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',job_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',releases_events:'boolean',emoji_events:'boolean',resource_access_token_events:'boolean',enable_ssl_verification:'boolean',token:'string',push_events_branch_filter:'string',custom_webhook_template:'string',url_variables:[{key:'string',value:'string'},{key:'string',value:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,hook_id:string}}, options?: {}): Promise<{code:200,data:{id:string,url:string,name:string,description:string,created_at:string,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_upstring_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:string,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/hooks/:hook_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'hook_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,hook_id:string},data:{url:string,name:string,description:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,note_events:boolean,confidential_note_events:boolean,job_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,releases_events:boolean,emoji_events:boolean,resource_access_token_events:boolean,enable_ssl_verification:boolean,token:string,push_events_branch_filter:string,custom_webhook_template:string,url_variables:[{key:string,value:string},{key:string,value:string}]}}, options?: {}): Promise<{code:200,data:{id:string,url:string,name:string,description:string,created_at:string,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_upstring_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:string,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}}|{code:400}|{code:404}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/hooks/:hook_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'hook_id',type:'string'}],data:{mode:'raw',raw:{url:'string',name:'string',description:'string',push_events:'boolean',issues_events:'boolean',confidential_issues_events:'boolean',merge_requests_events:'boolean',tag_push_events:'boolean',note_events:'boolean',confidential_note_events:'boolean',job_events:'boolean',pipeline_events:'boolean',wiki_page_events:'boolean',deployment_events:'boolean',releases_events:'boolean',emoji_events:'boolean',resource_access_token_events:'boolean',enable_ssl_verification:'boolean',token:'string',push_events_branch_filter:'string',custom_webhook_template:'string',url_variables:[{key:'string',value:'string'},{key:'string',value:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,hook_id:string}}, options?: {}): Promise<{code:204,data:{id:string,url:string,name:string,description:string,created_at:string,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_upstring_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:string,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/hooks/:hook_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'hook_id',type:'string'}]}, [client, { params}, options]),
    "test": {
      post: ({params}: {params:{hook_id:string,trigger:string,id:string}}, options?: {}): Promise<{code:201}|{code:400}|{code:404}|{code:422}|{code:429}> => handler.apply({method:'post',url:'api/v4/projects/:id/hooks/:hook_id/test/:trigger',variable:[{name:'hook_id',type:'string'},{name:'trigger',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
    },
    "url_variables": {
      put: ({params,data}: {params:{hook_id:string,key:string,id:string},data:{value:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'put',url:'api/v4/projects/:id/hooks/:hook_id/url_variables/:key',headers:{'Content-Type':'application/json'},variable:[{name:'hook_id',type:'string'},{name:'key',type:'string'},{name:'id',type:'string'}],data:{mode:'raw',raw:{value:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{hook_id:string,key:string,id:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/hooks/:hook_id/url_variables/:key',variable:[{name:'hook_id',type:'string'},{name:'key',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
    }
  },
  "import": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:string,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:string,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:object}}|{code:400}|{code:401}|{code:403}|{code:404}|{code:503}> => handler.apply({method:'get',url:'api/v4/projects/:id/import',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    "authorize": {
      post: ({}: {}, options?: {}): Promise<{code:201}> => handler.apply({method:'post',url:'api/v4/projects/import/authorize',variable:[]}, [client, {}, options])
    }
  },
  "relation-imports": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:string,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:string,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:object}}|{code:400}|{code:401}|{code:403}|{code:404}|{code:503}> => handler.apply({method:'get',url:'api/v4/projects/:id/relation-imports',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "job_token_scope": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{inbound_enabled:boolean,outbound_enabled:boolean}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/job_token_scope',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    patch: ({params,data}: {params:{id:string},data:{enabled:boolean}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'patch',url:'api/v4/projects/:id/job_token_scope',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{enabled:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "allowlist": {
      get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/job_token_scope/allowlist',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{target_project_id:number}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}}|{code:400}|{code:401}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/job_token_scope/allowlist',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{target_project_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{id:string,target_project_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/job_token_scope/allowlist/:target_project_id',variable:[{name:'id',type:'string'},{name:'target_project_id',type:'string'}]}, [client, { params}, options])
    },
    "groups_allowlist": {
      get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/job_token_scope/groups_allowlist',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
      post: ({params,data}: {params:{id:string},data:{target_group_id:number}}, options?: {}): Promise<{code:201,data:{id:string,web_url:string,name:string}}|{code:400}|{code:401}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/job_token_scope/groups_allowlist',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{target_group_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{id:string,target_group_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/job_token_scope/groups_allowlist/:target_group_id',variable:[{name:'id',type:'string'},{name:'target_group_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "repository_storage_moves": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,created_at:string,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any}},{id:number,created_at:string,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any}}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository_storage_moves',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{destination_storage_name:string}}, options?: {}): Promise<{code:201,data:{id:number,created_at:string,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string}}}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository_storage_moves',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{destination_storage_name:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,repository_storage_move_id:string}}, options?: {}): Promise<{code:200,data:{id:number,created_at:string,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string}}}> => handler.apply({method:'get',url:'api/v4/projects/:id/repository_storage_moves/:repository_storage_move_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'repository_storage_move_id',type:'string'}]}, [client, { params}, options])
  },
  "snippets": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,title:string,description:string,visibility:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string,upstringd_at:string,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string},{id:number,title:string,description:string,visibility:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},created_at:string,upstringd_at:string,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{title:string,visibility:string,file_name:string,description:string,files:[{file_path:string,content:string},{file_path:string,content:string}],content:string}}, options?: {}): Promise<{code:201,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string,upstringd_at:string,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}}|{code:400}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/snippets',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{title:'string',visibility:'string',file_name:'string',description:'string',files:[{file_path:'string',content:'string'},{file_path:'string',content:'string'}],content:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,snippet_id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string,upstringd_at:string,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,snippet_id:string},data:{content:string,description:string,file_name:string,title:string,visibility:string,files:[{action:string,content:string,file_path:string,previous_path:string},{action:string,content:string,file_path:string,previous_path:string}]}}, options?: {}): Promise<{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string,upstringd_at:string,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}}|{code:400}|{code:404}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/snippets/:snippet_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}],data:{mode:'raw',raw:{content:'string',description:'string',file_name:'string',title:'string',visibility:'string',files:[{action:'string',content:'string',file_path:'string',previous_path:'string'},{action:'string',content:'string',file_path:'string',previous_path:'string'}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,snippet_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/snippets/:snippet_id',variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}]}, [client, { params}, options]),
    "raw": {
      get: ({params}: {params:{id:string,snippet_id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string,upstringd_at:string,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id/raw',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}]}, [client, { params}, options])
    },
    "files": {
      "raw": {
        get: ({params}: {params:{id:string,file_path:string,ref:string,snippet_id:string}}, options?: {}): Promise<{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},created_at:string,upstringd_at:string,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id/files/:ref/:file_path/raw',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'file_path',type:'string'},{name:'ref',type:'string'},{name:'snippet_id',type:'string'}]}, [client, { params}, options])
      }
    },
    "user_agent_detail": {
      get: ({params}: {params:{id:string,snippet_id:string}}, options?: {}): Promise<{code:200,data:{user_agent:string,ip_address:string,akismet_submitted:boolean}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/snippets/:snippet_id/user_agent_detail',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'snippet_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "snapshot": {
    get: ({params,query}: {params:{id:string},query?:{wiki:string}}, options?: {}): Promise<{code:200}|{code:401}> => handler.apply({method:'get',url:'api/v4/projects/:id/snapshot',headers:{Accept:'application/x-tar'},variable:[{name:'id',type:'string'}],query:[{name:'wiki',type:'string'}]}, [client, { params, query}, options])
  },
  "statistics": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{fetches:{total:number,days:[{count:any,string:any},{count:any,string:any}]}}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/statistics',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "templates": {
    getOne: ({params,query}: {params:{id:string,type:string,name:string},query?:{source_template_project_id:string,project:string,fullname:string}}, options?: {}): Promise<{code:200,data:{key:string,name:string,nickname:string,html_url:string,source_url:string,popular:boolean,description:string,conditions:[string,string],permissions:[string,string],limitations:[string,string],content:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/templates/:type/:name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'type',type:'string'},{name:'name',type:'string'}],query:[{name:'source_template_project_id',type:'string'},{name:'project',type:'string'},{name:'fullname',type:'string'}]}, [client, { params, query}, options])
  },
  "custom_attributes": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{key:string,value:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/custom_attributes',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    getOne: ({params}: {params:{key:string,id:string}}, options?: {}): Promise<{code:200,data:{key:string,value:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/custom_attributes/:key',headers:{Accept:'application/json'},variable:[{name:'key',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{key:string,id:string},data:{value:string}}, options?: {}): Promise<{code:200}> => handler.apply({method:'put',url:'api/v4/projects/:id/custom_attributes/:key',headers:{'Content-Type':'application/json'},variable:[{name:'key',type:'string'},{name:'id',type:'string'}],data:{mode:'raw',raw:{value:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{key:string,id:string}}, options?: {}): Promise<{code:204}> => handler.apply({method:'delete',url:'api/v4/projects/:id/custom_attributes/:key',variable:[{name:'key',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "share_locations": {
    get: ({params,query}: {params:{id:string},query?:{search:string}}, options?: {}): Promise<{code:200,data:{id:string,web_url:string,name:string,path:string,description:string,visibility:string,share_with_group_lock:string,require_two_factor_authentication:string,two_factor_grace_period:string,project_creation_level:string,auto_devops_enabled:string,subgroup_creation_level:string,emails_disabled:boolean,emails_enabled:boolean,mentions_disabled:string,lfs_enabled:string,math_rendering_limits_enabled:boolean,lock_math_rendering_limits_enabled:boolean,default_branch:string,default_branch_protection:string,default_branch_protection_defaults:string,avatar_url:string,request_access_enabled:string,full_name:string,full_path:string,created_at:string,parent_id:string,organization_id:string,shared_runners_setting:string,custom_attributes:{key:string,value:string},statistics:{storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string},ldap_cn:string,ldap_access:string,ldap_group_links:{cn:string,group_access:number,provider:string,filter:string},saml_group_links:{name:string,access_level:number,member_role_id:number},file_template_project_id:string,marked_for_deletion_on:string,wiki_access_level:string,repository_storage:string,duo_features_enabled:string,lock_duo_features_enabled:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/share_locations',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'search',type:'string'}]}, [client, { params, query}, options])
  },
  "fork": {
    post: ({params}: {params:{id:string,forked_from_id:string}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/fork/:forked_from_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'forked_from_id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string}}, options?: {}): Promise<{code:204}|{code:304}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/fork',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "forks": {
    get: ({params,query}: {params:{id:string},query?:{order_by:string,sort:string,archived:string,visibility:string,search:string,search_namespaces:string,owned:string,starred:string,imported:string,membership:string,with_issues_enabled:string,with_merge_requests_enabled:string,with_programming_language:string,min_access_level:string,id_after:string,id_before:string,last_activity_after:string,last_activity_before:string,repository_storage:string,topic:string,topic_id:string,updated_before:string,updated_after:string,include_pending_delete:string,wiki_checksum_failed:string,repository_checksum_failed:string,include_hidden:string,page:string,per_page:string,simple:string,with_custom_attributes:string}}, options?: {}): Promise<{code:200,data:[{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:any,enabled:any,keep_n:any,older_than:any,name_regex:any,name_regex_keep:any,next_run_at:any},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any,default_branch:any,tag_list:any,topics:any,ssh_url_to_repo:any,http_url_to_repo:any,web_url:any,readme_url:any,forks_count:any,license_url:any,license:any,avatar_url:any,star_count:any,last_activity_at:any,namespace:any,custom_attributes:any,repository_storage:any},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:any,storage_size:any,repository_size:any,wiki_size:any,lfs_objects_size:any,job_artifacts_size:any,pipeline_artifacts_size:any,packages_size:any,snippets_size:any,uploads_size:any,container_registry_size:any},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string},{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:any,enabled:any,keep_n:any,older_than:any,name_regex:any,name_regex_keep:any,next_run_at:any},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:any,description:any,name:any,name_with_namespace:any,path:any,path_with_namespace:any,created_at:any,default_branch:any,tag_list:any,topics:any,ssh_url_to_repo:any,http_url_to_repo:any,web_url:any,readme_url:any,forks_count:any,license_url:any,license:any,avatar_url:any,star_count:any,last_activity_at:any,namespace:any,custom_attributes:any,repository_storage:any},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:any,storage_size:any,repository_size:any,wiki_size:any,lfs_objects_size:any,job_artifacts_size:any,pipeline_artifacts_size:any,packages_size:any,snippets_size:any,uploads_size:any,container_registry_size:any},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/forks',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'archived',type:'string'},{name:'visibility',type:'string'},{name:'search',type:'string'},{name:'search_namespaces',type:'string'},{name:'owned',type:'string'},{name:'starred',type:'string'},{name:'imported',type:'string'},{name:'membership',type:'string'},{name:'with_issues_enabled',type:'string'},{name:'with_merge_requests_enabled',type:'string'},{name:'with_programming_language',type:'string'},{name:'min_access_level',type:'string'},{name:'id_after',type:'string'},{name:'id_before',type:'string'},{name:'last_activity_after',type:'string'},{name:'last_activity_before',type:'string'},{name:'repository_storage',type:'string'},{name:'topic',type:'string'},{name:'topic_id',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'},{name:'include_pending_delete',type:'string'},{name:'wiki_checksum_failed',type:'string'},{name:'repository_checksum_failed',type:'string'},{name:'include_hidden',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'simple',type:'string'},{name:'with_custom_attributes',type:'string'}]}, [client, { params, query}, options])
  },
  "pages_access": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:403}> => handler.apply({method:'get',url:'api/v4/projects/:id/pages_access',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "archive": {
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/archive',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "unarchive": {
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/unarchive',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "star": {
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:304}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/star',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "unstar": {
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:304}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/unstar',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "starrers": {
    get: ({params,query}: {params:{id:string},query?:{search:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}]}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/starrers',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'search',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
  },
  "languages": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/languages',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "share": {
    post: ({params,data}: {params:{id:string},data:{group_id:number,group_access:number,expires_at:string}}, options?: {}): Promise<{code:201,data:{id:number,project_id:number,group_id:number,group_access:number,expires_at:string}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/share',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{group_id:'number',group_access:'number',expires_at:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,group_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/share/:group_id',variable:[{name:'id',type:'string'},{name:'group_id',type:'string'}]}, [client, { params}, options])
  },
  "import_project_members": {
    post: ({params}: {params:{id:string,project_id:string}}, options?: {}): Promise<{code:200}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/import_project_members/:project_id',variable:[{name:'id',type:'string'},{name:'project_id',type:'string'}]}, [client, { params}, options])
  },
  "uploads": {
    post: ({params,data}: {params:{id:string},data:{file:ArrayBuffer}}, options?: {}): Promise<{code:201,data:{alt:string,url:string,full_path:string,markdown:string}}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/uploads',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{file:'ArrayBuffer'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    "authorize": {
      post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/uploads/authorize',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
    }
  },
  "users": {
    get: ({params,query}: {params:{id:string},query?:{search:string,skip_users:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string}]}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/users',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'search',type:'string'},{name:'skip_users',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
  },
  "groups": {
    get: ({params,query}: {params:{id:string},query?:{search:string,skip_groups:string,with_shared:string,shared_visible_only:string,shared_min_access_level:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string},{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string}]}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/groups',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'search',type:'string'},{name:'skip_groups',type:'string'},{name:'with_shared',type:'string'},{name:'shared_visible_only',type:'string'},{name:'shared_min_access_level',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
  },
  "housekeeping": {
    post: ({params,data}: {params:{id:string},data:{task:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:403}|{code:409}> => handler.apply({method:'post',url:'api/v4/projects/:id/housekeeping',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{task:'eager'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
  },
  "repository_size": {
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201}|{code:401}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/repository_size',variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "transfer": {
    put: ({params,data}: {params:{id:string},data:{namespace:string}}, options?: {}): Promise<{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/transfer',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{namespace:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
  },
  "transfer_locations": {
    get: ({params,query}: {params:{id:string},query?:{search:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string},{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string}]}|{code:403}> => handler.apply({method:'get',url:'api/v4/projects/:id/transfer_locations',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'search',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options])
  },
  "storage": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:{disk_path:string,project_id:number,repository_storage:string,created_at:string}}|{code:403}> => handler.apply({method:'get',url:'api/v4/projects/:id/storage',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "restore": {
    post: ({params}: {params:{id:string}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/restore',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "protected_branches": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,search:string}}, options?: {}): Promise<{code:200,data:[{id:number,name:string,push_access_levels:[any,any],merge_access_levels:[any,any],allow_force_push:boolean,unprotect_access_levels:[any,any],code_owner_approval_required:boolean,inherited:boolean},{id:number,name:string,push_access_levels:[any,any],merge_access_levels:[any,any],allow_force_push:boolean,unprotect_access_levels:[any,any],code_owner_approval_required:boolean,inherited:boolean}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_branches',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'search',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,push_access_level:number,merge_access_level:number,allow_force_push:false,unprotect_access_level:number,allowed_to_push:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_merge:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_unprotect:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],code_owner_approval_required:false}}, options?: {}): Promise<{code:201,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}}|{code:401}|{code:404}|{code:409}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/protected_branches',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',push_access_level:'number',merge_access_level:'number',allow_force_push:false,unprotect_access_level:'number',allowed_to_push:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_merge:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_unprotect:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],code_owner_approval_required:false},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,name:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_branches/:name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'name',type:'string'}]}, [client, { params}, options]),
    patch: ({params,data}: {params:{id:string,name:string},data:{allow_force_push:boolean,unprotect_access_level:number,allowed_to_push:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_merge:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_unprotect:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],code_owner_approval_required:false}}, options?: {}): Promise<{code:200,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}}|{code:400}|{code:401}|{code:404}|{code:422}> => handler.apply({method:'patch',url:'api/v4/projects/:id/protected_branches/:name',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'name',type:'string'}],data:{mode:'raw',raw:{allow_force_push:'boolean',unprotect_access_level:'number',allowed_to_push:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_merge:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],allowed_to_unprotect:[{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'},{access_level:'number',user_id:'number',group_id:'number',id:'number',_destroy:'boolean'}],code_owner_approval_required:false},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,name:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/protected_branches/:name',variable:[{name:'id',type:'string'},{name:'name',type:'string'}]}, [client, { params}, options])
  },
  "protected_tags": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{name:string,create_access_levels:{id:any,access_level:any,access_level_description:any,deploy_key_id:any,user_id:any,group_id:any}},{name:string,create_access_levels:{id:any,access_level:any,access_level_description:any,deploy_key_id:any,user_id:any,group_id:any}}]}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_tags',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,create_access_level:number,allowed_to_create:[{access_level:number,user_id:number,group_id:number},{access_level:number,user_id:number,group_id:number}]}}, options?: {}): Promise<{code:201,data:{name:string,create_access_levels:{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}}}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/protected_tags',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',create_access_level:'number',allowed_to_create:[{access_level:'number',user_id:'number',group_id:'number'},{access_level:'number',user_id:'number',group_id:'number'}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,name:string}}, options?: {}): Promise<{code:200,data:{name:string,create_access_levels:{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}}}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/protected_tags/:name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'name',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,name:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}|{code:412}> => handler.apply({method:'delete',url:'api/v4/projects/:id/protected_tags/:name',variable:[{name:'id',type:'string'},{name:'name',type:'string'}]}, [client, { params}, options])
  },
  "releases": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,order_by:string,sort:string,include_html_description:string,updated_before:string,updated_after:string}}, options?: {}): Promise<{code:200,data:[{name:string,tag_name:string,description:string,created_at:string,released_at:string,upcoming_release:boolean,description_html:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},milestones:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any,issue_stats:any},commit_path:string,tag_path:string,assets:{count:number,sources:any,links:any},evidences:{sha:any,filepath:any,collected_at:any},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}},{name:string,tag_name:string,description:string,created_at:string,released_at:string,upcoming_release:boolean,description_html:string,author:{id:any,username:any,name:any,state:any,locked:any,avatar_url:any,avatar_path:any,custom_attributes:any,web_url:any},commit:{id:any,short_id:any,created_at:any,parent_ids:any,title:any,message:any,author_name:any,author_email:any,authored_string:any,committer_name:any,committer_email:any,committed_string:any,trailers:any,extended_trailers:any,web_url:any},milestones:{id:any,iid:any,project_id:any,group_id:any,title:any,description:any,state:any,created_at:any,upstringd_at:any,due_string:any,start_string:any,expired:any,web_url:any,issue_stats:any},commit_path:string,tag_path:string,assets:{count:number,sources:any,links:any},evidences:{sha:any,filepath:any,collected_at:any},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/releases',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'order_by',type:'string'},{name:'sort',type:'string'},{name:'include_html_description',type:'string'},{name:'updated_before',type:'string'},{name:'updated_after',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{tag_name:string,tag_message:string,name:string,description:string,ref:string,assets:{links:[{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string},{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string}]},milestones:[string,string],milestone_ids:string,released_at:string,legacy_catalog_publish:boolean}}, options?: {}): Promise<{code:201,data:{name:string,tag_name:string,description:string,created_at:string,released_at:string,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:string},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}}|{code:400}|{code:401}|{code:403}|{code:404}|{code:409}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/releases',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{tag_name:'string',tag_message:'string',name:'string',description:'string',ref:'string',assets:{links:[{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'string'},{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'string'}]},milestones:['string','string'],milestone_ids:'string',released_at:'string',legacy_catalog_publish:'boolean'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params,query}: {params:{id:string,tag_name:string},query?:{include_html_description:string}}, options?: {}): Promise<{code:200,data:{name:string,tag_name:string,description:string,created_at:string,released_at:string,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:string},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],query:[{name:'include_html_description',type:'string'}]}, [client, { params, query}, options]),
    put: ({params,data}: {params:{id:string,tag_name:string},data:{name:string,description:string,released_at:string,milestones:[string,string],milestone_ids:string}}, options?: {}): Promise<{code:200,data:{name:string,tag_name:string,description:string,created_at:string,released_at:string,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:string},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/releases/:tag_name',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],data:{mode:'raw',raw:{name:'string',description:'string',released_at:'string',milestones:['string','string'],milestone_ids:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,tag_name:string}}, options?: {}): Promise<{code:204,data:{name:string,tag_name:string,description:string,created_at:string,released_at:string,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:string},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/releases/:tag_name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}]}, [client, { params}, options]),
    "downloads": {
      get: ({params,query}: {params:{id:string,tag_name:string},query?:{direct_asset_path:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name/downloads/*direct_asset_path',variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],query:[{name:'direct_asset_path',type:'string'}]}, [client, { params, query}, options])
    },
    "evidence": {
      post: ({params}: {params:{tag_name:string,id:string}}, options?: {}): Promise<{code:201,data:{name:string,tag_name:string,description:string,created_at:string,released_at:string,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},commit:{id:string,short_id:string,created_at:string,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_string:string,committer_name:string,committer_email:string,committed_string:string,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,upstringd_at:string,due_string:string,start_string:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:string},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/releases/:tag_name/evidence',headers:{Accept:'application/json'},variable:[{name:'tag_name',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
    },
    "assets": {
      "links": {
        get: ({params,query}: {params:{id:string,tag_name:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,name:string,url:string,direct_asset_url:string,link_type:string},{id:number,name:string,url:string,direct_asset_url:string,link_type:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name/assets/links',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
        post: ({params,data}: {params:{id:string,tag_name:string},data:{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string}}, options?: {}): Promise<{code:201,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}}|{code:400}|{code:401}> => handler.apply({method:'post',url:'api/v4/projects/:id/releases/:tag_name/assets/links',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'}],data:{mode:'raw',raw:{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
        getOne: ({params}: {params:{id:string,tag_name:string,link_id:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/:tag_name/assets/links/:link_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'},{name:'link_id',type:'string'}]}, [client, { params}, options]),
        put: ({params,data}: {params:{id:string,tag_name:string,link_id:string},data:{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}}|{code:400}|{code:401}> => handler.apply({method:'put',url:'api/v4/projects/:id/releases/:tag_name/assets/links/:link_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'},{name:'link_id',type:'string'}],data:{mode:'raw',raw:{name:'string',url:'string',direct_asset_path:'string',filepath:'string',link_type:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
        delete: ({params}: {params:{id:string,tag_name:string,link_id:string}}, options?: {}): Promise<{code:204,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}}|{code:400}|{code:401}> => handler.apply({method:'delete',url:'api/v4/projects/:id/releases/:tag_name/assets/links/:link_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'tag_name',type:'string'},{name:'link_id',type:'string'}]}, [client, { params}, options])
      }
    },
    "permalink": {
      "latest": {
        get: ({params,query}: {params:{id:string},query?:{suffix_path:string}}, options?: {}): Promise<{code:200}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/releases/permalink/latest(/)(*suffix_path)',variable:[{name:'id',type:'string'}],query:[{name:'suffix_path',type:'string'}]}, [client, { params, query}, options])
      }
    }
  },
  "remote_mirrors": {
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,enabled:boolean,url:string,upstring_status:string,last_upstring_at:string,last_upstring_started_at:string,last_successful_upstring_at:string,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string},{id:number,enabled:boolean,url:string,upstring_status:string,last_upstring_at:string,last_upstring_started_at:string,last_successful_upstring_at:string,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/remote_mirrors',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{url:string,enabled:boolean,auth_method:string,keep_divergent_refs:boolean,only_protected_branches:boolean,mirror_branch_regex:string}}, options?: {}): Promise<{code:201,data:{id:number,enabled:boolean,url:string,upstring_status:string,last_upstring_at:string,last_upstring_started_at:string,last_successful_upstring_at:string,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/remote_mirrors',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{url:'string',enabled:'boolean',auth_method:'string',keep_divergent_refs:'boolean',only_protected_branches:'boolean',mirror_branch_regex:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,mirror_id:string}}, options?: {}): Promise<{code:200,data:{id:number,enabled:boolean,url:string,upstring_status:string,last_upstring_at:string,last_upstring_started_at:string,last_successful_upstring_at:string,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/remote_mirrors/:mirror_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,mirror_id:string},data:{enabled:boolean,auth_method:string,keep_divergent_refs:boolean,only_protected_branches:boolean,mirror_branch_regex:string}}, options?: {}): Promise<{code:200,data:{id:number,enabled:boolean,url:string,upstring_status:string,last_upstring_at:string,last_upstring_started_at:string,last_successful_upstring_at:string,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/remote_mirrors/:mirror_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}],data:{mode:'raw',raw:{enabled:'boolean',auth_method:'string',keep_divergent_refs:'boolean',only_protected_branches:'boolean',mirror_branch_regex:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,mirror_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/remote_mirrors/:mirror_id',variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}]}, [client, { params}, options]),
    "sync": {
      post: ({params}: {params:{id:string,mirror_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/remote_mirrors/:mirror_id/sync',variable:[{name:'id',type:'string'},{name:'mirror_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "access_tokens": {
    get: ({params}: {params:{id:string}}, options?: {}): Promise<{code:200,data:[{id:number,name:string,revoked:boolean,created_at:string,user_id:number,last_used_at:string,active:boolean,expires_at:string,access_level:number},{id:number,name:string,revoked:boolean,created_at:string,user_id:number,last_used_at:string,active:boolean,expires_at:string,access_level:number}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/access_tokens',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}]}, [client, { params}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,scopes:[string,string],expires_at:string,access_level:40}}, options?: {}): Promise<{code:201,data:{id:number,name:string,revoked:boolean,created_at:string,user_id:number,last_used_at:string,active:boolean,expires_at:string,access_level:number,token:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/access_tokens',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',scopes:['string','string'],expires_at:'string',access_level:40},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,token_id:string}}, options?: {}): Promise<{code:200,data:{id:number,name:string,revoked:boolean,created_at:string,user_id:number,last_used_at:string,active:boolean,expires_at:string,access_level:number}}> => handler.apply({method:'get',url:'api/v4/projects/:id/access_tokens/:token_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}]}, [client, { params}, options]),
    delete: ({params}: {params:{id:string,token_id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/access_tokens/:token_id',variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}]}, [client, { params}, options]),
    "rotate": {
      post: ({params,data}: {params:{id:string,token_id:string},data:{expires_at:string}}, options?: {}): Promise<{code:201,data:{id:number,name:string,revoked:boolean,created_at:string,user_id:number,last_used_at:string,active:boolean,expires_at:string,access_level:number,token:string}}> => handler.apply({method:'post',url:'api/v4/projects/:id/access_tokens/:token_id/rotate',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'token_id',type:'string'}],data:{mode:'raw',raw:{expires_at:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "wikis": {
    get: ({params,query}: {params:{id:string},query?:{with_content:string}}, options?: {}): Promise<{code:200,data:[{format:string,slug:string,title:string},{format:string,slug:string,title:string}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/wikis',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'with_content',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{title:string,content:string,front_matter:{title:string},format:string}}, options?: {}): Promise<{code:201,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:object}}|{code:400}|{code:404}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/wikis',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{title:'string',content:'string',front_matter:{title:'string'},format:'markdown'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params,query}: {params:{slug:string,id:string},query?:{version:string,render_html:string}}, options?: {}): Promise<{code:200,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:object}}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/wikis/:slug',headers:{Accept:'application/json'},variable:[{name:'slug',type:'string'},{name:'id',type:'string'}],query:[{name:'version',type:'string'},{name:'render_html',type:'string'}]}, [client, { params, query}, options]),
    put: ({params,data}: {params:{id:string,slug:string},data:{title:string,front_matter:{title:string},content:string,format:string}}, options?: {}): Promise<{code:200,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:object}}|{code:400}|{code:404}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/wikis/:slug',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'slug',type:'string'}],data:{mode:'raw',raw:{title:'string',front_matter:{title:'string'},content:'string',format:'markdown'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{slug:string,id:string}}, options?: {}): Promise<{code:204}|{code:400}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/wikis/:slug',variable:[{name:'slug',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options]),
    "attachments": {
      post: ({params,data}: {params:{id:string},data:{file:ArrayBuffer,branch:string}}, options?: {}): Promise<{code:201,data:{file_name:string,file_path:string,branch:string,link:{url:string,markdown:string}}}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/wikis/attachments',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{file:'ArrayBuffer',branch:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
    }
  },
  "alert_management_alerts": {
    "metric_images": {
      post: ({params,data}: {params:{id:string,alert_iid:string},data:{url:string,url_string:string}}, options?: {}): Promise<{code:200,data:{id:number,created_at:string,filename:string,file_path:string,url:string,url_string:string}}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images',headers:{'Content-Type':'multipart/form-data',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'}],data:{mode:'formdata',formdata:{url:'string',url_string:'string'}}}, [client, { params, data}, options]),
      get: ({params}: {params:{id:string,alert_iid:string}}, options?: {}): Promise<{code:200,data:[{id:number,created_at:string,filename:string,file_path:string,url:string,url_string:string},{id:number,created_at:string,filename:string,file_path:string,url:string,url_string:string}]}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'}]}, [client, { params}, options]),
      "authorize": {
        post: ({params}: {params:{id:string,alert_iid:string}}, options?: {}): Promise<{code:200}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/authorize',variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'}]}, [client, { params}, options])
      },
      put: ({params,data}: {params:{id:string,alert_iid:string,metric_image_id:string},data:{url:string,url_string:string}}, options?: {}): Promise<{code:200,data:{id:number,created_at:string,filename:string,file_path:string,url:string,url_string:string}}|{code:403}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/:metric_image_id',headers:{'Content-Type':'multipart/form-data',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'},{name:'metric_image_id',type:'string'}],data:{mode:'formdata',formdata:{url:'string',url_string:'string'}}}, [client, { params, data}, options]),
      delete: ({params}: {params:{id:string,alert_iid:string,metric_image_id:string}}, options?: {}): Promise<{code:204,data:{id:number,created_at:string,filename:string,file_path:string,url:string,url_string:string}}|{code:403}|{code:422}> => handler.apply({method:'delete',url:'api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/:metric_image_id',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'alert_iid',type:'string'},{name:'metric_image_id',type:'string'}]}, [client, { params}, options])
    }
  },
  "feature_flags": {
    get: ({params,query}: {params:{id:string},query?:{scope:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{name:string,description:string,active:boolean,version:string,created_at:string,upstringd_at:string,scopes:string,strategies:{id:any,name:any,parameters:any,scopes:any,user_list:any}},{name:string,description:string,active:boolean,version:string,created_at:string,upstringd_at:string,scopes:string,strategies:{id:any,name:any,parameters:any,scopes:any,user_list:any}}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'scope',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,description:string,active:boolean,version:string,strategies:[{name:string,parameters:string,user_list_id:number,scopes:[{environment_scope:object},{environment_scope:object}]},{name:string,parameters:string,user_list_id:number,scopes:[{environment_scope:object},{environment_scope:object}]}]}}, options?: {}): Promise<{code:201,data:{name:string,description:string,active:boolean,version:string,created_at:string,upstringd_at:string,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:any,environment_scope:any},user_list:{id:any,iid:any,name:any,user_xids:any}}}}|{code:400}|{code:401}|{code:403}> => handler.apply({method:'post',url:'api/v4/projects/:id/feature_flags',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',description:'string',active:'boolean',version:'string',strategies:[{name:'string',parameters:'string',user_list_id:'number',scopes:[{environment_scope:{value:'Error: Too many levels of nesting to fake this schema'}},{environment_scope:{value:'Error: Too many levels of nesting to fake this schema'}}]},{name:'string',parameters:'string',user_list_id:'number',scopes:[{environment_scope:{value:'Error: Too many levels of nesting to fake this schema'}},{environment_scope:{value:'Error: Too many levels of nesting to fake this schema'}}]}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,feature_flag_name:string}}, options?: {}): Promise<{code:200,data:{name:string,description:string,active:boolean,version:string,created_at:string,upstringd_at:string,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:any,environment_scope:any},user_list:{id:any,iid:any,name:any,user_xids:any}}}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags/:feature_flag_name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'feature_flag_name',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,feature_flag_name:string},data:{name:string,description:string,active:boolean,strategies:[{id:number,name:string,parameters:string,user_list_id:number,_destroy:boolean,scopes:[{id:object,environment_scope:object,_destroy:object},{id:object,environment_scope:object,_destroy:object}]},{id:number,name:string,parameters:string,user_list_id:number,_destroy:boolean,scopes:[{id:object,environment_scope:object,_destroy:object},{id:object,environment_scope:object,_destroy:object}]}]}}, options?: {}): Promise<{code:200,data:{name:string,description:string,active:boolean,version:string,created_at:string,upstringd_at:string,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:any,environment_scope:any},user_list:{id:any,iid:any,name:any,user_xids:any}}}}|{code:401}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'put',url:'api/v4/projects/:id/feature_flags/:feature_flag_name',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'feature_flag_name',type:'string'}],data:{mode:'raw',raw:{name:'string',description:'string',active:'boolean',strategies:[{id:'number',name:'string',parameters:'string',user_list_id:'number',_destroy:'boolean',scopes:[{id:{value:'Error: Too many levels of nesting to fake this schema'},environment_scope:{value:'Error: Too many levels of nesting to fake this schema'},_destroy:{value:'Error: Too many levels of nesting to fake this schema'}},{id:{value:'Error: Too many levels of nesting to fake this schema'},environment_scope:{value:'Error: Too many levels of nesting to fake this schema'},_destroy:{value:'Error: Too many levels of nesting to fake this schema'}}]},{id:'number',name:'string',parameters:'string',user_list_id:'number',_destroy:'boolean',scopes:[{id:{value:'Error: Too many levels of nesting to fake this schema'},environment_scope:{value:'Error: Too many levels of nesting to fake this schema'},_destroy:{value:'Error: Too many levels of nesting to fake this schema'}},{id:{value:'Error: Too many levels of nesting to fake this schema'},environment_scope:{value:'Error: Too many levels of nesting to fake this schema'},_destroy:{value:'Error: Too many levels of nesting to fake this schema'}}]}]},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,feature_flag_name:string}}, options?: {}): Promise<{code:204,data:{name:string,description:string,active:boolean,version:string,created_at:string,upstringd_at:string,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:any,environment_scope:any},user_list:{id:any,iid:any,name:any,user_xids:any}}}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/feature_flags/:feature_flag_name',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'feature_flag_name',type:'string'}]}, [client, { params}, options])
  },
  "feature_flags_user_lists": {
    get: ({params,query}: {params:{id:string},query?:{search:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:string,upstringd_at:string,path:string,edit_path:string},{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:string,upstringd_at:string,path:string,edit_path:string}]}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags_user_lists',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'search',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    post: ({params,data}: {params:{id:string},data:{name:string,user_xids:string}}, options?: {}): Promise<{code:201,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:string,upstringd_at:string,path:string,edit_path:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/feature_flags_user_lists',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{name:'string',user_xids:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    getOne: ({params}: {params:{id:string,iid:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:string,upstringd_at:string,path:string,edit_path:string}}|{code:401}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/feature_flags_user_lists/:iid',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'iid',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,iid:string},data:{name:string,user_xids:string}}, options?: {}): Promise<{code:200,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:string,upstringd_at:string,path:string,edit_path:string}}|{code:400}|{code:401}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/feature_flags_user_lists/:iid',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'iid',type:'string'}],data:{mode:'raw',raw:{name:'string',user_xids:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params}: {params:{id:string,iid:string}}, options?: {}): Promise<{code:204}|{code:401}|{code:404}|{code:409}> => handler.apply({method:'delete',url:'api/v4/projects/:id/feature_flags_user_lists/:iid',variable:[{name:'id',type:'string'},{name:'iid',type:'string'}]}, [client, { params}, options])
  },
  "debian_distributions": {
    post: ({params,data}: {params:{id:string},data:{codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}}, options?: {}): Promise<{code:201,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/:id/debian_distributions',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'}],data:{mode:'raw',raw:{codename:'string',suite:'string',origin:'string',label:'string',version:'string',description:'string',valid_time_duration_seconds:'number',components:['string','string'],architectures:['string','string']},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    get: ({params,query}: {params:{id:string},query?:{page:string,per_page:string,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:string,components:string,architectures:string}}, options?: {}): Promise<{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/debian_distributions',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'page',type:'string'},{name:'per_page',type:'string'},{name:'codename',type:'string'},{name:'suite',type:'string'},{name:'origin',type:'string'},{name:'label',type:'string'},{name:'version',type:'string'},{name:'description',type:'string'},{name:'valid_time_duration_seconds',type:'string'},{name:'components',type:'string'},{name:'architectures',type:'string'}]}, [client, { params, query}, options]),
    getOne: ({params}: {params:{id:string,codename:string}}, options?: {}): Promise<{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/debian_distributions/:codename',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'codename',type:'string'}]}, [client, { params}, options]),
    put: ({params,data}: {params:{id:string,codename:string},data:{suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}}, options?: {}): Promise<{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'put',url:'api/v4/projects/:id/debian_distributions/:codename',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'codename',type:'string'}],data:{mode:'raw',raw:{suite:'string',origin:'string',label:'string',version:'string',description:'string',valid_time_duration_seconds:'number',components:['string','string'],architectures:['string','string']},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
    delete: ({params,query}: {params:{id:string,codename:string},query?:{suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:string,components:string,architectures:string}}, options?: {}): Promise<{code:202}|{code:400}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/debian_distributions/:codename',variable:[{name:'id',type:'string'},{name:'codename',type:'string'}],query:[{name:'suite',type:'string'},{name:'origin',type:'string'},{name:'label',type:'string'},{name:'version',type:'string'},{name:'description',type:'string'},{name:'valid_time_duration_seconds',type:'string'},{name:'components',type:'string'},{name:'architectures',type:'string'}]}, [client, { params, query}, options]),
    "key.asc": {
      get: ({params}: {params:{id:string,codename:string}}, options?: {}): Promise<{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}}|{code:401}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/debian_distributions/:codename/key.asc',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'codename',type:'string'}]}, [client, { params}, options])
    }
  },
  "audit_events": {
    get: ({params,query}: {params:{id:string},query?:{created_after:string,created_before:string,page:string,per_page:string}}, options?: {}): Promise<{code:200,data:[{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string},{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string}]}> => handler.apply({method:'get',url:'api/v4/projects/:id/audit_events',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'}],query:[{name:'created_after',type:'string'},{name:'created_before',type:'string'},{name:'page',type:'string'},{name:'per_page',type:'string'}]}, [client, { params, query}, options]),
    getOne: ({params}: {params:{audit_event_id:string,id:string}}, options?: {}): Promise<{code:200,data:{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string}}> => handler.apply({method:'get',url:'api/v4/projects/:id/audit_events/:audit_event_id',headers:{Accept:'application/json'},variable:[{name:'audit_event_id',type:'string'},{name:'id',type:'string'}]}, [client, { params}, options])
  },
  "terraform": {
    "state": {
      getOne: ({params,query}: {params:{id:string,name:string},query?:{ID:string}}, options?: {}): Promise<{code:200}|{code:204}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'get',url:'api/v4/projects/:id/terraform/state/:name',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],query:[{name:'ID',type:'string'}]}, [client, { params, query}, options]),
      post: ({params}: {params:{id:string,name:string}}, options?: {}): Promise<{code:200}|{code:204}|{code:403}|{code:413}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/terraform/state/:name',variable:[{name:'id',type:'string'},{name:'name',type:'string'}]}, [client, { params}, options]),
      delete: ({params}: {params:{id:string,name:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}|{code:422}> => handler.apply({method:'delete',url:'api/v4/projects/:id/terraform/state/:name',variable:[{name:'id',type:'string'},{name:'name',type:'string'}]}, [client, { params}, options]),
      "lock": {
        post: ({params,data}: {params:{id:string,name:string},data:{ID:string,Operation:string,Info:string,Who:string,Version:string,Created:string,Path:string}}, options?: {}): Promise<{code:200}|{code:403}|{code:404}|{code:409}|{code:422}> => handler.apply({method:'post',url:'api/v4/projects/:id/terraform/state/:name/lock',headers:{'Content-Type':'application/json'},variable:[{name:'id',type:'string'},{name:'name',type:'string'}],data:{mode:'raw',raw:{ID:'string',Operation:'string',Info:'string',Who:'string',Version:'string',Created:'string',Path:'string'},options:{raw:{language:'json'}}}}, [client, { params, data}, options]),
        delete: ({params,query}: {params:{id:string,name:string},query?:{ID:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}|{code:409}|{code:422}> => handler.apply({method:'delete',url:'api/v4/projects/:id/terraform/state/:name/lock',variable:[{name:'id',type:'string'},{name:'name',type:'string'}],query:[{name:'ID',type:'string'}]}, [client, { params, query}, options])
      },
      "versions": {
        getOne: ({params}: {params:{id:string,name:string,serial:string}}, options?: {}): Promise<{code:200,data:ArrayBuffer}|{code:403}|{code:404}> => handler.apply({method:'get',url:'api/v4/projects/:id/terraform/state/:name/versions/:serial',headers:{Accept:'application/json'},variable:[{name:'id',type:'string'},{name:'name',type:'string'},{name:'serial',type:'string'}]}, [client, { params}, options]),
        delete: ({params}: {params:{id:string,name:string,serial:string}}, options?: {}): Promise<{code:204}|{code:403}|{code:404}> => handler.apply({method:'delete',url:'api/v4/projects/:id/terraform/state/:name/versions/:serial',variable:[{name:'id',type:'string'},{name:'name',type:'string'},{name:'serial',type:'string'}]}, [client, { params}, options])
      }
    }
  },
  "user": {
    post: ({params,data}: {params:{user_id:string},data:{name:string,path:string,default_branch:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outstringd_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:ArrayBuffer,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,repository_object_format:string,use_custom_template:boolean,group_with_project_templates_id:number,namespace_id:number,import_url:string,template_name:string,template_project_id:number}}, options?: {}): Promise<{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[any,any],web_url:string},resolve_outstringd_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:string,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:any,name:any,nickname:any,html_url:any,source_url:any},avatar_url:string,star_count:number,last_activity_at:string,namespace:{id:any,name:any,path:any,kind:any,full_path:any,parent_id:any,avatar_url:any,web_url:any},custom_attributes:{key:any,value:any},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,upstringd_at:string,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}|{code:400}|{code:403}|{code:404}> => handler.apply({method:'post',url:'api/v4/projects/user/:user_id',headers:{'Content-Type':'application/json',Accept:'application/json'},variable:[{name:'user_id',type:'string'}],data:{mode:'raw',raw:{name:'string',path:'string',default_branch:'string',description:'string',build_git_strategy:'string',build_timeout:'number',auto_cancel_pending_pipelines:'string',ci_config_path:'string',service_desk_enabled:'boolean',issues_enabled:'boolean',merge_requests_enabled:'boolean',wiki_enabled:'boolean',jobs_enabled:'boolean',snippets_enabled:'boolean',issues_access_level:'string',repository_access_level:'string',merge_requests_access_level:'string',forking_access_level:'string',wiki_access_level:'string',builds_access_level:'string',snippets_access_level:'string',pages_access_level:'string',analytics_access_level:'string',container_registry_access_level:'string',security_and_compliance_access_level:'string',releases_access_level:'string',environments_access_level:'string',feature_flags_access_level:'string',infrastructure_access_level:'string',monitor_access_level:'string',model_experiments_access_level:'string',model_registry_access_level:'string',emails_disabled:'boolean',emails_enabled:'boolean',show_default_award_emojis:'boolean',show_diff_preview_in_email:'boolean',warn_about_potentially_unwanted_characters:'boolean',enforce_auth_checks_on_uploads:'boolean',shared_runners_enabled:'boolean',group_runners_enabled:'boolean',resolve_outstringd_diff_discussions:'boolean',remove_source_branch_after_merge:'boolean',container_registry_enabled:'boolean',container_expiration_policy_attributes:{cadence:'string',keep_n:'number',older_than:'string',name_regex:'string',name_regex_keep:'string',enabled:'boolean'},lfs_enabled:'boolean',visibility:'string',public_builds:'boolean',public_jobs:'boolean',request_access_enabled:'boolean',only_allow_merge_if_pipeline_succeeds:'boolean',allow_merge_on_skipped_pipeline:'boolean',only_allow_merge_if_all_discussions_are_resolved:'boolean',tag_list:['string','string'],topics:['string','string'],avatar:'ArrayBuffer',printing_merge_request_link_enabled:'boolean',merge_method:'string',suggestion_commit_message:'string',merge_commit_template:'string',squash_commit_template:'string',issue_branch_template:'string',initialize_with_readme:'boolean',auto_devops_enabled:'boolean',auto_devops_deploy_strategy:'string',autoclose_referenced_issues:'boolean',repository_storage:'string',packages_enabled:'boolean',squash_option:'string',mr_default_target_self:'boolean',only_allow_merge_if_all_status_checks_passed:'boolean',approvals_before_merge:'number',mirror:'boolean',mirror_trigger_builds:'boolean',external_authorization_classification_label:'string',requirements_access_level:'string',prevent_merge_without_jira_issue:'boolean',repository_object_format:'string',use_custom_template:'boolean',group_with_project_templates_id:'number',namespace_id:'number',import_url:'string',template_name:'string',template_project_id:'number'},options:{raw:{language:'json'}}}}, [client, { params, data}, options])
  }
})