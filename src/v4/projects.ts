export default (client: any, request: any) => ({
  get: {
    method: "get",
    url: "api/v4/projects",
    resource: "projects",
    variable: [],
    headers: {
      Accept: "application/json"
    },
    description: "Get a list of visible projects for authenticated user",
    query: [
      {
        name: "order_by",
        type: "string"
      },
      {
        name: "sort",
        type: "string"
      },
      {
        name: "archived",
        type: "string"
      },
      {
        name: "visibility",
        type: "string"
      },
      {
        name: "search",
        type: "string"
      },
      {
        name: "search_namespaces",
        type: "string"
      },
      {
        name: "owned",
        type: "string"
      },
      {
        name: "starred",
        type: "string"
      },
      {
        name: "imported",
        type: "string"
      },
      {
        name: "membership",
        type: "string"
      },
      {
        name: "with_issues_enabled",
        type: "string"
      },
      {
        name: "with_merge_requests_enabled",
        type: "string"
      },
      {
        name: "with_programming_language",
        type: "string"
      },
      {
        name: "min_access_level",
        type: "string"
      },
      {
        name: "id_after",
        type: "string"
      },
      {
        name: "id_before",
        type: "string"
      },
      {
        name: "last_activity_after",
        type: "string"
      },
      {
        name: "last_activity_before",
        type: "string"
      },
      {
        name: "repository_storage",
        type: "string"
      },
      {
        name: "topic",
        type: "string"
      },
      {
        name: "topic_id",
        type: "string"
      },
      {
        name: "updated_before",
        type: "string"
      },
      {
        name: "updated_after",
        type: "string"
      },
      {
        name: "include_pending_delete",
        type: "string"
      },
      {
        name: "wiki_checksum_failed",
        type: "string"
      },
      {
        name: "repository_checksum_failed",
        type: "string"
      },
      {
        name: "include_hidden",
        type: "string"
      },
      {
        name: "page",
        type: "string"
      },
      {
        name: "per_page",
        type: "string"
      },
      {
        name: "simple",
        type: "string"
      },
      {
        name: "statistics",
        type: "string"
      },
      {
        name: "with_custom_attributes",
        type: "string"
      }
    ],
    data: null,
    /** @param {{query:{order_by:string,sort:string,archived:string,visibility:string,search:string,search_namespaces:string,owned:string,starred:string,imported:string,membership:string,with_issues_enabled:string,with_merge_requests_enabled:string,with_programming_language:string,min_access_level:string,id_after:string,id_before:string,last_activity_after:string,last_activity_before:string,repository_storage:string,topic:string,topic_id:string,updated_before:string,updated_after:string,include_pending_delete:string,wiki_checksum_failed:string,repository_checksum_failed:string,include_hidden:string,page:string,per_page:string,simple:string,statistics:string,with_custom_attributes:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}]},{code:400}]} */
    send({ query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { query, clientOptions }]) }
  },
  post: {
    method: "post",
    url: "api/v4/projects",
    resource: "projects",
    variable: [],
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    description: "Create new project",
    query: [],
    data: {
      mode: "raw",
      raw: {
        name: "string",
        path: "string",
        default_branch: "string",
        description: "string",
        build_git_strategy: "string",
        build_timeout: "number",
        auto_cancel_pending_pipelines: "string",
        ci_config_path: "string",
        service_desk_enabled: "boolean",
        issues_enabled: "boolean",
        merge_requests_enabled: "boolean",
        wiki_enabled: "boolean",
        jobs_enabled: "boolean",
        snippets_enabled: "boolean",
        issues_access_level: "string",
        repository_access_level: "string",
        merge_requests_access_level: "string",
        forking_access_level: "string",
        wiki_access_level: "string",
        builds_access_level: "string",
        snippets_access_level: "string",
        pages_access_level: "string",
        analytics_access_level: "string",
        container_registry_access_level: "string",
        security_and_compliance_access_level: "string",
        releases_access_level: "string",
        environments_access_level: "string",
        feature_flags_access_level: "string",
        infrastructure_access_level: "string",
        monitor_access_level: "string",
        model_experiments_access_level: "string",
        model_registry_access_level: "string",
        emails_disabled: "boolean",
        emails_enabled: "boolean",
        show_default_award_emojis: "boolean",
        show_diff_preview_in_email: "boolean",
        warn_about_potentially_unwanted_characters: "boolean",
        enforce_auth_checks_on_uploads: "boolean",
        shared_runners_enabled: "boolean",
        group_runners_enabled: "boolean",
        resolve_outdated_diff_discussions: "boolean",
        remove_source_branch_after_merge: "boolean",
        container_registry_enabled: "boolean",
        container_expiration_policy_attributes: {
          cadence: "string",
          keep_n: "number",
          older_than: "string",
          name_regex: "string",
          name_regex_keep: "string",
          enabled: "boolean"
        },
        lfs_enabled: "boolean",
        visibility: "string",
        public_builds: "boolean",
        public_jobs: "boolean",
        request_access_enabled: "boolean",
        only_allow_merge_if_pipeline_succeeds: "boolean",
        allow_merge_on_skipped_pipeline: "boolean",
        only_allow_merge_if_all_discussions_are_resolved: "boolean",
        tag_list: [
          "string",
          "string"
        ],
        topics: [
          "string",
          "string"
        ],
        avatar: "binary",
        printing_merge_request_link_enabled: "boolean",
        merge_method: "string",
        suggestion_commit_message: "string",
        merge_commit_template: "string",
        squash_commit_template: "string",
        issue_branch_template: "string",
        initialize_with_readme: "boolean",
        auto_devops_enabled: "boolean",
        auto_devops_deploy_strategy: "string",
        autoclose_referenced_issues: "boolean",
        repository_storage: "string",
        packages_enabled: "boolean",
        squash_option: "string",
        mr_default_target_self: "boolean",
        only_allow_merge_if_all_status_checks_passed: "boolean",
        approvals_before_merge: "number",
        mirror: "boolean",
        mirror_trigger_builds: "boolean",
        external_authorization_classification_label: "string",
        requirements_access_level: "string",
        prevent_merge_without_jira_issue: "boolean",
        repository_object_format: "string",
        use_custom_template: "boolean",
        group_with_project_templates_id: "number",
        namespace_id: "number",
        import_url: "string",
        template_name: "string",
        template_project_id: "number"
      },
      options: {
        raw: {
          language: "json"
        }
      }
    },
    /** @param {{data:{name:string,path:string,default_branch:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outdated_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:binary,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,repository_object_format:string,use_custom_template:boolean,group_with_project_templates_id:number,namespace_id:number,import_url:string,template_name:string,template_project_id:number},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:400},{code:403},{code:404}]} */
    send({ data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { data, clientOptions }]) }
  },
  getOne: {
    method: "get",
    url: "api/v4/projects/:id",
    resource: "projects",
    variable: [
      {
        name: "id",
        type: "string"
      }
    ],
    headers: {
      Accept: "application/json"
    },
    description: "Get a single project",
    query: [
      {
        name: "statistics",
        type: "string"
      },
      {
        name: "with_custom_attributes",
        type: "string"
      },
      {
        name: "license",
        type: "string"
      }
    ],
    data: null,
    /** @param {{params:{id:string},query:{statistics:string,with_custom_attributes:string,license:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string,permissions:{project_access:{access_level:string,notification_level:string},group_access:{access_level:string,notification_level:string}}}}]} */
    send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
  },
  put: {
    method: "put",
    url: "api/v4/projects/:id",
    resource: "projects",
    variable: [
      {
        name: "id",
        type: "string"
      }
    ],
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    description: "Update an existing project",
    query: [],
    data: {
      mode: "raw",
      raw: {
        name: "string",
        default_branch: "string",
        path: "string",
        description: "string",
        build_git_strategy: "string",
        build_timeout: "number",
        auto_cancel_pending_pipelines: "string",
        ci_config_path: "string",
        service_desk_enabled: "boolean",
        issues_enabled: "boolean",
        merge_requests_enabled: "boolean",
        wiki_enabled: "boolean",
        jobs_enabled: "boolean",
        snippets_enabled: "boolean",
        issues_access_level: "string",
        repository_access_level: "string",
        merge_requests_access_level: "string",
        forking_access_level: "string",
        wiki_access_level: "string",
        builds_access_level: "string",
        snippets_access_level: "string",
        pages_access_level: "string",
        analytics_access_level: "string",
        container_registry_access_level: "string",
        security_and_compliance_access_level: "string",
        releases_access_level: "string",
        environments_access_level: "string",
        feature_flags_access_level: "string",
        infrastructure_access_level: "string",
        monitor_access_level: "string",
        model_experiments_access_level: "string",
        model_registry_access_level: "string",
        emails_disabled: "boolean",
        emails_enabled: "boolean",
        show_default_award_emojis: "boolean",
        show_diff_preview_in_email: "boolean",
        warn_about_potentially_unwanted_characters: "boolean",
        enforce_auth_checks_on_uploads: "boolean",
        shared_runners_enabled: "boolean",
        group_runners_enabled: "boolean",
        resolve_outdated_diff_discussions: "boolean",
        remove_source_branch_after_merge: "boolean",
        container_registry_enabled: "boolean",
        container_expiration_policy_attributes: {
          cadence: "string",
          keep_n: "number",
          older_than: "string",
          name_regex: "string",
          name_regex_keep: "string",
          enabled: "boolean"
        },
        lfs_enabled: "boolean",
        visibility: "string",
        public_builds: "boolean",
        public_jobs: "boolean",
        request_access_enabled: "boolean",
        only_allow_merge_if_pipeline_succeeds: "boolean",
        allow_merge_on_skipped_pipeline: "boolean",
        only_allow_merge_if_all_discussions_are_resolved: "boolean",
        tag_list: [
          "string",
          "string"
        ],
        topics: [
          "string",
          "string"
        ],
        avatar: "binary",
        printing_merge_request_link_enabled: "boolean",
        merge_method: "string",
        suggestion_commit_message: "string",
        merge_commit_template: "string",
        squash_commit_template: "string",
        issue_branch_template: "string",
        initialize_with_readme: "boolean",
        auto_devops_enabled: "boolean",
        auto_devops_deploy_strategy: "string",
        autoclose_referenced_issues: "boolean",
        repository_storage: "string",
        packages_enabled: "boolean",
        squash_option: "string",
        mr_default_target_self: "boolean",
        only_allow_merge_if_all_status_checks_passed: "boolean",
        approvals_before_merge: "number",
        mirror: "boolean",
        mirror_trigger_builds: "boolean",
        external_authorization_classification_label: "string",
        requirements_access_level: "string",
        prevent_merge_without_jira_issue: "boolean",
        ci_default_git_depth: "number",
        keep_latest_artifact: "boolean",
        ci_forward_deployment_enabled: "boolean",
        ci_forward_deployment_rollback_allowed: "boolean",
        ci_allow_fork_pipelines_to_run_in_parent_project: "boolean",
        ci_separated_caches: "boolean",
        restrict_user_defined_variables: "boolean",
        ci_pipeline_variables_minimum_override_role: "string",
        allow_pipeline_trigger_approve_deployment: "boolean",
        mirror_user_id: "number",
        only_mirror_protected_branches: "boolean",
        mirror_branch_regex: "string",
        mirror_overwrites_diverged_branches: "boolean",
        import_url: "string",
        fallback_approvals_required: "number",
        issues_template: "string",
        merge_requests_template: "string",
        merge_pipelines_enabled: "boolean",
        merge_trains_enabled: "boolean",
        merge_trains_skip_train_allowed: "boolean",
        ci_restrict_pipeline_cancellation_role: "string"
      },
      options: {
        raw: {
          language: "json"
        }
      }
    },
    /** @param {{params:{id:string},data:{name:string,default_branch:string,path:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outdated_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:binary,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,ci_default_git_depth:number,keep_latest_artifact:boolean,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,ci_separated_caches:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,allow_pipeline_trigger_approve_deployment:boolean,mirror_user_id:number,only_mirror_protected_branches:boolean,mirror_branch_regex:string,mirror_overwrites_diverged_branches:boolean,import_url:string,fallback_approvals_required:number,issues_template:string,merge_requests_template:string,merge_pipelines_enabled:boolean,merge_trains_enabled:boolean,merge_trains_skip_train_allowed:boolean,ci_restrict_pipeline_cancellation_role:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:400},{code:403}]} */
    send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
  },
  delete: {
    method: "delete",
    url: "api/v4/projects/:id",
    resource: "projects",
    variable: [
      {
        name: "id",
        type: "string"
      }
    ],
    headers: {},
    description: "Delete a project",
    query: [],
    data: null,
    /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:202},{code:403},{code:404}]} */
    send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
  },
  access_requests: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/access_requests",
      resource: "access_requests",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 8.11.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/access_requests",
      resource: "access_requests",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 8.11.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/access_requests/:user_id",
      resource: "access_requests",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "user_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 8.11.",
      query: [],
      data: null,
      /** @param {{params:{id:string,user_id:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    approve: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/access_requests/:user_id/approve",
        resource: "approve",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "user_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 8.11.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            access_level: 30
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,user_id:string},data:{access_level:30},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,requested_at:string}}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  badges: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/badges",
      resource: "badges",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string},{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/badges",
      resource: "badges",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          link_url: "string",
          image_url: "string",
          name: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{link_url:string,image_url:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    render: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/badges/render",
        resource: "render",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 10.6.",
        query: [
          {
            name: "link_url",
            type: "string"
          },
          {
            name: "image_url",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{link_url:string,image_url:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/badges/:badge_id",
      resource: "badges",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "badge_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: null,
      /** @param {{params:{id:string,badge_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/badges/:badge_id",
      resource: "badges",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "badge_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          link_url: "string",
          image_url: "string",
          name: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,badge_id:string},data:{link_url:string,image_url:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,link_url:string,image_url:string,rendered_link_url:string,rendered_image_url:string,id:string,kind:string}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/badges/:badge_id",
      resource: "badges",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "badge_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: null,
      /** @param {{params:{id:string,badge_id:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  repository: {
    branches: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/branches",
        resource: "branches",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a project repository branches",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          },
          {
            name: "search",
            type: "string"
          },
          {
            name: "regex",
            type: "string"
          },
          {
            name: "sort",
            type: "string"
          },
          {
            name: "page_token",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{page:string,per_page:string,search:string,regex:string,sort:string,page_token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{name:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string},{name:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}]},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/repository/branches",
        resource: "branches",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Create branch",
        query: [],
        data: {
          mode: "raw",
          raw: {
            branch: "string",
            ref: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{branch:string,ref:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{name:string,commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:400}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/repository/branches/:branch",
        resource: "branches",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "branch",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete a branch",
        query: [],
        data: null,
        /** @param {{params:{id:string,branch:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      head: {
        method: "head",
        url: "api/v4/projects/:id/repository/branches/:branch",
        resource: "branches",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "branch",
            type: "string"
          }
        ],
        headers: {},
        description: "Check if a branch exists",
        query: [],
        data: null,
        /** @param {{params:{id:string,branch:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/repository/branches/:branch",
        resource: "branches",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "branch",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a single repository branch",
        query: [],
        data: null,
        /** @param {{params:{id:string,branch:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      protect: {
        put: {
          method: "put",
          url: "api/v4/projects/:id/repository/branches/:branch/protect",
          resource: "protect",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "branch",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          description: "Protect a single branch",
          query: [],
          data: {
            mode: "raw",
            raw: {
              developers_can_push: "boolean",
              developers_can_merge: "boolean"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,branch:string},data:{developers_can_push:boolean,developers_can_merge:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      },
      unprotect: {
        put: {
          method: "put",
          url: "api/v4/projects/:id/repository/branches/:branch/unprotect",
          resource: "unprotect",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "branch",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Unprotect a single branch",
          query: [],
          data: null,
          /** @param {{params:{id:string,branch:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},merged:boolean,protected:boolean,developers_can_push:boolean,developers_can_merge:boolean,can_push:boolean,default:boolean,web_url:string}},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    merged_branches: {
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/repository/merged_branches",
        resource: "merged_branches",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete all merged branches",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:202},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    commits: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/commits",
        resource: "commits",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a project repository commits",
        query: [
          {
            name: "ref_name",
            type: "string"
          },
          {
            name: "since",
            type: "string"
          },
          {
            name: "until",
            type: "string"
          },
          {
            name: "path",
            type: "string"
          },
          {
            name: "author",
            type: "string"
          },
          {
            name: "all",
            type: "string"
          },
          {
            name: "with_stats",
            type: "string"
          },
          {
            name: "first_parent",
            type: "string"
          },
          {
            name: "order",
            type: "string"
          },
          {
            name: "trailers",
            type: "string"
          },
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{ref_name:string,since:string,until:string,path:string,author:string,all:string,with_stats:string,first_parent:string,order:string,trailers:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}]},{code:401},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/repository/commits",
        resource: "commits",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 8.13",
        query: [],
        data: {
          mode: "raw",
          raw: {
            branch: "string",
            commit_message: "string",
            actions: [
              {
                action: "string",
                file_path: "string",
                previous_path: "string",
                content: "string",
                execute_filemode: "boolean",
                encoding: "text",
                last_commit_id: "string"
              },
              {
                action: "string",
                file_path: "string",
                previous_path: "string",
                content: "string",
                execute_filemode: "boolean",
                encoding: "text",
                last_commit_id: "string"
              }
            ],
            start_branch: "string",
            start_sha: "string",
            start_project: "number",
            author_email: "string",
            author_name: "string",
            stats: true,
            force: false
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{branch:string,commit_message:string,actions:[{action:string,file_path:string,previous_path:string,content:string,execute_filemode:boolean,encoding:text,last_commit_id:string},{action:string,file_path:string,previous_path:string,content:string,execute_filemode:boolean,encoding:text,last_commit_id:string}],start_branch:string,start_sha:string,start_project:number,author_email:string,author_name:string,stats:true,force:false},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string}}},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/repository/commits/:sha",
        resource: "commits",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "sha",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a specific commit of a project",
        query: [
          {
            name: "stats",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,sha:string},query:{stats:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string}}},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      diff: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/commits/:sha/diff",
          resource: "diff",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get the diff for a specific commit of a project",
          query: [
            {
              name: "page",
              type: "string"
            },
            {
              name: "per_page",
              type: "string"
            },
            {
              name: "unidiff",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,sha:string},query:{page:string,per_page:string,unidiff:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}]},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      comments: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/commits/:sha/comments",
          resource: "comments",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get a commit's comments",
          query: [
            {
              name: "page",
              type: "string"
            },
            {
              name: "per_page",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,sha:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{note:string,path:string,line:number,line_type:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime},{note:string,path:string,line:number,line_type:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime}]},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        },
        post: {
          method: "post",
          url: "api/v4/projects/:id/repository/commits/:sha/comments",
          resource: "comments",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          description: "Post comment to commit",
          query: [],
          data: {
            mode: "raw",
            raw: {
              note: "string",
              line: "number",
              line_type: "new",
              path: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,sha:string},data:{note:string,line:number,line_type:new,path:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{note:string,path:string,line:number,line_type:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime}},{code:400},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      },
      sequence: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/commits/:sha/sequence",
          resource: "sequence",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get the sequence count of a commit SHA",
          query: [
            {
              name: "first_parent",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,sha:string},query:{first_parent:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{count:number}},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      cherry_pick: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/repository/commits/:sha/cherry_pick",
          resource: "cherry_pick",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 8.15",
          query: [],
          data: {
            mode: "raw",
            raw: {
              branch: "string",
              dry_run: false,
              message: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,sha:string},data:{branch:string,dry_run:false,message:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}},{code:400},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      },
      revert: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/repository/commits/:sha/revert",
          resource: "revert",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 11.5",
          query: [],
          data: {
            mode: "raw",
            raw: {
              branch: "string",
              dry_run: false
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,sha:string},data:{branch:string,dry_run:false},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}},{code:400},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      },
      refs: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/commits/:sha/refs",
          resource: "refs",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 10.6",
          query: [
            {
              name: "type",
              type: "string"
            },
            {
              name: "page",
              type: "string"
            },
            {
              name: "per_page",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,sha:string},query:{type:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{type:string,name:string},{type:string,name:string}]},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      merge_requests: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/commits/:sha/merge_requests",
          resource: "merge_requests",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get Merge Requests associated with a commit",
          query: [
            {
              name: "page",
              type: "string"
            },
            {
              name: "per_page",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,sha:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}]},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      signature: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/commits/:sha/signature",
          resource: "signature",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get a commit's signature",
          query: [],
          data: null,
          /** @param {{params:{id:string,sha:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{signature_type:string,signature:string,commit_source:string}},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      statuses: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/commits/:sha/statuses",
          resource: "statuses",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get a commit's statuses",
          query: [
            {
              name: "ref",
              type: "string"
            },
            {
              name: "stage",
              type: "string"
            },
            {
              name: "name",
              type: "string"
            },
            {
              name: "all",
              type: "string"
            },
            {
              name: "page",
              type: "string"
            },
            {
              name: "per_page",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,sha:string},query:{ref:string,stage:string,name:string,all:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:dateTime,started_at:dateTime,finished_at:dateTime,allow_failure:boolean,coverage:float,pipeline_id:number,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:dateTime,started_at:dateTime,finished_at:dateTime,allow_failure:boolean,coverage:float,pipeline_id:number,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      }
    },
    files: {
      head: {
        method: "head",
        url: "api/v4/projects/:id/repository/files/:file_path",
        resource: "files",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "file_path",
            type: "string"
          }
        ],
        headers: {},
        description: "Get file metadata from repository",
        query: [
          {
            name: "ref",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,file_path:string},query:{ref:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/files/:file_path",
        resource: "files",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "file_path",
            type: "string"
          }
        ],
        headers: {},
        description: "Get a file from the repository",
        query: [
          {
            name: "ref",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,file_path:string},query:{ref:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/repository/files/:file_path",
        resource: "files",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "file_path",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "Create new file in repository",
        query: [],
        data: {
          mode: "raw",
          raw: {
            branch: "string",
            commit_message: "string",
            content: "string",
            start_branch: "string",
            author_email: "string",
            author_name: "string",
            encoding: "text",
            last_commit_id: "string",
            execute_filemode: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,file_path:string},data:{branch:string,commit_message:string,content:string,start_branch:string,author_email:string,author_name:string,encoding:text,last_commit_id:string,execute_filemode:boolean},clientOptions:{}}} requestOptions * @return {[{code:201}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/repository/files/:file_path",
        resource: "files",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "file_path",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "Update existing file in repository",
        query: [],
        data: {
          mode: "raw",
          raw: {
            branch: "string",
            commit_message: "string",
            content: "string",
            start_branch: "string",
            author_email: "string",
            author_name: "string",
            encoding: "text",
            last_commit_id: "string",
            execute_filemode: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,file_path:string},data:{branch:string,commit_message:string,content:string,start_branch:string,author_email:string,author_name:string,encoding:text,last_commit_id:string,execute_filemode:boolean},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/repository/files/:file_path",
        resource: "files",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "file_path",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete an existing file in repository",
        query: [
          {
            name: "branch",
            type: "string"
          },
          {
            name: "commit_message",
            type: "string"
          },
          {
            name: "start_branch",
            type: "string"
          },
          {
            name: "author_email",
            type: "string"
          },
          {
            name: "author_name",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,file_path:string},query:{branch:string,commit_message:string,start_branch:string,author_email:string,author_name:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      blame: {
        head: {
          method: "head",
          url: "api/v4/projects/:id/repository/files/:file_path/blame",
          resource: "blame",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "file_path",
              type: "string"
            }
          ],
          headers: {},
          description: "Get blame file metadata from repository",
          query: [
            {
              name: "ref",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,file_path:string},query:{ref:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        },
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/files/:file_path/blame",
          resource: "blame",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "file_path",
              type: "string"
            }
          ],
          headers: {},
          description: "Get blame file from the repository",
          query: [
            {
              name: "ref",
              type: "string"
            },
            {
              name: "range[start]",
              type: "string"
            },
            {
              name: "range[end]",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,file_path:string},query:{ref:string,range[start]:string,range[end]:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      raw: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/files/:file_path/raw",
          resource: "raw",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "file_path",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get raw file contents from the repository",
          query: [
            {
              name: "ref",
              type: "string"
            },
            {
              name: "lfs",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,file_path:string},query:{ref:string,lfs:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:binary}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      }
    },
    tree: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/tree",
        resource: "tree",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a project repository tree",
        query: [
          {
            name: "ref",
            type: "string"
          },
          {
            name: "path",
            type: "string"
          },
          {
            name: "recursive",
            type: "string"
          },
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          },
          {
            name: "pagination",
            type: "string"
          },
          {
            name: "page_token",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{ref:string,path:string,recursive:string,page:string,per_page:string,pagination:string,page_token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,name:string,type:string,path:string,mode:string}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    blobs: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/blobs/:sha",
        resource: "blobs",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "sha",
            type: "string"
          }
        ],
        headers: {},
        description: "Get a blob from the repository",
        query: [],
        data: null,
        /** @param {{params:{id:string,sha:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      raw: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/blobs/:sha/raw",
          resource: "raw",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "sha",
              type: "string"
            }
          ],
          headers: {},
          description: "Get raw blob contents from the repository",
          query: [],
          data: null,
          /** @param {{params:{id:string,sha:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    archive: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/archive",
        resource: "archive",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "Get an archive of the repository",
        query: [
          {
            name: "sha",
            type: "string"
          },
          {
            name: "format",
            type: "string"
          },
          {
            name: "path",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{sha:string,format:string,path:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    compare: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/compare",
        resource: "compare",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Compare two branches, tags, or commits",
        query: [
          {
            name: "from",
            type: "string"
          },
          {
            name: "to",
            type: "string"
          },
          {
            name: "from_project_id",
            type: "string"
          },
          {
            name: "straight",
            type: "string"
          },
          {
            name: "unidiff",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{from:string,to:string,from_project_id:string,straight:string,unidiff:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},commits:[{id:string,short_id:string,created_at:dateTime,parent_ids:[{value:{}},{value:{}}],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},{id:string,short_id:string,created_at:dateTime,parent_ids:[{value:{}},{value:{}}],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}],diffs:[{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}],compare_timeout:boolean,compare_same_ref:boolean,web_url:string}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    contributors: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/contributors",
        resource: "contributors",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get repository contributors",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          },
          {
            name: "order_by",
            type: "string"
          },
          {
            name: "sort",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,email:string,commits:number,additions:number,deletions:number}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    merge_base: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/merge_base",
        resource: "merge_base",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get the common ancestor between commits",
        query: [
          {
            name: "refs",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{refs:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    changelog: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/changelog",
        resource: "changelog",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 14.6",
        query: [
          {
            name: "version",
            type: "string"
          },
          {
            name: "from",
            type: "string"
          },
          {
            name: "to",
            type: "string"
          },
          {
            name: "date",
            type: "string"
          },
          {
            name: "trailer",
            type: "string"
          },
          {
            name: "config_file",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{version:string,from:string,to:string,date:string,trailer:string,config_file:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{notes:string}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/repository/changelog",
        resource: "changelog",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "This feature was introduced in GitLab 13.9",
        query: [],
        data: {
          mode: "raw",
          raw: {
            version: "string",
            from: "string",
            to: "string",
            date: "dateTime",
            trailer: "Changelog",
            branch: "string",
            config_file: "string",
            file: "CHANGELOG.md",
            message: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{version:string,from:string,to:string,date:dateTime,trailer:Changelog,branch:string,config_file:string,file:CHANGELOG.md,message:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    submodules: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/repository/submodules/:submodule",
        resource: "submodules",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "submodule",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Update existing submodule reference in repository",
        query: [],
        data: {
          mode: "raw",
          raw: {
            commit_sha: "string",
            branch: "string",
            commit_message: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,submodule:string},data:{commit_sha:string,branch:string,commit_message:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string,stats:{additions:number,deletions:number,total:number},status:string,project_id:number,last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string}}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    tags: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/repository/tags",
        resource: "tags",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a project repository tags",
        query: [
          {
            name: "sort",
            type: "string"
          },
          {
            name: "order_by",
            type: "string"
          },
          {
            name: "search",
            type: "string"
          },
          {
            name: "page_token",
            type: "string"
          },
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{sort:string,order_by:string,search:string,page_token:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{name:string,message:string,target:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},release:{tag_name:{value:{}},description:{value:{}}},protected:boolean,created_at:dateTime},{name:string,message:string,target:string,commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},release:{tag_name:{value:{}},description:{value:{}}},protected:boolean,created_at:dateTime}]},{code:403},{code:404},{code:422},{code:503}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/repository/tags",
        resource: "tags",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Create a new repository tag",
        query: [],
        data: {
          mode: "raw",
          raw: {
            tag_name: "string",
            ref: "string",
            message: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{tag_name:string,ref:string,message:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{name:string,message:string,target:string,commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},release:{tag_name:string,description:string},protected:boolean,created_at:dateTime}},{code:400},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/repository/tags/:tag_name",
        resource: "tags",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "tag_name",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a single repository tag",
        query: [],
        data: null,
        /** @param {{params:{id:string,tag_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,message:string,target:string,commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},release:{tag_name:string,description:string},protected:boolean,created_at:dateTime}},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/repository/tags/:tag_name",
        resource: "tags",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "tag_name",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete a repository tag",
        query: [],
        data: null,
        /** @param {{params:{id:string,tag_name:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404},{code:412}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      signature: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/repository/tags/:tag_name/signature",
          resource: "signature",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get a tag's signature",
          query: [],
          data: null,
          /** @param {{params:{id:string,tag_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{signature_type:string,signature:string}},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    }
  },
  jobs: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/jobs",
      resource: "jobs",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a projects jobs",
      query: [
        {
          name: "scope",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{scope:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}]},{code:401},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    artifacts: {
      download: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/jobs/artifacts/:ref_name/download",
          resource: "download",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "ref_name",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 8.10",
          query: [
            {
              name: "job",
              type: "string"
            },
            {
              name: "job_token",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,ref_name:string},query:{job:string,job_token:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      raw: {
        "*artifact_path": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path",
            resource: "*artifact_path",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "ref_name",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 11.5",
            query: [
              {
                name: "job",
                type: "string"
              },
              {
                name: "artifact_path",
                type: "string"
              },
              {
                name: "job_token",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string,ref_name:string},query:{job:string,artifact_path:string,job_token:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      },
      get: {
        method: "get",
        url: "api/v4/projects/:id/jobs/:job_id/artifacts",
        resource: "artifacts",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "job_id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 8.5",
        query: [
          {
            name: "job_token",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,job_id:string},query:{job_token:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/jobs/:job_id/artifacts",
        resource: "artifacts",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "job_id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 11.9",
        query: [],
        data: null,
        /** @param {{params:{id:string,job_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:403},{code:409}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      "*artifact_path": {
        get: {
          method: "get",
          url: "api/v4/projects/:id/jobs/:job_id/artifacts/*artifact_path",
          resource: "*artifact_path",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "job_id",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 10.0",
          query: [
            {
              name: "artifact_path",
              type: "string"
            },
            {
              name: "job_token",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,job_id:string},query:{artifact_path:string,job_token:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      keep: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/jobs/:job_id/artifacts/keep",
          resource: "keep",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "job_id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Keep the artifacts to prevent them from being deleted",
          query: [],
          data: null,
          /** @param {{params:{id:string,job_id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/jobs/:job_id",
      resource: "jobs",
      variable: [
        {
          name: "job_id",
          type: "string"
        },
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a specific job of a project",
      query: [],
      data: null,
      /** @param {{params:{job_id:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    trace: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/jobs/:job_id/trace",
        resource: "trace",
        variable: [
          {
            name: "job_id",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a trace of a specific job of a project",
        query: [],
        data: null,
        /** @param {{params:{job_id:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    cancel: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/jobs/:job_id/cancel",
        resource: "cancel",
        variable: [
          {
            name: "job_id",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Cancel a specific job of a project",
        query: [],
        data: null,
        /** @param {{params:{job_id:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    retry: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/jobs/:job_id/retry",
        resource: "retry",
        variable: [
          {
            name: "job_id",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Retry a specific job of a project",
        query: [],
        data: null,
        /** @param {{params:{job_id:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    erase: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/jobs/:job_id/erase",
        resource: "erase",
        variable: [
          {
            name: "job_id",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Erase job (remove artifacts and the trace)",
        query: [],
        data: null,
        /** @param {{params:{job_id:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:string,size:number},artifacts:[{file_type:string,size:number,filename:string,file_format:string},{file_type:string,size:number,filename:string,file_format:string}],runner:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string},runner_manager:{id:number,system_id:string,version:string,revision:string,platform:string,architecture:string,created_at:string,contacted_at:string,ip_address:string,status:string},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}},{code:401},{code:403},{code:404},{code:409}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    play: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/jobs/:job_id/play",
        resource: "play",
        variable: [
          {
            name: "job_id",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was added in GitLab 8.11",
        query: [],
        data: {
          mode: "raw",
          raw: {
            job_variables_attributes: [
              {
                key: "string",
                value: "string"
              },
              {
                key: "string",
                value: "string"
              }
            ]
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{job_id:string,id:string},data:{job_variables_attributes:[{key:string,value:string},{key:string,value:string}]},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,created_at:string,bio:string,location:string,public_email:string,skype:string,linkedin:string,twitter:string,discord:string,website_url:string,organization:string,job_title:string,pronouns:string,bot:string,work_information:string,followers:string,following:string,is_followed:string,local_time:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}}},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  artifacts: {
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/artifacts",
      resource: "artifacts",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Expire the artifacts files from a project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:202},{code:401},{code:403},{code:409}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  resource_groups: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/resource_groups",
      resource: "resource_groups",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get all resource groups for a project",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,key:string,process_mode:string,created_at:dateTime,updated_at:dateTime},{id:number,key:string,process_mode:string,created_at:dateTime,updated_at:dateTime}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/resource_groups/:key",
      resource: "resource_groups",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a specific resource group",
      query: [],
      data: null,
      /** @param {{params:{id:string,key:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,key:string,process_mode:string,created_at:dateTime,updated_at:dateTime}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/resource_groups/:key",
      resource: "resource_groups",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates an existing resource group's properties.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          process_mode: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,key:string},data:{process_mode:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,key:string,process_mode:string,created_at:dateTime,updated_at:dateTime}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    upcoming_jobs: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/resource_groups/:key/upcoming_jobs",
        resource: "upcoming_jobs",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "key",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "List upcoming jobs for a specific resource group",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,key:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string}}]},{code:401},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    }
  },
  runners: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/runners",
      resource: "runners",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "List all runners available in the project, including from ancestor groups and any allowed shared runners.",
      query: [
        {
          name: "scope",
          type: "string"
        },
        {
          name: "type",
          type: "string"
        },
        {
          name: "paused",
          type: "string"
        },
        {
          name: "status",
          type: "string"
        },
        {
          name: "tag_list",
          type: "string"
        },
        {
          name: "version_prefix",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{scope:string,type:string,paused:string,status:string,tag_list:string,version_prefix:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}},{code:400},{code:403}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/runners",
      resource: "runners",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Enable an available project runner in the project.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          runner_id: "number"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{runner_id:number},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}},{code:400},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/runners/:runner_id",
      resource: "runners",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "runner_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "It works only if the project isn't the only project associated with the specified runner. If so, an error is returned. Use the call to delete a runner instead.",
      query: [],
      data: null,
      /** @param {{params:{id:string,runner_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,description:string,ip_address:string,active:boolean,paused:boolean,is_shared:boolean,runner_type:string,name:string,online:boolean,status:string}},{code:400},{code:403},{code:404},{code:412}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    reset_registration_token: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/runners/reset_registration_token",
        resource: "reset_registration_token",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Reset runner registration token",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{token:string,token_expires_at:string}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  secure_files: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/secure_files",
      resource: "secure_files",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get list of secure files in a project",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:dateTime,expires_at:dateTime,metadata:object,file_extension:string}}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/secure_files",
      resource: "secure_files",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create a secure file",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          file: "binary"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,file:binary},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:dateTime,expires_at:dateTime,metadata:object,file_extension:string}},{code:400}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/secure_files/:secure_file_id",
      resource: "secure_files",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "secure_file_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the details of a specific secure file in a project",
      query: [],
      data: null,
      /** @param {{params:{id:string,secure_file_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,checksum:string,checksum_algorithm:string,created_at:dateTime,expires_at:dateTime,metadata:object,file_extension:string}},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/secure_files/:secure_file_id",
      resource: "secure_files",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "secure_file_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Remove a secure file",
      query: [],
      data: null,
      /** @param {{params:{id:string,secure_file_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    download: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/secure_files/:secure_file_id/download",
        resource: "download",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "secure_file_id",
            type: "string"
          }
        ],
        headers: {},
        description: "Download secure file",
        query: [],
        data: null,
        /** @param {{params:{id:string,secure_file_id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  pipelines: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/pipelines",
      resource: "pipelines",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 8.11.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "scope",
          type: "string"
        },
        {
          name: "status",
          type: "string"
        },
        {
          name: "ref",
          type: "string"
        },
        {
          name: "sha",
          type: "string"
        },
        {
          name: "yaml_errors",
          type: "string"
        },
        {
          name: "username",
          type: "string"
        },
        {
          name: "updated_before",
          type: "string"
        },
        {
          name: "updated_after",
          type: "string"
        },
        {
          name: "order_by",
          type: "string"
        },
        {
          name: "sort",
          type: "string"
        },
        {
          name: "source",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,scope:string,status:string,ref:string,sha:string,yaml_errors:string,username:string,updated_before:string,updated_after:string,order_by:string,sort:string,source:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string}]},{code:401},{code:403}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    latest: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pipelines/latest",
        resource: "latest",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 12.3",
        query: [
          {
            name: "ref",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{ref:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/pipelines/:pipeline_id",
      resource: "pipelines",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "pipeline_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 8.11",
      query: [],
      data: null,
      /** @param {{params:{id:string,pipeline_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/pipelines/:pipeline_id",
      resource: "pipelines",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "pipeline_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 11.6",
      query: [],
      data: null,
      /** @param {{params:{id:string,pipeline_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    jobs: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/jobs",
        resource: "jobs",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get pipeline jobs",
        query: [
          {
            name: "include_retried",
            type: "string"
          },
          {
            name: "scope",
            type: "string"
          },
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,pipeline_id:string},query:{include_retried:string,scope:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]}]},{code:401},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    bridges: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/bridges",
        resource: "bridges",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get pipeline bridge jobs",
        query: [
          {
            name: "scope",
            type: "string"
          },
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,pipeline_id:string},query:{scope:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},downstream_pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}}},{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},downstream_pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    variables: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/variables",
        resource: "variables",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 11.11",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string},{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}]},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    test_report: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/test_report",
        resource: "test_report",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 13.0.",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,test_suites:[{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[{value:{}},{value:{}}]},{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[{value:{}},{value:{}}]}]}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    test_report_summary: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/test_report_summary",
        resource: "test_report_summary",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 14.2",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{total:number,test_suites:{name:string,total_time:number,total_count:number,success_count:number,failed_count:number,skipped_count:number,error_count:number,suite_error:string,test_cases:[{value:{}},{value:{}}],build_ids:[number,number]}}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    metadata: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/metadata",
        resource: "metadata",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 16.6",
        query: [],
        data: {
          mode: "raw",
          raw: {
            name: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,pipeline_id:string},data:{name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}},name:string}},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    retry: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/retry",
        resource: "retry",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 8.11.",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    cancel: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/pipelines/:pipeline_id/cancel",
        resource: "cancel",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 8.11.",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  pipeline: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/pipeline",
      resource: "pipeline",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 8.14",
      query: [],
      data: {
        mode: "raw",
        raw: {
          ref: "string",
          variables: [
            {
              key: "string",
              value: "string",
              variable_type: "env_var"
            },
            {
              key: "string",
              value: "string",
              variable_type: "env_var"
            }
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{ref:string,variables:[{key:string,value:string,variable_type:env_var},{key:string,value:string,variable_type:env_var}]},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    }
  },
  pipeline_schedules: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/pipeline_schedules",
      resource: "pipeline_schedules",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get all pipeline schedules",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "scope",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,scope:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:dateTime,active:boolean,created_at:dateTime,updated_at:dateTime,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:dateTime,active:boolean,created_at:dateTime,updated_at:dateTime,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/pipeline_schedules",
      resource: "pipeline_schedules",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create a new pipeline schedule",
      query: [],
      data: {
        mode: "raw",
        raw: {
          description: "string",
          ref: "string",
          cron: "string",
          cron_timezone: "UTC",
          active: true
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{description:string,ref:string,cron:string,cron_timezone:UTC,active:true},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:dateTime,active:boolean,created_at:dateTime,updated_at:dateTime,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id",
      resource: "pipeline_schedules",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "pipeline_schedule_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a single pipeline schedule",
      query: [],
      data: null,
      /** @param {{params:{id:string,pipeline_schedule_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:dateTime,active:boolean,created_at:dateTime,updated_at:dateTime,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id",
      resource: "pipeline_schedules",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "pipeline_schedule_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Edit a pipeline schedule",
      query: [],
      data: {
        mode: "raw",
        raw: {
          description: "string",
          ref: "string",
          cron: "string",
          cron_timezone: "string",
          active: "boolean"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,pipeline_schedule_id:string},data:{description:string,ref:string,cron:string,cron_timezone:string,active:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:dateTime,active:boolean,created_at:dateTime,updated_at:dateTime,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id",
      resource: "pipeline_schedules",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "pipeline_schedule_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Delete a pipeline schedule",
      query: [],
      data: null,
      /** @param {{params:{id:string,pipeline_schedule_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:403},{code:404},{code:412}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    pipelines: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/pipelines",
        resource: "pipelines",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_schedule_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get all pipelines triggered from a pipeline schedule",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_schedule_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string}]},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    take_ownership: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/take_ownership",
        resource: "take_ownership",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_schedule_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Take ownership of a pipeline schedule",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_schedule_id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,ref:string,cron:string,cron_timezone:string,next_run_at:dateTime,active:boolean,created_at:dateTime,updated_at:dateTime,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},last_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},variables:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    play: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/play",
        resource: "play",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_schedule_id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was added in GitLab 12.8",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_schedule_id:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    variables: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables",
        resource: "variables",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_schedule_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Create a new pipeline schedule variable",
        query: [],
        data: {
          mode: "raw",
          raw: {
            key: "string",
            value: "string",
            variable_type: "env_var"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,pipeline_schedule_id:string},data:{key:string,value:string,variable_type:env_var},clientOptions:{}}} requestOptions * @return {[{code:201,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key",
        resource: "variables",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_schedule_id",
            type: "string"
          },
          {
            name: "key",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Edit a pipeline schedule variable",
        query: [],
        data: {
          mode: "raw",
          raw: {
            value: "string",
            variable_type: "env_var"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,pipeline_schedule_id:string,key:string},data:{value:string,variable_type:env_var},clientOptions:{}}} requestOptions * @return {[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key",
        resource: "variables",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "pipeline_schedule_id",
            type: "string"
          },
          {
            name: "key",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Delete a pipeline schedule variable",
        query: [],
        data: null,
        /** @param {{params:{id:string,pipeline_schedule_id:string,key:string},clientOptions:{}}} requestOptions * @return {[{code:202,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  "(ref": {
    ")trigger": {
      pipeline: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/(ref/:ref/)trigger/pipeline",
          resource: "pipeline",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "ref",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          description: "Trigger a GitLab project pipeline",
          query: [],
          data: {
            mode: "raw",
            raw: {
              token: "string",
              variables: "object"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,ref:string},data:{token:string,variables:object},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:400},{code:401},{code:403},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      }
    }
  },
  triggers: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/triggers",
      resource: "triggers",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get trigger tokens list",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,token:string,description:string,created_at:dateTime,updated_at:dateTime,last_used:dateTime,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},{id:number,token:string,description:string,created_at:dateTime,updated_at:dateTime,last_used:dateTime,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}]},{code:401},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/triggers",
      resource: "triggers",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create a trigger token",
      query: [],
      data: {
        mode: "raw",
        raw: {
          description: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{description:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,token:string,description:string,created_at:dateTime,updated_at:dateTime,last_used:dateTime,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/triggers/:trigger_id",
      resource: "triggers",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "trigger_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get specific trigger token of a project",
      query: [],
      data: null,
      /** @param {{params:{id:string,trigger_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,token:string,description:string,created_at:dateTime,updated_at:dateTime,last_used:dateTime,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/triggers/:trigger_id",
      resource: "triggers",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "trigger_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Update a trigger token",
      query: [],
      data: {
        mode: "raw",
        raw: {
          description: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,trigger_id:string},data:{description:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,token:string,description:string,created_at:dateTime,updated_at:dateTime,last_used:dateTime,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/triggers/:trigger_id",
      resource: "triggers",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "trigger_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Delete a trigger token",
      query: [],
      data: null,
      /** @param {{params:{id:string,trigger_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:403},{code:404},{code:412}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  variables: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/variables",
      resource: "variables",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get project variables",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/variables",
      resource: "variables",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create a new variable in a project",
      query: [],
      data: {
        mode: "raw",
        raw: {
          key: "string",
          value: "string",
          protected: "boolean",
          masked: "boolean",
          masked_and_hidden: "boolean",
          raw: "boolean",
          variable_type: "string",
          environment_scope: "string",
          description: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{key:string,value:string,protected:boolean,masked:boolean,masked_and_hidden:boolean,raw:boolean,variable_type:string,environment_scope:string,description:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:400}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/variables/:key",
      resource: "variables",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the details of a single variable from a project",
      query: [
        {
          name: "filter[environment_scope]",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,key:string},query:{filter[environment_scope]:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/variables/:key",
      resource: "variables",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Update an existing variable from a project",
      query: [],
      data: {
        mode: "raw",
        raw: {
          value: "string",
          protected: "boolean",
          masked: "boolean",
          environment_scope: "string",
          raw: "boolean",
          variable_type: "string",
          filter: {
            environment_scope: "string"
          },
          description: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,key:string},data:{value:string,protected:boolean,masked:boolean,environment_scope:string,raw:boolean,variable_type:string,filter:{environment_scope:string},description:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/variables/:key",
      resource: "variables",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Delete an existing variable from a project",
      query: [
        {
          name: "filter[environment_scope]",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,key:string},query:{filter[environment_scope]:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{variable_type:string,key:string,value:string,hidden:boolean,protected:boolean,masked:boolean,raw:boolean,environment_scope:string,description:string}},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  cluster_agents: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/cluster_agents",
      resource: "cluster_agents",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 14.10. Returns the list of agents registered for the project.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},created_at:string,created_by_user_id:string}}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/cluster_agents",
      resource: "cluster_agents",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 14.10. Registers an agent to the project.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},created_at:string,created_by_user_id:string}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/cluster_agents/:agent_id",
      resource: "cluster_agents",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "agent_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 14.10. Gets a single agent details.",
      query: [],
      data: null,
      /** @param {{params:{id:string,agent_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,name:string,config_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},created_at:string,created_by_user_id:string}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/cluster_agents/:agent_id",
      resource: "cluster_agents",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "agent_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 14.10. Deletes an existing agent registration.",
      query: [],
      data: null,
      /** @param {{params:{id:string,agent_id:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    tokens: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/cluster_agents/:agent_id/tokens",
        resource: "tokens",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "agent_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 15.0. Returns a list of tokens for an agent.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,agent_id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/cluster_agents/:agent_id/tokens",
        resource: "tokens",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "agent_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 15.0. Creates a new token for an agent.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            name: "string",
            description: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,agent_id:string},data:{name:string,description:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string,last_used_at:string,token:string}}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/cluster_agents/:agent_id/tokens/:token_id",
        resource: "tokens",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "agent_id",
            type: "string"
          },
          {
            name: "token_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 15.0. Gets a single agent token.",
        query: [],
        data: null,
        /** @param {{params:{id:string,agent_id:string,token_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,name:string,description:string,agent_id:string,status:string,created_at:string,created_by_user_id:string,last_used_at:string}}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/cluster_agents/:agent_id/tokens/:token_id",
        resource: "tokens",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "agent_id",
            type: "string"
          },
          {
            name: "token_id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 15.0. Revokes an agent token.",
        query: [],
        data: null,
        /** @param {{params:{id:string,agent_id:string,token_id:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  statuses: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/statuses/:sha",
      resource: "statuses",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "sha",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Post status to a commit",
      query: [],
      data: {
        mode: "raw",
        raw: {
          state: "string",
          ref: "string",
          target_url: "string",
          description: "string",
          name: "default",
          context: "default",
          coverage: "float",
          pipeline_id: "number"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,sha:string},data:{state:string,ref:string,target_url:string,description:string,name:default,context:default,coverage:float,pipeline_id:number},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,sha:string,ref:string,status:string,name:string,target_url:string,description:string,created_at:dateTime,started_at:dateTime,finished_at:dateTime,allow_failure:boolean,coverage:float,pipeline_id:number,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    }
  },
  deploy_keys: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/deploy_keys",
      resource: "deploy_keys",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of a project's deploy keys.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,title:string,created_at:dateTime,expires_at:dateTime,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},projects_with_readonly_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},can_push:boolean},{id:number,title:string,created_at:dateTime,expires_at:dateTime,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},projects_with_readonly_access:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}},can_push:boolean}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/deploy_keys",
      resource: "deploy_keys",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Creates a new deploy key for a project. If the deploy key already exists in another project, it's joined to the current project only if the original one is accessible by the same user.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          key: "string",
          title: "string",
          can_push: "boolean",
          expires_at: "dateTime"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{key:string,title:string,can_push:boolean,expires_at:dateTime},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,title:string,created_at:dateTime,expires_at:dateTime,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},can_push:boolean}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/deploy_keys/:key_id",
      resource: "deploy_keys",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a single key.",
      query: [],
      data: null,
      /** @param {{params:{id:string,key_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,created_at:dateTime,expires_at:dateTime,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},can_push:boolean}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/deploy_keys/:key_id",
      resource: "deploy_keys",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates a deploy key for a project.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          title: "string",
          can_push: "boolean"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,key_id:string},data:{title:string,can_push:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,created_at:dateTime,expires_at:dateTime,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/deploy_keys/:key_id",
      resource: "deploy_keys",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "key_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Removes a deploy key from the project. If the deploy key is used only for this project, it's deleted from the system.",
      query: [],
      data: null,
      /** @param {{params:{id:string,key_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    enable: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/deploy_keys/:key_id/enable",
        resource: "enable",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "key_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Enables a deploy key for a project so this can be used. Returns the enabled key, with a status code 201 when successful. This feature was added in GitLab 8.11.",
        query: [],
        data: null,
        /** @param {{params:{id:string,key_id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,title:string,created_at:dateTime,expires_at:dateTime,key:string,usage_type:string,fingerprint:string,fingerprint_sha256:string,projects_with_write_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},projects_with_readonly_access:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime}}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  deploy_tokens: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/deploy_tokens",
      resource: "deploy_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of a project's deploy tokens. This feature was introduced in GitLab 12.9.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "active",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,active:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,name:string,username:string,expires_at:dateTime,revoked:boolean,expired:boolean},{id:number,name:string,username:string,expires_at:dateTime,revoked:boolean,expired:boolean}]},{code:401},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/deploy_tokens",
      resource: "deploy_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Creates a new deploy token for a project. This feature was introduced in GitLab 12.9.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          scopes: [
            "string",
            "string"
          ],
          expires_at: "dateTime",
          username: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,scopes:[string,string],expires_at:dateTime,username:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,username:string,expires_at:dateTime,revoked:boolean,expired:boolean,token:string}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/deploy_tokens/:token_id",
      resource: "deploy_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "token_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a single project's deploy token by ID. This feature was introduced in GitLab 14.9.",
      query: [],
      data: null,
      /** @param {{params:{id:string,token_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,username:string,expires_at:dateTime,revoked:boolean,expired:boolean}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/deploy_tokens/:token_id",
      resource: "deploy_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "token_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 12.9.",
      query: [],
      data: null,
      /** @param {{params:{id:string,token_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  deployments: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/deployments",
      resource: "deployments",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of deployments in a project. This feature was introduced in GitLab 8.11.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "order_by",
          type: "string"
        },
        {
          name: "sort",
          type: "string"
        },
        {
          name: "updated_after",
          type: "string"
        },
        {
          name: "updated_before",
          type: "string"
        },
        {
          name: "finished_after",
          type: "string"
        },
        {
          name: "finished_before",
          type: "string"
        },
        {
          name: "environment",
          type: "string"
        },
        {
          name: "status",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string,updated_after:string,updated_before:string,finished_after:string,finished_before:string,environment:string,status:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string}]},{code:400},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/deployments",
      resource: "deployments",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 12.4.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          environment: "string",
          sha: "string",
          ref: "string",
          tag: "boolean",
          status: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{environment:string,sha:string,ref:string,tag:boolean,status:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},status:string,created_at:dateTime,comment:string},approval_summary:{rules:{id:{value:{}},user_id:{value:{}},group_id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},required_approvals:{value:{}},group_inheritance_type:{value:{}},deployment_approvals:{value:{}}}}}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/deployments/:deployment_id",
      resource: "deployments",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "deployment_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 8.11.",
      query: [],
      data: null,
      /** @param {{params:{id:string,deployment_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},status:string,created_at:dateTime,comment:string},approval_summary:{rules:{id:{value:{}},user_id:{value:{}},group_id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},required_approvals:{value:{}},group_inheritance_type:{value:{}},deployment_approvals:{value:{}}}}}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/deployments/:deployment_id",
      resource: "deployments",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "deployment_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 12.4.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          status: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,deployment_id:string},data:{status:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},environment:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime},deployable:{id:number,status:string,stage:string,name:string,ref:string,tag:boolean,coverage:float,allow_failure:boolean,created_at:dateTime,started_at:dateTime,finished_at:dateTime,erased_at:dateTime,duration:float,queued_duration:float,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}},created_at:{value:{}},bio:{value:{}},location:{value:{}},public_email:{value:{}},skype:{value:{}},linkedin:{value:{}},twitter:{value:{}},discord:{value:{}},website_url:{value:{}},organization:{value:{}},job_title:{value:{}},pronouns:{value:{}},bot:{value:{}},work_information:{value:{}},followers:{value:{}},following:{value:{}},is_followed:{value:{}},local_time:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}}},failure_reason:string,web_url:string,project:{ci_job_token_scope_enabled:string},artifacts_file:{filename:{value:{}},size:{value:{}}},artifacts:[{value:{}},{value:{}}],runner:{id:{value:{}},description:{value:{}},ip_address:{value:{}},active:{value:{}},paused:{value:{}},is_shared:{value:{}},runner_type:{value:{}},name:{value:{}},online:{value:{}},status:{value:{}}},runner_manager:{id:{value:{}},system_id:{value:{}},version:{value:{}},revision:{value:{}},platform:{value:{}},architecture:{value:{}},created_at:{value:{}},contacted_at:{value:{}},ip_address:{value:{}},status:{value:{}}},artifacts_expire_at:dateTime,archived:boolean,tag_list:[string,string]},status:string,pending_approval_count:number,approvals:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},status:string,created_at:dateTime,comment:string},approval_summary:{rules:{id:{value:{}},user_id:{value:{}},group_id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},required_approvals:{value:{}},group_inheritance_type:{value:{}},deployment_approvals:{value:{}}}}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/deployments/:deployment_id",
      resource: "deployments",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "deployment_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Delete a specific deployment that is not currently the last deployment for an environment or in a running state. This feature was introduced in GitLab 15.3.",
      query: [],
      data: null,
      /** @param {{params:{id:string,deployment_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    merge_requests: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/deployments/:deployment_id/merge_requests",
        resource: "merge_requests",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "deployment_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Retrieves the list of merge requests shipped with a given deployment. This feature was introduced in GitLab 12.7.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          },
          {
            name: "author_id",
            type: "string"
          },
          {
            name: "author_username",
            type: "string"
          },
          {
            name: "assignee_id",
            type: "string"
          },
          {
            name: "assignee_username",
            type: "string"
          },
          {
            name: "reviewer_username",
            type: "string"
          },
          {
            name: "labels",
            type: "string"
          },
          {
            name: "milestone",
            type: "string"
          },
          {
            name: "my_reaction_emoji",
            type: "string"
          },
          {
            name: "reviewer_id",
            type: "string"
          },
          {
            name: "state",
            type: "string"
          },
          {
            name: "order_by",
            type: "string"
          },
          {
            name: "sort",
            type: "string"
          },
          {
            name: "with_labels_details",
            type: "string"
          },
          {
            name: "with_merge_status_recheck",
            type: "string"
          },
          {
            name: "created_after",
            type: "string"
          },
          {
            name: "created_before",
            type: "string"
          },
          {
            name: "updated_after",
            type: "string"
          },
          {
            name: "updated_before",
            type: "string"
          },
          {
            name: "view",
            type: "string"
          },
          {
            name: "scope",
            type: "string"
          },
          {
            name: "source_branch",
            type: "string"
          },
          {
            name: "source_project_id",
            type: "string"
          },
          {
            name: "target_branch",
            type: "string"
          },
          {
            name: "search",
            type: "string"
          },
          {
            name: "in",
            type: "string"
          },
          {
            name: "wip",
            type: "string"
          },
          {
            name: "not[author_id]",
            type: "string"
          },
          {
            name: "not[author_username]",
            type: "string"
          },
          {
            name: "not[assignee_id]",
            type: "string"
          },
          {
            name: "not[assignee_username]",
            type: "string"
          },
          {
            name: "not[reviewer_username]",
            type: "string"
          },
          {
            name: "not[labels]",
            type: "string"
          },
          {
            name: "not[milestone]",
            type: "string"
          },
          {
            name: "not[my_reaction_emoji]",
            type: "string"
          },
          {
            name: "not[reviewer_id]",
            type: "string"
          },
          {
            name: "deployed_before",
            type: "string"
          },
          {
            name: "deployed_after",
            type: "string"
          },
          {
            name: "environment",
            type: "string"
          },
          {
            name: "approved",
            type: "string"
          },
          {
            name: "merge_user_id",
            type: "string"
          },
          {
            name: "merge_user_username",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,deployment_id:string},query:{page:string,per_page:string,author_id:string,author_username:string,assignee_id:string,assignee_username:string,reviewer_username:string,labels:string,milestone:string,my_reaction_emoji:string,reviewer_id:string,state:string,order_by:string,sort:string,with_labels_details:string,with_merge_status_recheck:string,created_after:string,created_before:string,updated_after:string,updated_before:string,view:string,scope:string,source_branch:string,source_project_id:string,target_branch:string,search:string,in:string,wip:string,not[author_id]:string,not[author_username]:string,not[assignee_id]:string,not[assignee_username]:string,not[reviewer_username]:string,not[labels]:string,not[milestone]:string,not[my_reaction_emoji]:string,not[reviewer_id]:string,deployed_before:string,deployed_after:string,environment:string,approved:string,merge_user_id:string,merge_user_username:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merge_user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},merged_at:string,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},reviewers:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:{value:{}},relative:{value:{}},full:{value:{}}},web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}]},{code:401},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    approval: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/deployments/:deployment_id/approval",
        resource: "approval",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "deployment_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 14.8.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            status: "string",
            comment: "string",
            represented_as: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,deployment_id:string},data:{status:string,comment:string,represented_as:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},status:string,created_at:dateTime,comment:string}}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  merge_requests: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/merge_requests",
      resource: "merge_requests",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get all merge requests for this project.",
      query: [
        {
          name: "author_id",
          type: "string"
        },
        {
          name: "author_username",
          type: "string"
        },
        {
          name: "assignee_id",
          type: "string"
        },
        {
          name: "assignee_username",
          type: "string"
        },
        {
          name: "reviewer_username",
          type: "string"
        },
        {
          name: "labels",
          type: "string"
        },
        {
          name: "milestone",
          type: "string"
        },
        {
          name: "my_reaction_emoji",
          type: "string"
        },
        {
          name: "reviewer_id",
          type: "string"
        },
        {
          name: "state",
          type: "string"
        },
        {
          name: "order_by",
          type: "string"
        },
        {
          name: "sort",
          type: "string"
        },
        {
          name: "with_labels_details",
          type: "string"
        },
        {
          name: "with_merge_status_recheck",
          type: "string"
        },
        {
          name: "created_after",
          type: "string"
        },
        {
          name: "created_before",
          type: "string"
        },
        {
          name: "updated_after",
          type: "string"
        },
        {
          name: "updated_before",
          type: "string"
        },
        {
          name: "view",
          type: "string"
        },
        {
          name: "scope",
          type: "string"
        },
        {
          name: "source_branch",
          type: "string"
        },
        {
          name: "source_project_id",
          type: "string"
        },
        {
          name: "target_branch",
          type: "string"
        },
        {
          name: "search",
          type: "string"
        },
        {
          name: "in",
          type: "string"
        },
        {
          name: "wip",
          type: "string"
        },
        {
          name: "not[author_id]",
          type: "string"
        },
        {
          name: "not[author_username]",
          type: "string"
        },
        {
          name: "not[assignee_id]",
          type: "string"
        },
        {
          name: "not[assignee_username]",
          type: "string"
        },
        {
          name: "not[reviewer_username]",
          type: "string"
        },
        {
          name: "not[labels]",
          type: "string"
        },
        {
          name: "not[milestone]",
          type: "string"
        },
        {
          name: "not[my_reaction_emoji]",
          type: "string"
        },
        {
          name: "not[reviewer_id]",
          type: "string"
        },
        {
          name: "deployed_before",
          type: "string"
        },
        {
          name: "deployed_after",
          type: "string"
        },
        {
          name: "environment",
          type: "string"
        },
        {
          name: "approved",
          type: "string"
        },
        {
          name: "merge_user_id",
          type: "string"
        },
        {
          name: "merge_user_username",
          type: "string"
        },
        {
          name: "approver_ids",
          type: "string"
        },
        {
          name: "approved_by_ids",
          type: "string"
        },
        {
          name: "approved_by_usernames",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "iids",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{author_id:string,author_username:string,assignee_id:string,assignee_username:string,reviewer_username:string,labels:string,milestone:string,my_reaction_emoji:string,reviewer_id:string,state:string,order_by:string,sort:string,with_labels_details:string,with_merge_status_recheck:string,created_after:string,created_before:string,updated_after:string,updated_before:string,view:string,scope:string,source_branch:string,source_project_id:string,target_branch:string,search:string,in:string,wip:string,not[author_id]:string,not[author_username]:string,not[assignee_id]:string,not[assignee_username]:string,not[reviewer_username]:string,not[labels]:string,not[milestone]:string,not[my_reaction_emoji]:string,not[reviewer_id]:string,deployed_before:string,deployed_after:string,environment:string,approved:string,merge_user_id:string,merge_user_username:string,approver_ids:string,approved_by_ids:string,approved_by_usernames:string,page:string,per_page:string,iids:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string}},{code:401},{code:404},{code:422}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/merge_requests",
      resource: "merge_requests",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create a new merge request.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          title: "string",
          source_branch: "string",
          target_branch: "string",
          target_project_id: "number",
          assignee_id: "number",
          assignee_ids: [
            "number",
            "number"
          ],
          reviewer_ids: [
            "number",
            "number"
          ],
          description: "string",
          labels: [
            "string",
            "string"
          ],
          add_labels: [
            "string",
            "string"
          ],
          remove_labels: [
            "string",
            "string"
          ],
          milestone_id: "number",
          remove_source_branch: "boolean",
          allow_collaboration: "boolean",
          allow_maintainer_to_push: "boolean",
          squash: "boolean",
          approvals_before_merge: "number"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{title:string,source_branch:string,target_branch:string,target_project_id:number,assignee_id:number,assignee_ids:[number,number],reviewer_ids:[number,number],description:string,labels:[string,string],add_labels:[string,string],remove_labels:[string,string],milestone_id:number,remove_source_branch:boolean,allow_collaboration:boolean,allow_maintainer_to_push:boolean,squash:boolean,approvals_before_merge:number},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:400},{code:401},{code:404},{code:409},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/merge_requests/:merge_request_iid",
      resource: "merge_requests",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "merge_request_iid",
          type: "string"
        }
      ],
      headers: {},
      description: "Only for administrators and project owners. Deletes the merge request in question. ",
      query: [],
      data: null,
      /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404},{code:412}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/merge_requests/:merge_request_iid",
      resource: "merge_requests",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "merge_request_iid",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Shows information about a single merge request. Note: the `changes_count` value in the response is a string, not an integer. This is because when an merge request has too many changes to display and store, it is capped at 1,000. In that case, the API returns the string `\"1000+\"` for the changes count.",
      query: [
        {
          name: "render_html",
          type: "string"
        },
        {
          name: "include_diverged_commits_count",
          type: "string"
        },
        {
          name: "include_rebase_in_progress",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,merge_request_iid:string},query:{render_html:string,include_diverged_commits_count:string,include_rebase_in_progress:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/merge_requests/:merge_request_iid",
      resource: "merge_requests",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "merge_request_iid",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates an existing merge request. You can change the target branch, title, or even close the merge request.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          title: "string",
          target_branch: "string",
          state_event: "string",
          discussion_locked: "boolean",
          assignee_id: "number",
          assignee_ids: [
            "number",
            "number"
          ],
          reviewer_ids: [
            "number",
            "number"
          ],
          description: "string",
          labels: [
            "string",
            "string"
          ],
          add_labels: [
            "string",
            "string"
          ],
          remove_labels: [
            "string",
            "string"
          ],
          milestone_id: "number",
          remove_source_branch: "boolean",
          allow_collaboration: "boolean",
          allow_maintainer_to_push: "boolean",
          squash: "boolean",
          approvals_before_merge: "number"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,merge_request_iid:string},data:{title:string,target_branch:string,state_event:string,discussion_locked:boolean,assignee_id:number,assignee_ids:[number,number],reviewer_ids:[number,number],description:string,labels:[string,string],add_labels:[string,string],remove_labels:[string,string],milestone_id:number,remove_source_branch:boolean,allow_collaboration:boolean,allow_maintainer_to_push:boolean,squash:boolean,approvals_before_merge:number},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:400},{code:404},{code:409},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    draft_notes: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes",
        resource: "draft_notes",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of merge request draft notes",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object},{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}]},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes",
        resource: "draft_notes",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Create a new draft note",
        query: [],
        data: {
          mode: "raw",
          raw: {
            note: "string",
            in_reply_to_discussion_id: "string",
            commit_id: "string",
            resolve_discussion: "boolean",
            position: {
              base_sha: "string",
              start_sha: "string",
              head_sha: "string",
              position_type: "string",
              new_path: "string",
              new_line: "number",
              old_path: "string",
              old_line: "number",
              width: "number",
              height: "number",
              x: "number",
              y: "number",
              line_range: {
                start: {
                  line_code: "string",
                  type: "string",
                  old_line: "string",
                  new_line: "string"
                },
                end: {
                  line_code: "string",
                  type: "string",
                  old_line: "string",
                  new_line: "string"
                }
              }
            }
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{note:string,in_reply_to_discussion_id:string,commit_id:string,resolve_discussion:boolean,position:{base_sha:string,start_sha:string,head_sha:string,position_type:string,new_path:string,new_line:number,old_path:string,old_line:number,width:number,height:number,x:number,y:number,line_range:{start:{line_code:string,type:string,old_line:string,new_line:string},end:{line_code:string,type:string,old_line:string,new_line:string}}}},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id",
        resource: "draft_notes",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          },
          {
            name: "draft_note_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a single draft note",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string,draft_note_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id",
        resource: "draft_notes",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          },
          {
            name: "draft_note_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Modify an existing draft note",
        query: [],
        data: {
          mode: "raw",
          raw: {
            note: "string",
            position: {
              base_sha: "string",
              start_sha: "string",
              head_sha: "string",
              position_type: "string",
              new_path: "string",
              new_line: "number",
              old_path: "string",
              old_line: "number",
              width: "number",
              height: "number",
              x: "number",
              y: "number",
              line_range: {
                start: {
                  line_code: "string",
                  type: "string",
                  old_line: "string",
                  new_line: "string"
                },
                end: {
                  line_code: "string",
                  type: "string",
                  old_line: "string",
                  new_line: "string"
                }
              }
            }
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string,draft_note_id:string},data:{note:string,position:{base_sha:string,start_sha:string,head_sha:string,position_type:string,new_path:string,new_line:number,old_path:string,old_line:number,width:number,height:number,x:number,y:number,line_range:{start:{line_code:string,type:string,old_line:string,new_line:string},end:{line_code:string,type:string,old_line:string,new_line:string}}}},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id",
        resource: "draft_notes",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          },
          {
            name: "draft_note_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Delete a draft note",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string,draft_note_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,author_id:number,merge_request_id:number,resolve_discussion:boolean,discussion_id:number,note:string,commit_id:number,line_code:string,position:object}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      publish: {
        put: {
          method: "put",
          url: "api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id/publish",
          resource: "publish",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "merge_request_iid",
              type: "string"
            },
            {
              name: "draft_note_id",
              type: "string"
            }
          ],
          headers: {},
          description: "Publish a pending draft note",
          query: [],
          data: null,
          /** @param {{params:{id:string,merge_request_iid:string,draft_note_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      bulk_publish: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/merge_requests/:merge_request_iid/draft_notes/bulk_publish",
          resource: "bulk_publish",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "merge_request_iid",
              type: "string"
            }
          ],
          headers: {},
          description: "Bulk publish all pending draft notes",
          query: [],
          data: null,
          /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    time_estimate: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/time_estimate",
        resource: "time_estimate",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Sets an estimated time of work for this merge_request.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            duration: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{duration:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    reset_time_estimate: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/reset_time_estimate",
        resource: "reset_time_estimate",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Resets the estimated time for this merge_request to 0 seconds.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    add_spent_time: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/add_spent_time",
        resource: "add_spent_time",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Adds spent time for this merge_request.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            duration: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{duration:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    reset_spent_time: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/reset_spent_time",
        resource: "reset_spent_time",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Resets the total spent time for this merge_request to 0 seconds.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    time_stats: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/time_stats",
        resource: "time_stats",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get time tracking stats",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    participants: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/participants",
        resource: "participants",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of merge request participants.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    reviewers: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/reviewers",
        resource: "reviewers",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of merge request reviewers.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},state:string,created_at:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    commits: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/commits",
        resource: "commits",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of merge request commits.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    context_commits: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits",
        resource: "context_commits",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of merge request context commits.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits",
        resource: "context_commits",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Create a list of merge request context commits.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            commits: [
              "string",
              "string"
            ]
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{commits:[string,string]},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string}},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/context_commits",
        resource: "context_commits",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete a list of merge request context commits.",
        query: [
          {
            name: "commits",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},query:{commits:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    changes: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/changes",
        resource: "changes",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Shows information about the merge request including its files and changes.",
        query: [
          {
            name: "unidiff",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},query:{unidiff:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string},changes:{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean},overflow:string}},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    diffs: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/diffs",
        resource: "diffs",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of merge request diffs.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          },
          {
            name: "unidiff",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},query:{page:string,per_page:string,unidiff:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    pipelines: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/pipelines",
        resource: "pipelines",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of merge request pipelines.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/pipelines",
        resource: "pipelines",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Create a new pipeline for a merge request. A pipeline created via this endpoint doesn’t run a regular branch/tag pipeline. It requires `.gitlab-ci.yml` to be configured with `only: [merge_requests]` to create jobs.",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:string,text:string,label:string,group:string,tooltip:string,has_details:boolean,details_path:string,illustration:object,favicon:string,action:{icon:string,title:string,path:string,method:string,button_title:string,confirmation_message:string}}}},{code:400},{code:404},{code:405}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    merge: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/merge",
        resource: "merge",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Accept and merge changes submitted with the merge request using this API.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            merge_commit_message: "string",
            squash_commit_message: "string",
            should_remove_source_branch: "boolean",
            merge_when_pipeline_succeeds: "boolean",
            sha: "string",
            squash: "boolean",
            skip_merge_train: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{merge_commit_message:string,squash_commit_message:string,should_remove_source_branch:boolean,merge_when_pipeline_succeeds:boolean,sha:string,squash:boolean,skip_merge_train:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:400},{code:401},{code:404},{code:405},{code:409},{code:422}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    merge_ref: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/merge_ref",
        resource: "merge_ref",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {},
        description: "Returns the up to date merge-ref HEAD commit",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    cancel_merge_when_pipeline_succeeds: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/cancel_merge_when_pipeline_succeeds",
        resource: "cancel_merge_when_pipeline_succeeds",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merged_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merge_user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},merged_at:string,closed_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},closed_at:string,title_html:string,description_html:string,target_branch:string,source_branch:string,user_notes_count:string,upvotes:string,downvotes:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignees:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},assignee:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},reviewers:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},source_project_id:string,target_project_id:string,labels:string,draft:string,imported:string,imported_from:string,work_in_progress:string,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},merge_when_pipeline_succeeds:string,merge_status:string,detailed_merge_status:string,sha:string,merge_commit_sha:string,squash_commit_sha:string,discussion_locked:string,should_remove_source_branch:string,force_remove_source_branch:string,prepared_at:string,allow_collaboration:string,allow_maintainer_to_push:string,reference:string,references:{short:string,relative:string,full:string},web_url:string,time_stats:{time_estimate:number,total_time_spent:number,human_time_estimate:string,human_total_time_spent:string},squash:string,squash_on_merge:string,task_completion_status:string,has_conflicts:string,blocking_discussions_resolved:string,approvals_before_merge:string,subscribed:string,changes_count:string,latest_build_started_at:string,latest_build_finished_at:string,first_deployed_to_production_at:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string},head_pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,before_sha:string,tag:boolean,yaml_errors:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},started_at:dateTime,finished_at:dateTime,committed_at:dateTime,duration:number,queued_duration:number,coverage:float,detailed_status:{icon:{value:{}},text:{value:{}},label:{value:{}},group:{value:{}},tooltip:{value:{}},has_details:{value:{}},details_path:{value:{}},illustration:{value:{}},favicon:{value:{}},action:{value:{}}}},diff_refs:{base_sha:string,head_sha:string,start_sha:string},merge_error:string,rebase_in_progress:string,diverged_commits_count:string,first_contribution:string,user:{can_merge:string}}},{code:401},{code:404},{code:405},{code:406}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    rebase: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/rebase",
        resource: "rebase",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "Automatically rebase the `source_branch` of the merge request against its `target_branch`. This feature was added in GitLab 11.6",
        query: [],
        data: {
          mode: "raw",
          raw: {
            skip_ci: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{skip_ci:boolean},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403},{code:404},{code:409}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    closes_issues: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/closes_issues",
        resource: "closes_issues",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get all the issues that would be closed by merging the provided merge request.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{note:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    versions: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/versions",
        resource: "versions",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 8.12.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string},{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string}]}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/versions/:version_id",
        resource: "versions",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          },
          {
            name: "version_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 8.12.",
        query: [
          {
            name: "unidiff",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string,version_id:string},query:{unidiff:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,head_commit_sha:string,base_commit_sha:string,start_commit_sha:string,created_at:string,merge_request_id:string,state:string,real_size:string,patch_id_sha:string,commits:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},diffs:{diff:string,new_path:string,old_path:string,a_mode:string,b_mode:string,new_file:boolean,renamed_file:boolean,deleted_file:boolean,generated_file:boolean}}}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    approvals: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/approvals",
        resource: "approvals",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "List approvals for merge request",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/approvals",
        resource: "approvals",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in 10.6 and deprecated in 16.0",
        query: [],
        data: {
          mode: "raw",
          raw: {
            approvals_required: "number"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{approvals_required:number},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,merge_status:string,approved:boolean,approvals_required:number,approvals_left:number,require_password_to_approve:boolean,approved_by:[{user:{value:{}}},{user:{value:{}}}],suggested_approvers:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}],approvers:string,approver_groups:string,user_has_approved:boolean,user_can_approve:boolean,approval_rules_left:[{id:number,name:string,rule_type:string},{id:number,name:string,rule_type:string}],has_approval_rules:boolean,merge_request_approvers_available:boolean,multiple_approval_rules_available:boolean,invalid_approvers_rules:[{id:number,name:string,rule_type:string},{id:number,name:string,rule_type:string}]}}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    approve: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/approve",
        resource: "approve",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Approve a merge request",
        query: [],
        data: {
          mode: "raw",
          raw: {
            sha: "string",
            approval_password: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,merge_request_iid:string},data:{sha:string,approval_password:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}}},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    unapprove: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/unapprove",
        resource: "unapprove",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Remove an approval from a merge request",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{user_has_approved:boolean,user_can_approve:boolean,approved:boolean,approved_by:{user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}}}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    reset_approvals: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/reset_approvals",
        resource: "reset_approvals",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {},
        description: "Clear all approvals of merge request. This feature was added in GitLab 15.4",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    approval_state: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:merge_request_iid/approval_state",
        resource: "approval_state",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "merge_request_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get approval state of merge request",
        query: [],
        data: null,
        /** @param {{params:{id:string,merge_request_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{approval_rules_overwritten:boolean,rules:[{id:number,name:string,rule_type:string,eligible_approvers:[{value:{}},{value:{}}],approvals_required:number,users:[{value:{}},{value:{}}],groups:[{value:{}},{value:{}}],contains_hidden_groups:boolean,section:string,source_rule:{value:{}},overridden:boolean,code_owner:boolean,approved_by:[{value:{}},{value:{}}],approved:boolean},{id:number,name:string,rule_type:string,eligible_approvers:[{value:{}},{value:{}}],approvals_required:number,users:[{value:{}},{value:{}}],groups:[{value:{}},{value:{}}],contains_hidden_groups:boolean,section:string,source_rule:{value:{}},overridden:boolean,code_owner:boolean,approved_by:[{value:{}},{value:{}}],approved:boolean}]}}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    resource_milestone_events: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:eventable_id/resource_milestone_events",
        resource: "resource_milestone_events",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "eventable_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Gets a list of all milestone events for a single Merge request",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,eventable_id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string},{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string}]}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/merge_requests/:eventable_id/resource_milestone_events/:event_id",
        resource: "resource_milestone_events",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "event_id",
            type: "string"
          },
          {
            name: "eventable_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Returns a single milestone event for a specific project Merge request",
        query: [],
        data: null,
        /** @param {{params:{id:string,event_id:string,eventable_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime,resource_type:string,resource_id:number,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},action:string,state:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  environments: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/environments",
      resource: "environments",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get all environments for a given project. This feature was introduced in GitLab 8.11.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        },
        {
          name: "search",
          type: "string"
        },
        {
          name: "states",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,name:string,search:string,states:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime,tier:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},last_deployment:{id:{value:{}},iid:{value:{}},ref:{value:{}},sha:{value:{}},created_at:{value:{}},updated_at:{value:{}},user:{value:{}},environment:{value:{}},deployable:{value:{}},status:{value:{}}},state:string,auto_stop_at:dateTime},{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime,tier:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},last_deployment:{id:{value:{}},iid:{value:{}},ref:{value:{}},sha:{value:{}},created_at:{value:{}},updated_at:{value:{}},user:{value:{}},environment:{value:{}},deployable:{value:{}},status:{value:{}}},state:string,auto_stop_at:dateTime}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/environments",
      resource: "environments",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Creates a new environment with the given name and `external_url`. It returns `201` if the environment was successfully created, `400` for wrong parameters. This feature was introduced in GitLab 8.11.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          external_url: "string",
          tier: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,external_url:string,tier:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:dateTime}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/environments/:environment_id",
      resource: "environments",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "environment_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates an existing environment name and/or `external_url`. It returns `200` if the environment was successfully updated. In case of an error, a status code `400` is returned. This feature was introduced in GitLab 8.11.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          external_url: "string",
          tier: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,environment_id:string},data:{external_url:string,tier:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:dateTime}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/environments/:environment_id",
      resource: "environments",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "environment_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "It returns 204 if the environment was successfully deleted, and 404 if the environment does not exist. This feature was introduced in GitLab 8.11.",
      query: [],
      data: null,
      /** @param {{params:{id:string,environment_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:dateTime}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/environments/:environment_id",
      resource: "environments",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "environment_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a specific environment",
      query: [],
      data: null,
      /** @param {{params:{id:string,environment_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:dateTime}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    stop: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/environments/:environment_id/stop",
        resource: "stop",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "environment_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "It returns 200 if the environment was successfully stopped, and 404 if the environment does not exist.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            force: false
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,environment_id:string},data:{force:false},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime,tier:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},last_deployment:{id:number,iid:number,ref:string,sha:string,created_at:dateTime,updated_at:dateTime,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},environment:{id:{value:{}},name:{value:{}},slug:{value:{}},external_url:{value:{}},created_at:{value:{}},updated_at:{value:{}}},deployable:{id:{value:{}},status:{value:{}},stage:{value:{}},name:{value:{}},ref:{value:{}},tag:{value:{}},coverage:{value:{}},allow_failure:{value:{}},created_at:{value:{}},started_at:{value:{}},finished_at:{value:{}},erased_at:{value:{}},duration:{value:{}},queued_duration:{value:{}},user:{value:{}},commit:{value:{}},pipeline:{value:{}},failure_reason:{value:{}},web_url:{value:{}},project:{value:{}},artifacts_file:{value:{}},artifacts:{value:{}},runner:{value:{}},runner_manager:{value:{}},artifacts_expire_at:{value:{}},archived:{value:{}},tag_list:{value:{}}},status:string},state:string,auto_stop_at:dateTime}},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    review_apps: {
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/environments/review_apps",
        resource: "review_apps",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "It schedules for deletion multiple environments that have already been stopped and are in the review app folder. The actual deletion is performed after 1 week from the time of execution. By default, it only deletes environments 30 days or older. You can change this default using the `before` parameter.",
        query: [
          {
            name: "limit",
            type: "string"
          },
          {
            name: "dry_run",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{limit:string,dry_run:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,name:string,slug:string,external_url:string,created_at:dateTime,updated_at:dateTime}},{code:400},{code:401},{code:404},{code:409}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    stop_stale: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/environments/stop_stale",
        resource: "stop_stale",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "It returns `200` if stale environment check was scheduled successfully",
        query: [],
        data: {
          mode: "raw",
          raw: {
            before: "dateTime"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{before:dateTime},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  error_tracking: {
    settings: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/error_tracking/settings",
        resource: "settings",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get error tracking settings for the project. This feature was introduced in GitLab 12.7.",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      patch: {
        method: "patch",
        url: "api/v4/projects/:id/error_tracking/settings",
        resource: "settings",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "The API allows you to enable or disable the Error Tracking settings for a project.Only for users with the Maintainer role for the project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            active: "boolean",
            integrated: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{active:boolean,integrated:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/error_tracking/settings",
        resource: "settings",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Update Error Tracking settings for a project. Only for users with Maintainer role for the project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            active: "boolean",
            integrated: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{active:boolean,integrated:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{active:boolean,project_name:string,sentry_external_url:string,api_url:string,integrated:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    client_keys: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/error_tracking/client_keys",
        resource: "client_keys",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "List all client keys. This feature was introduced in GitLab 14.3.",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,active:boolean,public_key:string,sentry_dsn:string},{id:number,active:boolean,public_key:string,sentry_dsn:string}]}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/error_tracking/client_keys",
        resource: "client_keys",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Creates a new client key for a project. The public key attribute is generated automatically.This feature was introduced in GitLab 14.3.",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,active:boolean,public_key:string,sentry_dsn:string}}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/error_tracking/client_keys/:key_id",
        resource: "client_keys",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "key_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Removes a client key from the project. This feature was introduced in GitLab 14.3.",
        query: [],
        data: null,
        /** @param {{params:{id:string,key_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,active:boolean,public_key:string,sentry_dsn:string}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  freeze_periods: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/freeze_periods",
      resource: "freeze_periods",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Paginated list of Freeze Periods, sorted by created_at in ascending order. This feature was introduced in GitLab 13.0.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:dateTime,updated_at:dateTime},{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:dateTime,updated_at:dateTime}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/freeze_periods",
      resource: "freeze_periods",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Creates a freeze period. This feature was introduced in GitLab 13.0.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          freeze_start: "string",
          freeze_end: "string",
          cron_timezone: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{freeze_start:string,freeze_end:string,cron_timezone:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:dateTime,updated_at:dateTime}},{code:400},{code:401}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/freeze_periods/:freeze_period_id",
      resource: "freeze_periods",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "freeze_period_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
      query: [],
      data: null,
      /** @param {{params:{id:string,freeze_period_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:dateTime,updated_at:dateTime}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/freeze_periods/:freeze_period_id",
      resource: "freeze_periods",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "freeze_period_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          freeze_start: "string",
          freeze_end: "string",
          cron_timezone: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,freeze_period_id:string},data:{freeze_start:string,freeze_end:string,cron_timezone:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:dateTime,updated_at:dateTime}},{code:400},{code:401}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/freeze_periods/:freeze_period_id",
      resource: "freeze_periods",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "freeze_period_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Deletes a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
      query: [],
      data: null,
      /** @param {{params:{id:string,freeze_period_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,freeze_start:string,freeze_end:string,cron_timezone:string,created_at:dateTime,updated_at:dateTime}},{code:401}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  services: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/services",
      resource: "services",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of all active project integrations.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean},{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}]},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    "apple-app-store": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/apple-app-store",
        resource: "apple-app-store",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Apple App Store integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            app_store_issuer_id: "string",
            app_store_key_id: "string",
            app_store_private_key_file_name: "string",
            app_store_private_key: "string",
            app_store_protected_refs: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{app_store_issuer_id:string,app_store_key_id:string,app_store_private_key_file_name:string,app_store_private_key:string,app_store_protected_refs:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    asana: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/asana",
        resource: "asana",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Asana integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_key: "string",
            restrict_to_branch: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_key:string,restrict_to_branch:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    assembla: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/assembla",
        resource: "assembla",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Assembla integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            subdomain: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,subdomain:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    bamboo: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/bamboo",
        resource: "bamboo",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Bamboo integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            bamboo_url: "string",
            build_key: "string",
            username: "string",
            password: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{bamboo_url:string,build_key:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    bugzilla: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/bugzilla",
        resource: "bugzilla",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Bugzilla integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    buildkite: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/buildkite",
        resource: "buildkite",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Buildkite integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            project_url: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,project_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    campfire: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/campfire",
        resource: "campfire",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Campfire integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            subdomain: "string",
            room: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,subdomain:string,room:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    confluence: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/confluence",
        resource: "confluence",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Confluence integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            confluence_url: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{confluence_url:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "custom-issue-tracker": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/custom-issue-tracker",
        resource: "custom-issue-tracker",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Custom Issue Tracker integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    datadog: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/datadog",
        resource: "datadog",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Datadog integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_key: "string",
            datadog_site: "string",
            api_url: "string",
            archive_trace_events: "boolean",
            datadog_service: "string",
            datadog_env: "string",
            datadog_tags: "string",
            pipeline_events: "boolean",
            build_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_key:string,datadog_site:string,api_url:string,archive_trace_events:boolean,datadog_service:string,datadog_env:string,datadog_tags:string,pipeline_events:boolean,build_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "diffblue-cover": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/diffblue-cover",
        resource: "diffblue-cover",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Diffblue Cover integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            diffblue_license_key: "string",
            diffblue_access_token_name: "string",
            diffblue_access_token_secret: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{diffblue_license_key:string,diffblue_access_token_name:string,diffblue_access_token_secret:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    discord: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/discord",
        resource: "discord",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Discord integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "drone-ci": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/drone-ci",
        resource: "drone-ci",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Drone Ci integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            drone_url: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,drone_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "emails-on-push": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/emails-on-push",
        resource: "emails-on-push",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Emails On Push integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            recipients: "string",
            disable_diffs: "boolean",
            send_from_committer_email: "boolean",
            branches_to_be_notified: "string",
            push_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{recipients:string,disable_diffs:boolean,send_from_committer_email:boolean,branches_to_be_notified:string,push_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "external-wiki": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/external-wiki",
        resource: "external-wiki",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set External Wiki integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            external_wiki_url: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{external_wiki_url:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "gitlab-slack-application": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/gitlab-slack-application",
        resource: "gitlab-slack-application",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Gitlab Slack Application integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            channel: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            labels_to_be_notified: "string",
            labels_to_be_notified_behavior: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean",
            alert_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "google-play": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/google-play",
        resource: "google-play",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Google Play integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            package_name: "string",
            service_account_key_file_name: "string",
            service_account_key: "string",
            google_play_protected_refs: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{package_name:string,service_account_key_file_name:string,service_account_key:string,google_play_protected_refs:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "hangouts-chat": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/hangouts-chat",
        resource: "hangouts-chat",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Hangouts Chat integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            branches_to_be_notified: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    harbor: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/harbor",
        resource: "harbor",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Harbor integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            project_name: "string",
            username: "string",
            password: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,project_name:string,username:string,password:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    irker: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/irker",
        resource: "irker",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Irker integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            recipients: "string",
            default_irc_uri: "string",
            server_host: "string",
            server_port: "number",
            colorize_messages: "boolean",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{recipients:string,default_irc_uri:string,server_host:string,server_port:number,colorize_messages:boolean,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    jenkins: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/jenkins",
        resource: "jenkins",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Jenkins integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            jenkins_url: "string",
            project_name: "string",
            enable_ssl_verification: "boolean",
            username: "string",
            password: "string",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{jenkins_url:string,project_name:string,enable_ssl_verification:boolean,username:string,password:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    jira: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/jira",
        resource: "jira",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Jira integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            password: "string",
            api_url: "string",
            jira_auth_type: "number",
            username: "string",
            jira_issue_transition_automatic: "boolean",
            jira_issue_transition_id: "string",
            jira_issue_prefix: "string",
            jira_issue_regex: "string",
            issues_enabled: "boolean",
            project_keys: [
              "string",
              "string"
            ],
            comment_on_event_enabled: "boolean",
            commit_events: "boolean",
            merge_requests_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,password:string,api_url:string,jira_auth_type:number,username:string,jira_issue_transition_automatic:boolean,jira_issue_transition_id:string,jira_issue_prefix:string,jira_issue_regex:string,issues_enabled:boolean,project_keys:[string,string],comment_on_event_enabled:boolean,commit_events:boolean,merge_requests_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "mattermost-slash-commands": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/mattermost-slash-commands",
        resource: "mattermost-slash-commands",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Mattermost Slash Commands integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "slack-slash-commands": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/slack-slash-commands",
        resource: "slack-slash-commands",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Slack Slash Commands integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    packagist: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/packagist",
        resource: "packagist",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Packagist integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            username: "string",
            token: "string",
            server: "string",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{username:string,token:string,server:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    phorge: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/phorge",
        resource: "phorge",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Phorge integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "pipelines-email": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/pipelines-email",
        resource: "pipelines-email",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pipelines Email integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            recipients: "string",
            notify_only_broken_pipelines: "boolean",
            notify_only_default_branch: "boolean",
            branches_to_be_notified: "string",
            pipeline_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{recipients:string,notify_only_broken_pipelines:boolean,notify_only_default_branch:boolean,branches_to_be_notified:string,pipeline_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    pivotaltracker: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/pivotaltracker",
        resource: "pivotaltracker",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pivotaltracker integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            restrict_to_branch: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,restrict_to_branch:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    prometheus: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/prometheus",
        resource: "prometheus",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Prometheus integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_url: "string",
            google_iap_audience_client_id: "string",
            google_iap_service_account_json: "string",
            manual_configuration: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_url:string,google_iap_audience_client_id:string,google_iap_service_account_json:string,manual_configuration:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    pumble: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/pumble",
        resource: "pumble",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pumble integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    pushover: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/pushover",
        resource: "pushover",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pushover integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_key: "string",
            user_key: "string",
            priority: "string",
            device: "string",
            sound: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_key:string,user_key:string,priority:string,device:string,sound:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    redmine: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/redmine",
        resource: "redmine",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Redmine integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    ewm: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/ewm",
        resource: "ewm",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Ewm integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    youtrack: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/youtrack",
        resource: "youtrack",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Youtrack integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    clickup: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/clickup",
        resource: "clickup",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Clickup integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    slack: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/slack",
        resource: "slack",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Slack integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            username: "string",
            channel: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            labels_to_be_notified: "string",
            labels_to_be_notified_behavior: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean",
            alert_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "microsoft-teams": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/microsoft-teams",
        resource: "microsoft-teams",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Microsoft Teams integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            branches_to_be_notified: "string",
            notify_only_broken_pipelines: "boolean",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    mattermost: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/mattermost",
        resource: "mattermost",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Mattermost integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            username: "string",
            channel: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            labels_to_be_notified: "string",
            labels_to_be_notified_behavior: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    teamcity: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/teamcity",
        resource: "teamcity",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Teamcity integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            teamcity_url: "string",
            build_type: "string",
            username: "string",
            password: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean",
            merge_requests_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{teamcity_url:string,build_type:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    telegram: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/telegram",
        resource: "telegram",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Telegram integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            room: "string",
            hostname: "string",
            thread: "number",
            branches_to_be_notified: "string",
            notify_only_broken_pipelines: "boolean",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,room:string,hostname:string,thread:number,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "unify-circuit": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/unify-circuit",
        resource: "unify-circuit",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Unify Circuit integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "webex-teams": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/webex-teams",
        resource: "webex-teams",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Webex Teams integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    zentao: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/zentao",
        resource: "zentao",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Zentao integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            api_token: "string",
            zentao_product_xid: "string",
            api_url: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,api_token:string,zentao_product_xid:string,api_url:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "squash-tm": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/squash-tm",
        resource: "squash-tm",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Squash Tm integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            token: "string",
            issues_events: "boolean",
            confidential_issues_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,token:string,issues_events:boolean,confidential_issues_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    github: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/github",
        resource: "github",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Github integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            repository_url: "string",
            static_context: "boolean",
            pipeline_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,repository_url:string,static_context:boolean,pipeline_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "git-guardian": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/git-guardian",
        resource: "git-guardian",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Git Guardian integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "google-cloud-platform-artifact-registry": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/google-cloud-platform-artifact-registry",
        resource: "google-cloud-platform-artifact-registry",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Google Cloud Platform Artifact Registry integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            artifact_registry_project_id: "string",
            artifact_registry_repositories: "string",
            artifact_registry_location: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{artifact_registry_project_id:string,artifact_registry_repositories:string,artifact_registry_location:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "google-cloud-platform-workload-identity-federation": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/google-cloud-platform-workload-identity-federation",
        resource: "google-cloud-platform-workload-identity-federation",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Google Cloud Platform Workload Identity Federation integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            workload_identity_federation_project_id: "string",
            workload_identity_federation_project_number: "string",
            workload_identity_pool_id: "string",
            workload_identity_pool_provider_id: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{workload_identity_federation_project_id:string,workload_identity_federation_project_number:string,workload_identity_pool_id:string,workload_identity_pool_provider_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "mock-ci": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/mock-ci",
        resource: "mock-ci",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Mock Ci integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            mock_service_url: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{mock_service_url:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "mock-monitoring": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/services/mock-monitoring",
        resource: "mock-monitoring",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Set Mock Monitoring integration for a project.",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/services/:slug",
      resource: "services",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "slug",
          type: "string"
        }
      ],
      headers: {},
      description: "Disable the integration for a project. Integration settings are preserved.",
      query: [],
      data: null,
      /** @param {{params:{id:string,slug:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/services/:slug",
      resource: "services",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "slug",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the integration settings for a project.",
      query: [],
      data: null,
      /** @param {{params:{id:string,slug:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean,properties:object}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    mattermost_slash_commands: {
      trigger: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/services/mattermost_slash_commands/trigger",
          resource: "trigger",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "Added in GitLab 8.13",
          query: [],
          data: {
            mode: "raw",
            raw: {
              token: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      }
    },
    slack_slash_commands: {
      trigger: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/services/slack_slash_commands/trigger",
          resource: "trigger",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "Added in GitLab 8.13",
          query: [],
          data: {
            mode: "raw",
            raw: {
              token: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      }
    }
  },
  integrations: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/integrations",
      resource: "integrations",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of all active project integrations.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean},{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}]},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    "apple-app-store": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/apple-app-store",
        resource: "apple-app-store",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Apple App Store integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            app_store_issuer_id: "string",
            app_store_key_id: "string",
            app_store_private_key_file_name: "string",
            app_store_private_key: "string",
            app_store_protected_refs: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{app_store_issuer_id:string,app_store_key_id:string,app_store_private_key_file_name:string,app_store_private_key:string,app_store_protected_refs:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    asana: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/asana",
        resource: "asana",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Asana integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_key: "string",
            restrict_to_branch: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_key:string,restrict_to_branch:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    assembla: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/assembla",
        resource: "assembla",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Assembla integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            subdomain: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,subdomain:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    bamboo: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/bamboo",
        resource: "bamboo",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Bamboo integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            bamboo_url: "string",
            build_key: "string",
            username: "string",
            password: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{bamboo_url:string,build_key:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    bugzilla: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/bugzilla",
        resource: "bugzilla",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Bugzilla integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    buildkite: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/buildkite",
        resource: "buildkite",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Buildkite integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            project_url: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,project_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    campfire: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/campfire",
        resource: "campfire",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Campfire integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            subdomain: "string",
            room: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,subdomain:string,room:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    confluence: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/confluence",
        resource: "confluence",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Confluence integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            confluence_url: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{confluence_url:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "custom-issue-tracker": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/custom-issue-tracker",
        resource: "custom-issue-tracker",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Custom Issue Tracker integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    datadog: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/datadog",
        resource: "datadog",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Datadog integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_key: "string",
            datadog_site: "string",
            api_url: "string",
            archive_trace_events: "boolean",
            datadog_service: "string",
            datadog_env: "string",
            datadog_tags: "string",
            pipeline_events: "boolean",
            build_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_key:string,datadog_site:string,api_url:string,archive_trace_events:boolean,datadog_service:string,datadog_env:string,datadog_tags:string,pipeline_events:boolean,build_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "diffblue-cover": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/diffblue-cover",
        resource: "diffblue-cover",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Diffblue Cover integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            diffblue_license_key: "string",
            diffblue_access_token_name: "string",
            diffblue_access_token_secret: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{diffblue_license_key:string,diffblue_access_token_name:string,diffblue_access_token_secret:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    discord: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/discord",
        resource: "discord",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Discord integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "drone-ci": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/drone-ci",
        resource: "drone-ci",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Drone Ci integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            drone_url: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,drone_url:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "emails-on-push": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/emails-on-push",
        resource: "emails-on-push",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Emails On Push integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            recipients: "string",
            disable_diffs: "boolean",
            send_from_committer_email: "boolean",
            branches_to_be_notified: "string",
            push_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{recipients:string,disable_diffs:boolean,send_from_committer_email:boolean,branches_to_be_notified:string,push_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "external-wiki": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/external-wiki",
        resource: "external-wiki",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set External Wiki integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            external_wiki_url: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{external_wiki_url:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "gitlab-slack-application": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/gitlab-slack-application",
        resource: "gitlab-slack-application",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Gitlab Slack Application integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            channel: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            labels_to_be_notified: "string",
            labels_to_be_notified_behavior: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean",
            alert_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "google-play": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/google-play",
        resource: "google-play",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Google Play integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            package_name: "string",
            service_account_key_file_name: "string",
            service_account_key: "string",
            google_play_protected_refs: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{package_name:string,service_account_key_file_name:string,service_account_key:string,google_play_protected_refs:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "hangouts-chat": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/hangouts-chat",
        resource: "hangouts-chat",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Hangouts Chat integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            branches_to_be_notified: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    harbor: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/harbor",
        resource: "harbor",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Harbor integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            project_name: "string",
            username: "string",
            password: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,project_name:string,username:string,password:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    irker: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/irker",
        resource: "irker",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Irker integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            recipients: "string",
            default_irc_uri: "string",
            server_host: "string",
            server_port: "number",
            colorize_messages: "boolean",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{recipients:string,default_irc_uri:string,server_host:string,server_port:number,colorize_messages:boolean,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    jenkins: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/jenkins",
        resource: "jenkins",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Jenkins integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            jenkins_url: "string",
            project_name: "string",
            enable_ssl_verification: "boolean",
            username: "string",
            password: "string",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{jenkins_url:string,project_name:string,enable_ssl_verification:boolean,username:string,password:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    jira: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/jira",
        resource: "jira",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Jira integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            password: "string",
            api_url: "string",
            jira_auth_type: "number",
            username: "string",
            jira_issue_transition_automatic: "boolean",
            jira_issue_transition_id: "string",
            jira_issue_prefix: "string",
            jira_issue_regex: "string",
            issues_enabled: "boolean",
            project_keys: [
              "string",
              "string"
            ],
            comment_on_event_enabled: "boolean",
            commit_events: "boolean",
            merge_requests_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,password:string,api_url:string,jira_auth_type:number,username:string,jira_issue_transition_automatic:boolean,jira_issue_transition_id:string,jira_issue_prefix:string,jira_issue_regex:string,issues_enabled:boolean,project_keys:[string,string],comment_on_event_enabled:boolean,commit_events:boolean,merge_requests_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "mattermost-slash-commands": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/mattermost-slash-commands",
        resource: "mattermost-slash-commands",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Mattermost Slash Commands integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "slack-slash-commands": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/slack-slash-commands",
        resource: "slack-slash-commands",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Slack Slash Commands integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    packagist: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/packagist",
        resource: "packagist",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Packagist integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            username: "string",
            token: "string",
            server: "string",
            push_events: "boolean",
            merge_requests_events: "boolean",
            tag_push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{username:string,token:string,server:string,push_events:boolean,merge_requests_events:boolean,tag_push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    phorge: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/phorge",
        resource: "phorge",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Phorge integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "pipelines-email": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/pipelines-email",
        resource: "pipelines-email",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pipelines Email integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            recipients: "string",
            notify_only_broken_pipelines: "boolean",
            notify_only_default_branch: "boolean",
            branches_to_be_notified: "string",
            pipeline_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{recipients:string,notify_only_broken_pipelines:boolean,notify_only_default_branch:boolean,branches_to_be_notified:string,pipeline_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    pivotaltracker: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/pivotaltracker",
        resource: "pivotaltracker",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pivotaltracker integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            restrict_to_branch: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,restrict_to_branch:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    prometheus: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/prometheus",
        resource: "prometheus",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Prometheus integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_url: "string",
            google_iap_audience_client_id: "string",
            google_iap_service_account_json: "string",
            manual_configuration: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_url:string,google_iap_audience_client_id:string,google_iap_service_account_json:string,manual_configuration:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    pumble: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/pumble",
        resource: "pumble",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pumble integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    pushover: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/pushover",
        resource: "pushover",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Pushover integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            api_key: "string",
            user_key: "string",
            priority: "string",
            device: "string",
            sound: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{api_key:string,user_key:string,priority:string,device:string,sound:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    redmine: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/redmine",
        resource: "redmine",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Redmine integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    ewm: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/ewm",
        resource: "ewm",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Ewm integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            new_issue_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,new_issue_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    youtrack: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/youtrack",
        resource: "youtrack",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Youtrack integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    clickup: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/clickup",
        resource: "clickup",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Clickup integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            project_url: "string",
            issues_url: "string",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{project_url:string,issues_url:string,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    slack: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/slack",
        resource: "slack",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Slack integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            username: "string",
            channel: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            labels_to_be_notified: "string",
            labels_to_be_notified_behavior: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean",
            alert_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean,alert_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "microsoft-teams": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/microsoft-teams",
        resource: "microsoft-teams",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Microsoft Teams integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            branches_to_be_notified: "string",
            notify_only_broken_pipelines: "boolean",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    mattermost: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/mattermost",
        resource: "mattermost",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Mattermost integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            username: "string",
            channel: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            labels_to_be_notified: "string",
            labels_to_be_notified_behavior: "string",
            push_channel: "string",
            issue_channel: "string",
            incident_channel: "string",
            alert_channel: "string",
            confidential_issue_channel: "string",
            merge_request_channel: "string",
            note_channel: "string",
            confidential_note_channel: "string",
            tag_push_channel: "string",
            deployment_channel: "string",
            pipeline_channel: "string",
            wiki_page_channel: "string",
            vulnerability_channel: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            deployment_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,username:string,channel:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,labels_to_be_notified:string,labels_to_be_notified_behavior:string,push_channel:string,issue_channel:string,incident_channel:string,alert_channel:string,confidential_issue_channel:string,merge_request_channel:string,note_channel:string,confidential_note_channel:string,tag_push_channel:string,deployment_channel:string,pipeline_channel:string,wiki_page_channel:string,vulnerability_channel:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    teamcity: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/teamcity",
        resource: "teamcity",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Teamcity integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            teamcity_url: "string",
            build_type: "string",
            username: "string",
            password: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean",
            merge_requests_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{teamcity_url:string,build_type:string,username:string,password:string,enable_ssl_verification:boolean,push_events:boolean,merge_requests_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    telegram: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/telegram",
        resource: "telegram",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Telegram integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            room: "string",
            hostname: "string",
            thread: "number",
            branches_to_be_notified: "string",
            notify_only_broken_pipelines: "boolean",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean",
            incident_events: "boolean",
            vulnerability_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,room:string,hostname:string,thread:number,branches_to_be_notified:string,notify_only_broken_pipelines:boolean,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,incident_events:boolean,vulnerability_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "unify-circuit": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/unify-circuit",
        resource: "unify-circuit",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Unify Circuit integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "webex-teams": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/webex-teams",
        resource: "webex-teams",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Webex Teams integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            webhook: "string",
            notify_only_broken_pipelines: "boolean",
            branches_to_be_notified: "string",
            push_events: "boolean",
            issues_events: "boolean",
            confidential_issues_events: "boolean",
            merge_requests_events: "boolean",
            note_events: "boolean",
            confidential_note_events: "boolean",
            tag_push_events: "boolean",
            pipeline_events: "boolean",
            wiki_page_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{webhook:string,notify_only_broken_pipelines:boolean,branches_to_be_notified:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,note_events:boolean,confidential_note_events:boolean,tag_push_events:boolean,pipeline_events:boolean,wiki_page_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    zentao: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/zentao",
        resource: "zentao",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Zentao integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            api_token: "string",
            zentao_product_xid: "string",
            api_url: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,api_token:string,zentao_product_xid:string,api_url:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "squash-tm": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/squash-tm",
        resource: "squash-tm",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Squash Tm integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            url: "string",
            token: "string",
            issues_events: "boolean",
            confidential_issues_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{url:string,token:string,issues_events:boolean,confidential_issues_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    github: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/github",
        resource: "github",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Github integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string",
            repository_url: "string",
            static_context: "boolean",
            pipeline_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string,repository_url:string,static_context:boolean,pipeline_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "git-guardian": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/git-guardian",
        resource: "git-guardian",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Git Guardian integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            token: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "google-cloud-platform-artifact-registry": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/google-cloud-platform-artifact-registry",
        resource: "google-cloud-platform-artifact-registry",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Google Cloud Platform Artifact Registry integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            artifact_registry_project_id: "string",
            artifact_registry_repositories: "string",
            artifact_registry_location: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{artifact_registry_project_id:string,artifact_registry_repositories:string,artifact_registry_location:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "google-cloud-platform-workload-identity-federation": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/google-cloud-platform-workload-identity-federation",
        resource: "google-cloud-platform-workload-identity-federation",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Google Cloud Platform Workload Identity Federation integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            workload_identity_federation_project_id: "string",
            workload_identity_federation_project_number: "string",
            workload_identity_pool_id: "string",
            workload_identity_pool_provider_id: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{workload_identity_federation_project_id:string,workload_identity_federation_project_number:string,workload_identity_pool_id:string,workload_identity_pool_provider_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "mock-ci": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/mock-ci",
        resource: "mock-ci",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Set Mock Ci integration for a project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            mock_service_url: "string",
            enable_ssl_verification: "boolean",
            push_events: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{mock_service_url:string,enable_ssl_verification:boolean,push_events:boolean},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    },
    "mock-monitoring": {
      put: {
        method: "put",
        url: "api/v4/projects/:id/integrations/mock-monitoring",
        resource: "mock-monitoring",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Set Mock Monitoring integration for a project.",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean}},{code:400},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/integrations/:slug",
      resource: "integrations",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "slug",
          type: "string"
        }
      ],
      headers: {},
      description: "Disable the integration for a project. Integration settings are preserved.",
      query: [],
      data: null,
      /** @param {{params:{id:string,slug:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/integrations/:slug",
      resource: "integrations",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "slug",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the integration settings for a project.",
      query: [],
      data: null,
      /** @param {{params:{id:string,slug:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,slug:number,created_at:dateTime,updated_at:dateTime,active:boolean,commit_events:boolean,push_events:boolean,issues_events:boolean,incident_events:boolean,alert_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,deployment_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,job_events:boolean,comment_on_event_enabled:boolean,vulnerability_events:boolean,properties:object}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    mattermost_slash_commands: {
      trigger: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/integrations/mattermost_slash_commands/trigger",
          resource: "trigger",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "Added in GitLab 8.13",
          query: [],
          data: {
            mode: "raw",
            raw: {
              token: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      }
    },
    slack_slash_commands: {
      trigger: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/integrations/slack_slash_commands/trigger",
          resource: "trigger",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "Added in GitLab 8.13",
          query: [],
          data: {
            mode: "raw",
            raw: {
              token: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string},data:{token:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      }
    }
  },
  invitations: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/invitations",
      resource: "invitations",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.6",
      query: [],
      data: {
        mode: "raw",
        raw: {
          access_level: "number",
          email: [
            "string",
            "string"
          ],
          user_id: [
            "string",
            "string"
          ],
          expires_at: "dateTime",
          invite_source: "invitations-api"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{access_level:number,email:[string,string],user_id:[string,string],expires_at:dateTime,invite_source:invitations-api},clientOptions:{}}} requestOptions * @return {[{code:201,data:{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    get: {
      method: "get",
      url: "api/v4/projects/:id/invitations",
      resource: "invitations",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.6",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "query",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,query:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string},{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/invitations/:email",
      resource: "invitations",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "email",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates a group or project invitation.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          access_level: "number",
          expires_at: "dateTime"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,email:string},data:{access_level:number,expires_at:dateTime},clientOptions:{}}} requestOptions * @return {[{code:200,data:{access_level:string,created_at:string,expires_at:string,invite_email:string,invite_token:string,user_name:string,created_by_name:string}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/invitations/:email",
      resource: "invitations",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "email",
          type: "string"
        }
      ],
      headers: {},
      description: "Removes an invitation from a group or project.",
      query: [],
      data: null,
      /** @param {{params:{id:string,email:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404},{code:409}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  issues: {
    links: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/issues/:issue_iid/links",
        resource: "links",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "issue_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of a given issue’s linked issues, sorted by the relationship creation datetime (ascending).Issues are filtered according to the user authorizations.",
        query: [],
        data: null,
        /** @param {{params:{id:string,issue_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string,has_tasks:string,task_status:string,_links:{self:string,notes:string,award_emoji:string,project:string,closed_as_duplicate_of:string},references:{short:{value:{}},relative:{value:{}},full:{value:{}}},severity:string,subscribed:string,moved_to_id:string,imported:string,imported_from:string,service_desk_reply_to:string,epic_iid:string,epic:{id:{value:{}},iid:{value:{}},title:{value:{}},url:{value:{}},group_id:{value:{}},human_readable_end_date:{value:{}},human_readable_timestamp:{value:{}}},iteration:{id:{value:{}},iid:{value:{}},sequence:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},start_date:{value:{}},due_date:{value:{}},web_url:{value:{}}},health_status:string,issue_link_id:string,link_type:string,link_created_at:string,link_updated_at:string},{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string,has_tasks:string,task_status:string,_links:{self:string,notes:string,award_emoji:string,project:string,closed_as_duplicate_of:string},references:{short:{value:{}},relative:{value:{}},full:{value:{}}},severity:string,subscribed:string,moved_to_id:string,imported:string,imported_from:string,service_desk_reply_to:string,epic_iid:string,epic:{id:{value:{}},iid:{value:{}},title:{value:{}},url:{value:{}},group_id:{value:{}},human_readable_end_date:{value:{}},human_readable_timestamp:{value:{}}},iteration:{id:{value:{}},iid:{value:{}},sequence:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},start_date:{value:{}},due_date:{value:{}},web_url:{value:{}}},health_status:string,issue_link_id:string,link_type:string,link_created_at:string,link_updated_at:string}]},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/issues/:issue_iid/links",
        resource: "links",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "issue_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Creates a two-way relation between two issues.The user must be allowed to update both issues to succeed.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            target_project_id: "string",
            target_issue_iid: "string",
            link_type: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,issue_iid:string},data:{target_project_id:string,target_issue_iid:string,link_type:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}},{code:400},{code:401}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/issues/:issue_iid/links/:issue_link_id",
        resource: "links",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "issue_iid",
            type: "string"
          },
          {
            name: "issue_link_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Gets details about an issue link. This feature was introduced in GitLab 15.1.",
        query: [],
        data: null,
        /** @param {{params:{id:string,issue_iid:string,issue_link_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/issues/:issue_iid/links/:issue_link_id",
        resource: "links",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "issue_iid",
            type: "string"
          },
          {
            name: "issue_link_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Deletes an issue link, thus removes the two-way relationship.",
        query: [],
        data: null,
        /** @param {{params:{id:string,issue_iid:string,issue_link_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{source_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},target_issue:{id:number,iid:number,project_id:number,title:string,description:string,state:string,created_at:dateTime,updated_at:dateTime,closed_at:dateTime,closed_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},labels:[string,string],milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},assignees:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},type:string,assignee:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},user_notes_count:string,merge_requests_count:string,upvotes:string,downvotes:string,due_date:date,confidential:boolean,discussion_locked:boolean,issue_type:string,web_url:string,time_stats:{time_estimate:{value:{}},total_time_spent:{value:{}},human_time_estimate:{value:{}},human_total_time_spent:{value:{}}},task_completion_status:string,weight:string,blocking_issues_count:string},link_type:string}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    resource_milestone_events: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/issues/:eventable_id/resource_milestone_events",
        resource: "resource_milestone_events",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "eventable_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Gets a list of all milestone events for a single Issue",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,eventable_id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string},{id:number,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime,resource_type:string,resource_id:number,milestone:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}}},action:string,state:string}]}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/issues/:eventable_id/resource_milestone_events/:event_id",
        resource: "resource_milestone_events",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "event_id",
            type: "string"
          },
          {
            name: "eventable_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Returns a single milestone event for a specific project Issue",
        query: [],
        data: null,
        /** @param {{params:{id:string,event_id:string,eventable_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime,resource_type:string,resource_id:number,milestone:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string},action:string,state:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  ci: {
    lint: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/ci/lint",
        resource: "lint",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Checks if a project’s .gitlab-ci.yml configuration in a given commit (by default HEAD of the\n        project’s default branch) is valid",
        query: [
          {
            name: "sha",
            type: "string"
          },
          {
            name: "content_ref",
            type: "string"
          },
          {
            name: "dry_run",
            type: "string"
          },
          {
            name: "include_jobs",
            type: "string"
          },
          {
            name: "ref",
            type: "string"
          },
          {
            name: "dry_run_ref",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{sha:string,content_ref:string,dry_run:string,include_jobs:string,ref:string,dry_run_ref:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{valid:boolean,errors:[string,string],warnings:[string,string],merged_yaml:string,includes:[object,object],jobs:[object,object]}},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/ci/lint",
        resource: "lint",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Checks if CI/CD YAML configuration is valid. This endpoint has namespace specific context",
        query: [],
        data: {
          mode: "raw",
          raw: {
            content: "string",
            dry_run: false,
            include_jobs: "boolean",
            ref: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{content:string,dry_run:false,include_jobs:boolean,ref:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{valid:boolean,errors:[string,string],warnings:[string,string],merged_yaml:string,includes:[object,object],jobs:[object,object]}}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  packages: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/packages",
      resource: "packages",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.8",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "order_by",
          type: "string"
        },
        {
          name: "sort",
          type: "string"
        },
        {
          name: "package_type",
          type: "string"
        },
        {
          name: "package_name",
          type: "string"
        },
        {
          name: "package_version",
          type: "string"
        },
        {
          name: "include_versionless",
          type: "string"
        },
        {
          name: "status",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string,package_type:string,package_name:string,package_version:string,include_versionless:string,status:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:dateTime,last_downloaded_at:dateTime,project_id:number,project_path:string,tags:string,pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},versions:{id:{value:{}},version:{value:{}},created_at:{value:{}},tags:{value:{}},pipeline:{value:{}}}},{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:dateTime,last_downloaded_at:dateTime,project_id:number,project_path:string,tags:string,pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}},versions:{id:{value:{}},version:{value:{}},created_at:{value:{}},tags:{value:{}},pipeline:{value:{}}}}]},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    maven: {
      "*path": {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/maven/*path/:file_name",
          resource: "*path",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "file_name",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 11.3",
          query: [
            {
              name: "path",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,file_name:string},query:{path:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:302},{code:401},{code:403},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        },
        put: {
          method: "put",
          url: "api/v4/projects/:id/packages/maven/*path/:file_name",
          resource: "*path",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "file_name",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "This feature was introduced in GitLab 11.3",
          query: [],
          data: {
            mode: "raw",
            raw: {
              path: "string",
              file: "binary"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,file_name:string},data:{path:string,file:binary},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404},{code:422}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        },
        authorize: {
          put: {
            method: "put",
            url: "api/v4/projects/:id/packages/maven/*path/:file_name/authorize",
            resource: "authorize",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "file_name",
                type: "string"
              }
            ],
            headers: {
              "Content-Type": "application/json"
            },
            description: "This feature was introduced in GitLab 11.3",
            query: [],
            data: {
              mode: "raw",
              raw: {
                path: "string"
              },
              options: {
                raw: {
                  language: "json"
                }
              }
            },
            /** @param {{params:{id:string,file_name:string},data:{path:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
            send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
          }
        }
      }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/packages/:package_id",
      resource: "packages",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "package_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.9",
      query: [],
      data: null,
      /** @param {{params:{id:string,package_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,conan_package_name:string,version:string,package_type:string,status:string,_links:{web_path:string,delete_api_path:string},created_at:dateTime,last_downloaded_at:dateTime,project_id:number,project_path:string,tags:string,pipeline:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},pipelines:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}}},versions:{id:string,version:string,created_at:string,tags:string,pipeline:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}}}}},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/packages/:package_id",
      resource: "packages",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "package_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 11.9",
      query: [],
      data: null,
      /** @param {{params:{id:string,package_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    package_files: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/packages/:package_id/package_files",
        resource: "package_files",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "package_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a list of package files of a single package",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,package_id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,package_id:number,created_at:dateTime,file_name:string,size:number,file_md5:string,file_sha1:string,file_sha256:string,pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}}},{id:number,package_id:number,created_at:dateTime,file_name:string,size:number,file_md5:string,file_sha1:string,file_sha256:string,pipelines:{id:{value:{}},iid:{value:{}},project_id:{value:{}},sha:{value:{}},ref:{value:{}},status:{value:{}},source:{value:{}},created_at:{value:{}},updated_at:{value:{}},web_url:{value:{}},user:{value:{}}}}]}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/packages/:package_id/package_files/:package_file_id",
        resource: "package_files",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "package_id",
            type: "string"
          },
          {
            name: "package_file_id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 13.12",
        query: [],
        data: null,
        /** @param {{params:{id:string,package_id:string,package_file_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    pipelines: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/packages/:package_id/pipelines",
        resource: "pipelines",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "package_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 16.1",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          },
          {
            name: "cursor",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,package_id:string},query:{page:string,per_page:string,cursor:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,project_id:number,sha:string,ref:string,status:string,source:string,created_at:dateTime,updated_at:dateTime,web_url:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    composer: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/packages/composer",
        resource: "composer",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "This feature was introduced in GitLab 13.1",
        query: [],
        data: {
          mode: "raw",
          raw: {
            branch: "string",
            tag: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{branch:string,tag:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      archives: {
        "*package_name": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/composer/archives/*package_name",
            resource: "*package_name",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 13.1",
            query: [
              {
                name: "sha",
                type: "string"
              },
              {
                name: "package_name",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string},query:{sha:string,package_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      }
    },
    conan: {
      v1: {
        ping: {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/conan/v1/ping",
            resource: "ping",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 12.2",
            query: [],
            data: null,
            /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:404}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          }
        },
        conans: {
          search: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/conans/search",
              resource: "search",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 12.4",
              query: [
                {
                  name: "q",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{q:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel",
            resource: "conans",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "package_name",
                type: "string"
              },
              {
                name: "package_version",
                type: "string"
              },
              {
                name: "package_username",
                type: "string"
              },
              {
                name: "package_channel",
                type: "string"
              }
            ],
            headers: {
              Accept: "application/json"
            },
            description: "This feature was introduced in GitLab 12.5",
            query: [],
            data: null,
            /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{recipe_snapshot:object}},{code:400},{code:403},{code:404}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          },
          delete: {
            method: "delete",
            url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel",
            resource: "conans",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "package_name",
                type: "string"
              },
              {
                name: "package_version",
                type: "string"
              },
              {
                name: "package_username",
                type: "string"
              },
              {
                name: "package_channel",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 12.5",
            query: [],
            data: null,
            /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:403},{code:404}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          },
          packages: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference",
              resource: "packages",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                },
                {
                  name: "conan_package_reference",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "This feature was introduced in GitLab 12.5",
              query: [],
              data: null,
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{package_snapshot:object}},{code:400},{code:403},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            },
            digest: {
              get: {
                method: "get",
                url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/digest",
                resource: "digest",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "package_name",
                    type: "string"
                  },
                  {
                    name: "package_version",
                    type: "string"
                  },
                  {
                    name: "package_username",
                    type: "string"
                  },
                  {
                    name: "package_channel",
                    type: "string"
                  },
                  {
                    name: "conan_package_reference",
                    type: "string"
                  }
                ],
                headers: {
                  Accept: "application/json"
                },
                description: "This feature was introduced in GitLab 12.5",
                query: [],
                data: null,
                /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{package_urls:object}},{code:400},{code:403},{code:404}]} */
                send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
              }
            },
            download_urls: {
              get: {
                method: "get",
                url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/download_urls",
                resource: "download_urls",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "package_name",
                    type: "string"
                  },
                  {
                    name: "package_version",
                    type: "string"
                  },
                  {
                    name: "package_username",
                    type: "string"
                  },
                  {
                    name: "package_channel",
                    type: "string"
                  },
                  {
                    name: "conan_package_reference",
                    type: "string"
                  }
                ],
                headers: {
                  Accept: "application/json"
                },
                description: "This feature was introduced in GitLab 12.5",
                query: [],
                data: null,
                /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{package_urls:object}},{code:400},{code:403},{code:404}]} */
                send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
              }
            },
            upload_urls: {
              post: {
                method: "post",
                url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/packages/:conan_package_reference/upload_urls",
                resource: "upload_urls",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "package_name",
                    type: "string"
                  },
                  {
                    name: "package_version",
                    type: "string"
                  },
                  {
                    name: "package_username",
                    type: "string"
                  },
                  {
                    name: "package_channel",
                    type: "string"
                  },
                  {
                    name: "conan_package_reference",
                    type: "string"
                  }
                ],
                headers: {
                  Accept: "application/json"
                },
                description: "This feature was introduced in GitLab 12.4",
                query: [],
                data: null,
                /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,conan_package_reference:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{upload_urls:object}},{code:400},{code:403},{code:404}]} */
                send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
              }
            }
          },
          digest: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/digest",
              resource: "digest",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "This feature was introduced in GitLab 12.5",
              query: [],
              data: null,
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{recipe_urls:object}},{code:400},{code:403},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            }
          },
          download_urls: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/download_urls",
              resource: "download_urls",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "This feature was introduced in GitLab 12.5",
              query: [],
              data: null,
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{recipe_urls:object}},{code:400},{code:403},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            }
          },
          upload_urls: {
            post: {
              method: "post",
              url: "api/v4/projects/:id/packages/conan/v1/conans/:package_name/:package_version/:package_username/:package_channel/upload_urls",
              resource: "upload_urls",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "This feature was introduced in GitLab 12.4",
              query: [],
              data: null,
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{upload_urls:object}},{code:400},{code:403},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            }
          }
        },
        users: {
          authenticate: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/users/authenticate",
              resource: "authenticate",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 12.2",
              query: [],
              data: null,
              /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            }
          },
          check_credentials: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/users/check_credentials",
              resource: "check_credentials",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 12.4",
              query: [],
              data: null,
              /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            }
          }
        },
        files: {
          export: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name",
              resource: "export",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                },
                {
                  name: "recipe_revision",
                  type: "string"
                },
                {
                  name: "file_name",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 12.6",
              query: [],
              data: null,
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:403},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            },
            put: {
              method: "put",
              url: "api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name",
              resource: "export",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                },
                {
                  name: "recipe_revision",
                  type: "string"
                },
                {
                  name: "file_name",
                  type: "string"
                }
              ],
              headers: {
                "Content-Type": "application/json"
              },
              description: "This feature was introduced in GitLab 12.6",
              query: [],
              data: {
                mode: "raw",
                raw: {
                  file: "binary"
                },
                options: {
                  raw: {
                    language: "json"
                  }
                }
              },
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string},data:{file:binary},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
              send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
            },
            authorize: {
              put: {
                method: "put",
                url: "api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/export/:file_name/authorize",
                resource: "authorize",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "package_name",
                    type: "string"
                  },
                  {
                    name: "package_version",
                    type: "string"
                  },
                  {
                    name: "package_username",
                    type: "string"
                  },
                  {
                    name: "package_channel",
                    type: "string"
                  },
                  {
                    name: "recipe_revision",
                    type: "string"
                  },
                  {
                    name: "file_name",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 12.6",
                query: [],
                data: null,
                /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
                send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
              }
            }
          },
          package: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name",
              resource: "package",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                },
                {
                  name: "recipe_revision",
                  type: "string"
                },
                {
                  name: "conan_package_reference",
                  type: "string"
                },
                {
                  name: "package_revision",
                  type: "string"
                },
                {
                  name: "file_name",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 12.5",
              query: [],
              data: null,
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            },
            put: {
              method: "put",
              url: "api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name",
              resource: "package",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "package_username",
                  type: "string"
                },
                {
                  name: "package_channel",
                  type: "string"
                },
                {
                  name: "recipe_revision",
                  type: "string"
                },
                {
                  name: "conan_package_reference",
                  type: "string"
                },
                {
                  name: "package_revision",
                  type: "string"
                },
                {
                  name: "file_name",
                  type: "string"
                }
              ],
              headers: {
                "Content-Type": "application/json"
              },
              description: "This feature was introduced in GitLab 12.6",
              query: [],
              data: {
                mode: "raw",
                raw: {
                  file: "binary"
                },
                options: {
                  raw: {
                    language: "json"
                  }
                }
              },
              /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string},data:{file:binary},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
              send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
            },
            authorize: {
              put: {
                method: "put",
                url: "api/v4/projects/:id/packages/conan/v1/files/:package_name/:package_version/:package_username/:package_channel/:recipe_revision/package/:conan_package_reference/:package_revision/:file_name/authorize",
                resource: "authorize",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "package_name",
                    type: "string"
                  },
                  {
                    name: "package_version",
                    type: "string"
                  },
                  {
                    name: "package_username",
                    type: "string"
                  },
                  {
                    name: "package_channel",
                    type: "string"
                  },
                  {
                    name: "recipe_revision",
                    type: "string"
                  },
                  {
                    name: "conan_package_reference",
                    type: "string"
                  },
                  {
                    name: "package_revision",
                    type: "string"
                  },
                  {
                    name: "file_name",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 12.6",
                query: [],
                data: null,
                /** @param {{params:{id:string,package_name:string,package_version:string,package_username:string,package_channel:string,recipe_revision:string,conan_package_reference:string,package_revision:string,file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
                send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
              }
            }
          }
        }
      }
    },
    debian: {
      dists: {
        "*distribution": {
          "Release.gpg": {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/debian/dists/*distribution/Release.gpg",
              resource: "Release.gpg",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 13.5",
              query: [
                {
                  name: "distribution",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          Release: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/debian/dists/*distribution/Release",
              resource: "Release",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 13.5",
              query: [
                {
                  name: "distribution",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          InRelease: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/debian/dists/*distribution/InRelease",
              resource: "InRelease",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 13.5",
              query: [
                {
                  name: "distribution",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          "debian-installer": {
            "binary-{{architecture}}": {
              Packages: {
                get: {
                  method: "get",
                  url: "api/v4/projects/:id/packages/debian/dists/*distribution/:component/debian-installer/binary-{{architecture}}/Packages",
                  resource: "Packages",
                  variable: [
                    {
                      name: "id",
                      type: "string"
                    },
                    {
                      name: "component",
                      type: "string"
                    }
                  ],
                  headers: {},
                  description: "This feature was introduced in GitLab 15.4",
                  query: [
                    {
                      name: "distribution",
                      type: "string"
                    }
                  ],
                  data: null,
                  /** @param {{params:{id:string,component:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]} */
                  send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
                }
              },
              "by-hash": {
                SHA256: {
                  get: {
                    method: "get",
                    url: "api/v4/projects/:id/packages/debian/dists/*distribution/:component/debian-installer/binary-{{architecture}}/by-hash/SHA256/:file_sha256",
                    resource: "SHA256",
                    variable: [
                      {
                        name: "id",
                        type: "string"
                      },
                      {
                        name: "component",
                        type: "string"
                      },
                      {
                        name: "file_sha256",
                        type: "string"
                      }
                    ],
                    headers: {},
                    description: "This feature was introduced in GitLab 15.4",
                    query: [
                      {
                        name: "distribution",
                        type: "string"
                      }
                    ],
                    data: null,
                    /** @param {{params:{id:string,component:string,file_sha256:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]} */
                    send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
                  }
                }
              }
            }
          },
          source: {
            Sources: {
              get: {
                method: "get",
                url: "api/v4/projects/:id/packages/debian/dists/*distribution/:component/source/Sources",
                resource: "Sources",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "component",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 15.4",
                query: [
                  {
                    name: "distribution",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{id:string,component:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            },
            "by-hash": {
              SHA256: {
                get: {
                  method: "get",
                  url: "api/v4/projects/:id/packages/debian/dists/*distribution/:component/source/by-hash/SHA256/:file_sha256",
                  resource: "SHA256",
                  variable: [
                    {
                      name: "id",
                      type: "string"
                    },
                    {
                      name: "component",
                      type: "string"
                    },
                    {
                      name: "file_sha256",
                      type: "string"
                    }
                  ],
                  headers: {},
                  description: "This feature was introduced in GitLab 15.4",
                  query: [
                    {
                      name: "distribution",
                      type: "string"
                    }
                  ],
                  data: null,
                  /** @param {{params:{id:string,component:string,file_sha256:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]} */
                  send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
                }
              }
            }
          },
          "binary-{{architecture}}": {
            Packages: {
              get: {
                method: "get",
                url: "api/v4/projects/:id/packages/debian/dists/*distribution/:component/binary-{{architecture}}/Packages",
                resource: "Packages",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "component",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 13.5",
                query: [
                  {
                    name: "distribution",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{id:string,component:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            },
            "by-hash": {
              SHA256: {
                get: {
                  method: "get",
                  url: "api/v4/projects/:id/packages/debian/dists/*distribution/:component/binary-{{architecture}}/by-hash/SHA256/:file_sha256",
                  resource: "SHA256",
                  variable: [
                    {
                      name: "id",
                      type: "string"
                    },
                    {
                      name: "component",
                      type: "string"
                    },
                    {
                      name: "file_sha256",
                      type: "string"
                    }
                  ],
                  headers: {},
                  description: "This feature was introduced in GitLab 15.4",
                  query: [
                    {
                      name: "distribution",
                      type: "string"
                    }
                  ],
                  data: null,
                  /** @param {{params:{id:string,component:string,file_sha256:string},query:{distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:202},{code:400},{code:401},{code:403},{code:404}]} */
                  send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
                }
              }
            }
          }
        }
      },
      pool: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/debian/pool/:distribution/:letter/:package_name/:package_version/:file_name",
          resource: "pool",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "distribution",
              type: "string"
            },
            {
              name: "letter",
              type: "string"
            },
            {
              name: "package_name",
              type: "string"
            },
            {
              name: "package_version",
              type: "string"
            },
            {
              name: "file_name",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 14.2",
          query: [],
          data: null,
          /** @param {{params:{id:string,distribution:string,letter:string,package_name:string,package_version:string,file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/packages/debian/:file_name",
        resource: "debian",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "file_name",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "This feature was introduced in GitLab 14.0",
        query: [],
        data: {
          mode: "raw",
          raw: {
            file: "binary",
            component: "string",
            distribution: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,file_name:string},data:{file:binary,component:string,distribution:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      authorize: {
        put: {
          method: "put",
          url: "api/v4/projects/:id/packages/debian/:file_name/authorize",
          resource: "authorize",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "file_name",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "This feature was introduced in GitLab 13.5",
          query: [],
          data: {
            mode: "raw",
            raw: {
              component: "string",
              distribution: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,file_name:string},data:{component:string,distribution:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        }
      }
    },
    generic: {
      "*package_version": {
        "(*path": {
          "){{file_name}}": {
            put: {
              method: "put",
              url: "api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}",
              resource: "){{file_name}}",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                }
              ],
              headers: {
                "Content-Type": "application/json"
              },
              description: "This feature was introduced in GitLab 13.5",
              query: [],
              data: {
                mode: "raw",
                raw: {
                  package_version: "string",
                  file: "binary",
                  path: "string",
                  status: "string",
                  select: "string"
                },
                options: {
                  raw: {
                    language: "json"
                  }
                }
              },
              /** @param {{params:{id:string,package_name:string},data:{package_version:string,file:binary,path:string,status:string,select:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:201},{code:400},{code:401},{code:403},{code:404}]} */
              send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
            },
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}",
              resource: "){{file_name}}",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "package_name",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 13.5",
              query: [
                {
                  name: "package_version",
                  type: "string"
                },
                {
                  name: "path",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string,package_name:string},query:{package_version:string,path:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            },
            authorize: {
              put: {
                method: "put",
                url: "api/v4/projects/:id/packages/generic/:package_name/*package_version/(*path/){{file_name}}/authorize",
                resource: "authorize",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "package_name",
                    type: "string"
                  }
                ],
                headers: {
                  "Content-Type": "application/json"
                },
                description: "This feature was introduced in GitLab 13.5",
                query: [],
                data: {
                  mode: "raw",
                  raw: {
                    package_version: "string",
                    path: "number",
                    status: "string"
                  },
                  options: {
                    raw: {
                      language: "json"
                    }
                  }
                },
                /** @param {{params:{id:string,package_name:string},data:{package_version:string,path:number,status:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
                send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
              }
            }
          }
        }
      }
    },
    go: {
      "*module_name": {
        "@v": {
          list: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/go/*module_name/@v/list",
              resource: "list",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "Get all tagged versions for a given Go module.See `go help goproxy`, GET $GOPROXY/<module>/@v/list. This feature was introduced in GitLab 13.1.",
              query: [
                {
                  name: "module_name",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{module_name:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          "{{module_version}}.info": {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/go/*module_name/@v/{{module_version}}.info",
              resource: "{{module_version}}.info",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "Get all tagged versions for a given Go module.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.info. This feature was introduced in GitLab 13.1",
              query: [
                {
                  name: "module_name",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{module_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{Version:string,Time:string}}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          "{{module_version}}.mod": {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/go/*module_name/@v/{{module_version}}.mod",
              resource: "{{module_version}}.mod",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "Get the module file of a given module version.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.mod. This feature was introduced in GitLab 13.1.",
              query: [
                {
                  name: "module_name",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{module_name:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          "{{module_version}}.zip": {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/go/*module_name/@v/{{module_version}}.zip",
              resource: "{{module_version}}.zip",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "Get a zip of the source of the given module version.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.zip. This feature was introduced in GitLab 13.1.",
              query: [
                {
                  name: "module_name",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{module_name:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          }
        }
      }
    },
    helm: {
      "index.yaml": {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/helm/:channel/index.yaml",
          resource: "index.yaml",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "channel",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 14.0",
          query: [],
          data: null,
          /** @param {{params:{id:string,channel:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      charts: {
        "{{file_name}}.tgz": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/helm/:channel/charts/{{file_name}}.tgz",
            resource: "{{file_name}}.tgz",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "channel",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 14.0",
            query: [],
            data: null,
            /** @param {{params:{id:string,channel:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          }
        }
      },
      api: {
        charts: {
          post: {
            method: "post",
            url: "api/v4/projects/:id/packages/helm/api/:channel/charts",
            resource: "charts",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "channel",
                type: "string"
              }
            ],
            headers: {
              "Content-Type": "application/json"
            },
            description: "This feature was introduced in GitLab 14.0",
            query: [],
            data: {
              mode: "raw",
              raw: {
                chart: "binary"
              },
              options: {
                raw: {
                  language: "json"
                }
              }
            },
            /** @param {{params:{id:string,channel:string},data:{chart:binary},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:403},{code:404}]} */
            send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
          },
          authorize: {
            post: {
              method: "post",
              url: "api/v4/projects/:id/packages/helm/api/:channel/charts/authorize",
              resource: "authorize",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "channel",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 14.0",
              query: [],
              data: null,
              /** @param {{params:{id:string,channel:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
              send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
            }
          }
        }
      }
    },
    ml_models: {
      files: {
        "(*path": {
          "){{file_name}}": {
            put: {
              method: "put",
              url: "api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}",
              resource: "){{file_name}}",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "model_version_id",
                  type: "string"
                }
              ],
              headers: {
                "Content-Type": "application/json"
              },
              description: "Introduced in GitLab 16.8",
              query: [],
              data: {
                mode: "raw",
                raw: {
                  file: "binary",
                  path: "string",
                  status: "string"
                },
                options: {
                  raw: {
                    language: "json"
                  }
                }
              },
              /** @param {{params:{id:string,model_version_id:string},data:{file:binary,path:string,status:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:403},{code:404}]} */
              send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
            },
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}",
              resource: "){{file_name}}",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "model_version_id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 16.8",
              query: [
                {
                  name: "path",
                  type: "string"
                },
                {
                  name: "status",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string,model_version_id:string},query:{path:string,status:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            },
            authorize: {
              put: {
                method: "put",
                url: "api/v4/projects/:id/packages/ml_models/:model_version_id/files/(*path/){{file_name}}/authorize",
                resource: "authorize",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "model_version_id",
                    type: "string"
                  }
                ],
                headers: {
                  "Content-Type": "application/json"
                },
                description: "Introduced in GitLab 16.8",
                query: [],
                data: {
                  mode: "raw",
                  raw: {
                    path: "string",
                    status: "string"
                  },
                  options: {
                    raw: {
                      language: "json"
                    }
                  }
                },
                /** @param {{params:{id:string,model_version_id:string},data:{path:string,status:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
                send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
              }
            }
          }
        }
      }
    },
    npm: {
      "*package_name": {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/npm/*package_name",
          resource: "*package_name",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 11.8",
          query: [
            {
              name: "package_name",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string},query:{package_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,versions:object,dist-tags:object}},{code:302},{code:400},{code:401},{code:403},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        },
        "-": {
          "*file_name": {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/npm/*package_name/-/*file_name",
              resource: "*file_name",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 11.8",
              query: [
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "file_name",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{package_name:string,file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          }
        }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/packages/npm/:package_name",
        resource: "npm",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "package_name",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "Create was introduced in GitLab 11.8 & deprecate suppport was added in 16.0",
        query: [],
        data: {
          mode: "raw",
          raw: {
            versions: "object"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,package_name:string},data:{versions:object},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      "-": {
        npm: {
          v1: {
            security: {
              advisories: {
                bulk: {
                  post: {
                    method: "post",
                    url: "api/v4/projects/:id/packages/npm/-/npm/v1/security/advisories/bulk",
                    resource: "bulk",
                    variable: [
                      {
                        name: "id",
                        type: "string"
                      }
                    ],
                    headers: {},
                    description: "This feature was introduced in GitLab 15.6",
                    query: [],
                    data: null,
                    /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:307},{code:401},{code:403},{code:404}]} */
                    send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
                  }
                }
              },
              audits: {
                quick: {
                  post: {
                    method: "post",
                    url: "api/v4/projects/:id/packages/npm/-/npm/v1/security/audits/quick",
                    resource: "quick",
                    variable: [
                      {
                        name: "id",
                        type: "string"
                      }
                    ],
                    headers: {},
                    description: "This feature was introduced in GitLab 15.6",
                    query: [],
                    data: null,
                    /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:307},{code:401},{code:403},{code:404}]} */
                    send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
                  }
                }
              }
            }
          }
        },
        package: {
          "*package_name": {
            "dist-tags": {
              get: {
                method: "get",
                url: "api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags",
                resource: "dist-tags",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  }
                ],
                headers: {
                  Accept: "application/json"
                },
                description: "This feature was introduced in GitLab 12.7",
                query: [
                  {
                    name: "package_name",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{id:string},query:{package_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{dist_tags:object}},{code:400},{code:401},{code:403},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              },
              put: {
                method: "put",
                url: "api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags/:tag",
                resource: "dist-tags",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "tag",
                    type: "string"
                  }
                ],
                headers: {
                  "Content-Type": "application/json"
                },
                description: "This feature was introduced in GitLab 12.7",
                query: [],
                data: {
                  mode: "raw",
                  raw: {
                    package_name: "string"
                  },
                  options: {
                    raw: {
                      language: "json"
                    }
                  }
                },
                /** @param {{params:{id:string,tag:string},data:{package_name:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:403},{code:404}]} */
                send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
              },
              delete: {
                method: "delete",
                url: "api/v4/projects/:id/packages/npm/-/package/*package_name/dist-tags/:tag",
                resource: "dist-tags",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "tag",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 12.7",
                query: [
                  {
                    name: "package_name",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{id:string,tag:string},query:{package_name:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:403},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            }
          }
        }
      }
    },
    nuget: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/packages/nuget",
        resource: "nuget",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "This feature was introduced in GitLab 12.6",
        query: [],
        data: {
          mode: "raw",
          raw: {
            package: "binary"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{package:binary},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      index: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/nuget/index",
          resource: "index",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 12.6",
          query: [],
          data: null,
          /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{version:string,resources:[object,object]}},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      authorize: {
        put: {
          method: "put",
          url: "api/v4/projects/:id/packages/nuget/authorize",
          resource: "authorize",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 14.1",
          query: [],
          data: null,
          /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      symbolpackage: {
        put: {
          method: "put",
          url: "api/v4/projects/:id/packages/nuget/symbolpackage",
          resource: "symbolpackage",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "This feature was introduced in GitLab 14.1",
          query: [],
          data: {
            mode: "raw",
            raw: {
              package: "binary"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string},data:{package:binary},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        },
        authorize: {
          put: {
            method: "put",
            url: "api/v4/projects/:id/packages/nuget/symbolpackage/authorize",
            resource: "authorize",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 14.1",
            query: [],
            data: null,
            /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          }
        }
      },
      "*package_name": {
        "*package_version": {
          delete: {
            method: "delete",
            url: "api/v4/projects/:id/packages/nuget/*package_name/*package_version",
            resource: "*package_version",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 16.5",
            query: [
              {
                name: "package_name",
                type: "string"
              },
              {
                name: "package_version",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string},query:{package_name:string,package_version:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      },
      symbolfiles: {
        "*file_name": {
          "*signature": {
            "*same_file_name": {
              get: {
                method: "get",
                url: "api/v4/projects/:id/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name",
                resource: "*same_file_name",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  }
                ],
                headers: {
                  Symbolchecksum: "<string>"
                },
                description: "This feature was introduced in GitLab 16.7",
                query: [
                  {
                    name: "file_name",
                    type: "string"
                  },
                  {
                    name: "signature",
                    type: "string"
                  },
                  {
                    name: "same_file_name",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{id:string},query:{file_name:string,signature:string,same_file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:403},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            }
          }
        }
      },
      v2: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/nuget/v2",
          resource: "v2",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 16.2",
          query: [],
          data: null,
          /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        },
        put: {
          method: "put",
          url: "api/v4/projects/:id/packages/nuget/v2",
          resource: "v2",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "This feature was introduced in GitLab 16.2",
          query: [],
          data: {
            mode: "raw",
            raw: {
              package: "binary"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string},data:{package:binary},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        },
        "$metadata": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/nuget/v2/$metadata",
            resource: "$metadata",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 16.3",
            query: [],
            data: null,
            /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          }
        },
        authorize: {
          put: {
            method: "put",
            url: "api/v4/projects/:id/packages/nuget/v2/authorize",
            resource: "authorize",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 16.2",
            query: [],
            data: null,
            /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          }
        },
        FindPackagesById: {
          "(": {
            ")": {
              get: {
                method: "get",
                url: "api/v4/projects/:project_id/packages/nuget/v2/FindPackagesById/(/)",
                resource: ")",
                variable: [
                  {
                    name: "project_id",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 16.4",
                query: [
                  {
                    name: "id",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{project_id:string},query:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            }
          }
        },
        Packages: {
          "(": {
            ")": {
              get: {
                method: "get",
                url: "api/v4/projects/:project_id/packages/nuget/v2/Packages/(/)",
                resource: ")",
                variable: [
                  {
                    name: "project_id",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 16.4",
                query: [
                  {
                    name: "$filter",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{project_id:string},query:{$filter:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            }
          },
          "(Id='*package_name',Version='*package_version'": {
            ")": {
              get: {
                method: "get",
                url: "api/v4/projects/:project_id/packages/nuget/v2/Packages/(Id='*package_name',Version='*package_version'/)",
                resource: ")",
                variable: [
                  {
                    name: "project_id",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 16.4",
                query: [
                  {
                    name: "package_name",
                    type: "string"
                  },
                  {
                    name: "package_version",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{project_id:string},query:{package_name:string,package_version:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            }
          }
        }
      },
      metadata: {
        "*package_name": {
          index: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/nuget/metadata/*package_name/index",
              resource: "index",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "This feature was introduced in GitLab 12.8",
              query: [
                {
                  name: "package_name",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{package_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{count:number,items:[{@id:string,lower:string,upper:string,count:number,items:[{value:{}},{value:{}}]},{@id:string,lower:string,upper:string,count:number,items:[{value:{}},{value:{}}]}]}},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          "*package_version": {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/nuget/metadata/*package_name/*package_version",
              resource: "*package_version",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "This feature was introduced in GitLab 12.8",
              query: [
                {
                  name: "package_name",
                  type: "string"
                },
                {
                  name: "package_version",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{package_name:string,package_version:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{@id:string,packageContent:string,catalogEntry:{@id:string,dependencyGroups:[{value:{}},{value:{}}],id:string,version:string,tags:string,packageContent:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string,published:string}}},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          }
        }
      },
      query: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/nuget/query",
          resource: "query",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 12.8",
          query: [
            {
              name: "q",
              type: "string"
            },
            {
              name: "skip",
              type: "string"
            },
            {
              name: "take",
              type: "string"
            },
            {
              name: "prerelease",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string},query:{q:string,skip:string,take:string,prerelease:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{totalHits:number,data:[{@type:string,id:string,title:string,totalDownloads:number,verified:boolean,version:string,versions:{value:{}},tags:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string},{@type:string,id:string,title:string,totalDownloads:number,verified:boolean,version:string,versions:{value:{}},tags:string,authors:string,description:string,summary:string,projectUrl:string,licenseUrl:string,iconUrl:string}]}},{code:401},{code:403},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      download: {
        "*package_name": {
          index: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/nuget/download/*package_name/index",
              resource: "index",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {
                Accept: "application/json"
              },
              description: "This feature was introduced in GitLab 12.8",
              query: [
                {
                  name: "package_name",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{package_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{versions:[string,string]}},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          },
          "*package_version": {
            "*package_filename": {
              get: {
                method: "get",
                url: "api/v4/projects/:id/packages/nuget/download/*package_name/*package_version/*package_filename",
                resource: "*package_filename",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 12.8",
                query: [
                  {
                    name: "package_name",
                    type: "string"
                  },
                  {
                    name: "package_version",
                    type: "string"
                  },
                  {
                    name: "package_filename",
                    type: "string"
                  }
                ],
                data: null,
                /** @param {{params:{id:string},query:{package_name:string,package_version:string,package_filename:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
                send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
              }
            }
          }
        }
      }
    },
    pypi: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/packages/pypi",
        resource: "pypi",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "This feature was introduced in GitLab 12.10",
        query: [],
        data: {
          mode: "raw",
          raw: {
            content: "binary",
            name: "string",
            version: "string",
            requires_python: "string",
            md5_digest: "string",
            sha256_digest: "string",
            metadata_version: "string",
            author_email: "string",
            description: "string",
            description_content_type: "string",
            summary: "string",
            keywords: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{content:binary,name:string,version:string,requires_python:string,md5_digest:string,sha256_digest:string,metadata_version:string,author_email:string,description:string,description_content_type:string,summary:string,keywords:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404},{code:422}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      files: {
        "*file_identifier": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/pypi/files/:sha256/*file_identifier",
            resource: "*file_identifier",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "sha256",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 12.10",
            query: [
              {
                name: "file_identifier",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string,sha256:string},query:{file_identifier:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      },
      simple: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/pypi/simple",
          resource: "simple",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 15.1",
          query: [],
          data: null,
          /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        },
        "*package_name": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/pypi/simple/*package_name",
            resource: "*package_name",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 12.10",
            query: [
              {
                name: "package_name",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string},query:{package_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      },
      authorize: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/packages/pypi/authorize",
          resource: "authorize",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 12.10",
          query: [],
          data: null,
          /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    rpm: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/packages/rpm",
        resource: "rpm",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 15.7",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      repodata: {
        "*file_name": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/rpm/repodata/*file_name",
            resource: "*file_name",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 15.7",
            query: [
              {
                name: "file_name",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string},query:{file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      },
      "*package_file_id": {
        "*file_name": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/rpm/*package_file_id/*file_name",
            resource: "*file_name",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 15.7",
            query: [
              {
                name: "package_file_id",
                type: "string"
              },
              {
                name: "file_name",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string},query:{package_file_id:string,file_name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      },
      authorize: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/packages/rpm/authorize",
          resource: "authorize",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 15.7",
          query: [],
          data: null,
          /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    rubygems: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/packages/rubygems/:file_name",
        resource: "rubygems",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/octet-stream"
        },
        description: "This feature was introduced in GitLab 13.9",
        query: [],
        data: {
          mode: "file"
        },
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      quick: {
        "Marshal.4.8": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/rubygems/quick/Marshal.4.8/:file_name",
            resource: "Marshal.4.8",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {
              "Content-Type": "application/octet-stream"
            },
            description: "This feature was introduced in GitLab 13.9",
            query: [],
            data: {
              mode: "file"
            },
            /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
            send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
          }
        }
      },
      gems: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/rubygems/gems/:file_name",
          resource: "gems",
          variable: [
            {
              name: "id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/octet-stream"
          },
          description: "This feature was introduced in GitLab 13.9",
          query: [],
          data: {
            mode: "file"
          },
          /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      api: {
        v1: {
          gems: {
            post: {
              method: "post",
              url: "api/v4/projects/:id/packages/rubygems/api/v1/gems",
              resource: "gems",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {
                "Content-Type": "application/json"
              },
              description: "This feature was introduced in GitLab 13.9",
              query: [],
              data: {
                mode: "raw",
                raw: {
                  file: "binary"
                },
                options: {
                  raw: {
                    language: "json"
                  }
                }
              },
              /** @param {{params:{id:string},data:{file:binary},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:403},{code:404}]} */
              send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
            },
            authorize: {
              post: {
                method: "post",
                url: "api/v4/projects/:id/packages/rubygems/api/v1/gems/authorize",
                resource: "authorize",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  }
                ],
                headers: {},
                description: "This feature was introduced in GitLab 13.9",
                query: [],
                data: null,
                /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403}]} */
                send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
              }
            }
          },
          dependencies: {
            get: {
              method: "get",
              url: "api/v4/projects/:id/packages/rubygems/api/v1/dependencies",
              resource: "dependencies",
              variable: [
                {
                  name: "id",
                  type: "string"
                }
              ],
              headers: {},
              description: "This feature was introduced in GitLab 13.9",
              query: [
                {
                  name: "gems",
                  type: "string"
                }
              ],
              data: null,
              /** @param {{params:{id:string},query:{gems:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404}]} */
              send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
            }
          }
        }
      }
    },
    terraform: {
      modules: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system",
          resource: "modules",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "module_name",
              type: "string"
            },
            {
              name: "module_system",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 16.7",
          query: [
            {
              name: "terraform-get",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,module_name:string,module_system:string},query:{terraform-get:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:403},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        },
        "*module_version": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version",
            resource: "*module_version",
            variable: [
              {
                name: "id",
                type: "string"
              },
              {
                name: "module_name",
                type: "string"
              },
              {
                name: "module_system",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 16.7",
            query: [
              {
                name: "module_version",
                type: "string"
              },
              {
                name: "terraform-get",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string,module_name:string,module_system:string},query:{module_version:string,terraform-get:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:403},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          },
          file: {
            put: {
              method: "put",
              url: "api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version/file",
              resource: "file",
              variable: [
                {
                  name: "id",
                  type: "string"
                },
                {
                  name: "module_name",
                  type: "string"
                },
                {
                  name: "module_system",
                  type: "string"
                }
              ],
              headers: {
                "Content-Type": "multipart/form-data"
              },
              description: "This feature was introduced in GitLab 13.11",
              query: [],
              data: {
                mode: "formdata",
                formdata: {
                  module_version: "string"
                }
              },
              /** @param {{params:{id:string,module_name:string,module_system:string},data:{module_version:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:401},{code:403},{code:404}]} */
              send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
            },
            authorize: {
              put: {
                method: "put",
                url: "api/v4/projects/:id/packages/terraform/modules/:module_name/:module_system/*module_version/file/authorize",
                resource: "authorize",
                variable: [
                  {
                    name: "id",
                    type: "string"
                  },
                  {
                    name: "module_name",
                    type: "string"
                  },
                  {
                    name: "module_system",
                    type: "string"
                  }
                ],
                headers: {
                  "Content-Type": "application/json"
                },
                description: "This feature was introduced in GitLab 13.11",
                query: [],
                data: {
                  mode: "raw",
                  raw: {
                    module_version: "string"
                  },
                  options: {
                    raw: {
                      language: "json"
                    }
                  }
                },
                /** @param {{params:{id:string,module_name:string,module_system:string},data:{module_version:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403}]} */
                send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
              }
            }
          }
        }
      }
    }
  },
  members: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/members",
      resource: "members",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Gets a list of group or project members viewable by the authenticated user.",
      query: [
        {
          name: "query",
          type: "string"
        },
        {
          name: "user_ids",
          type: "string"
        },
        {
          name: "skip_users",
          type: "string"
        },
        {
          name: "show_seat_info",
          type: "string"
        },
        {
          name: "with_saml_identity",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{query:string,user_ids:string,skip_users:string,show_seat_info:string,with_saml_identity:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/members",
      resource: "members",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Adds a member to a group or project.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          access_level: "number",
          user_id: "number",
          username: "string",
          expires_at: "dateTime",
          invite_source: "members-api"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{access_level:number,user_id:number,username:string,expires_at:dateTime,invite_source:members-api},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:text,description:text,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    all: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/members/all",
        resource: "all",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
        query: [
          {
            name: "query",
            type: "string"
          },
          {
            name: "user_ids",
            type: "string"
          },
          {
            name: "show_seat_info",
            type: "string"
          },
          {
            name: "state",
            type: "string"
          },
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{query:string,user_ids:string,show_seat_info:string,state:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string,access_level:string,created_at:string,created_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},expires_at:string,group_saml_identity:{provider:{value:{}},extern_uid:{value:{}},saml_provider_id:{value:{}}},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:{value:{}},group_id:{value:{}},name:{value:{}},description:{value:{}},base_access_level:{value:{}},admin_cicd_variables:{value:{}},admin_compliance_framework:{value:{}},admin_group_member:{value:{}},admin_merge_request:{value:{}},admin_push_rules:{value:{}},admin_terraform_state:{value:{}},admin_vulnerability:{value:{}},admin_web_hook:{value:{}},archive_project:{value:{}},manage_deploy_tokens:{value:{}},manage_group_access_tokens:{value:{}},manage_merge_request_settings:{value:{}},manage_project_access_tokens:{value:{}},manage_security_policy_link:{value:{}},read_code:{value:{}},read_dependency:{value:{}},read_vulnerability:{value:{}},remove_group:{value:{}},remove_project:{value:{}}}}]}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/members/all/:user_id",
        resource: "all",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "user_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Gets a member of a group or project, including those who gained membership through ancestor group",
        query: [],
        data: null,
        /** @param {{params:{id:string,user_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:text,description:text,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/members/:user_id",
      resource: "members",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "user_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Gets a member of a group or project.",
      query: [],
      data: null,
      /** @param {{params:{id:string,user_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:text,description:text,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/members/:user_id",
      resource: "members",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "user_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates a member of a group or project.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          access_level: "number",
          expires_at: "dateTime",
          member_role_id: "number"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,user_id:string},data:{access_level:number,expires_at:dateTime,member_role_id:number},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{key:string,value:string},{key:string,value:string}],web_url:string,access_level:string,created_at:string,created_by:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},expires_at:string,group_saml_identity:{provider:string,extern_uid:string,saml_provider_id:string},email:string,is_using_seat:string,override:string,membership_state:string,member_role:{id:number,group_id:number,name:text,description:text,base_access_level:number,admin_cicd_variables:boolean,admin_compliance_framework:boolean,admin_group_member:boolean,admin_merge_request:boolean,admin_push_rules:boolean,admin_terraform_state:boolean,admin_vulnerability:boolean,admin_web_hook:boolean,archive_project:boolean,manage_deploy_tokens:boolean,manage_group_access_tokens:boolean,manage_merge_request_settings:boolean,manage_project_access_tokens:boolean,manage_security_policy_link:boolean,read_code:boolean,read_dependency:boolean,read_vulnerability:boolean,remove_group:boolean,remove_project:boolean}}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/members/:user_id",
      resource: "members",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "user_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Removes a user from a group or project.",
      query: [
        {
          name: "skip_subresources",
          type: "string"
        },
        {
          name: "unassign_issuables",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,user_id:string},query:{skip_subresources:string,unassign_issuables:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  create_ci_config: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/create_ci_config",
      resource: "create_ci_config",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Creates merge request for missing ci config in project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  pages: {
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/pages",
      resource: "pages",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Remove pages. The user must have administrator access. This feature was introduced in GitLab 12.6",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    patch: {
      method: "patch",
      url: "api/v4/projects/:id/pages",
      resource: "pages",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json"
      },
      description: "Update page settings for a project. User must have administrative access.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          pages_unique_domain_enabled: "boolean",
          pages_https_only: "boolean"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{pages_unique_domain_enabled:boolean,pages_https_only:boolean},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    get: {
      method: "get",
      url: "api/v4/projects/:id/pages",
      resource: "pages",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Get pages URL and other settings. This feature was introduced in Gitlab 16.8",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    domains: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/pages/domains",
        resource: "domains",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get all pages domains",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:{value:{}},expired:{value:{}},certificate:{value:{}},certificate_text:{value:{}}}},{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:{value:{}},expired:{value:{}},certificate:{value:{}},certificate_text:{value:{}}}}]}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/pages/domains",
        resource: "domains",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Create a new pages domain",
        query: [],
        data: {
          mode: "raw",
          raw: {
            domain: "string",
            certificate: "binary",
            key: "binary",
            auto_ssl_enabled: false,
            user_provided_certificate: "string",
            user_provided_key: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{domain:string,certificate:binary,key:binary,auto_ssl_enabled:false,user_provided_certificate:string,user_provided_key:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:string,expired:string,certificate:string,certificate_text:string}}}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      getOne: {
        method: "get",
        url: "api/v4/projects/:id/pages/domains/:domain",
        resource: "domains",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "domain",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a single pages domain",
        query: [],
        data: null,
        /** @param {{params:{id:string,domain:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{domain:string,url:string,verified:string,verification_code:string,enabled_until:string,auto_ssl_enabled:string,certificate:{subject:string,expired:string,certificate:string,certificate_text:string}}}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/pages/domains/:domain",
        resource: "domains",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "domain",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "Updates a pages domain",
        query: [],
        data: {
          mode: "raw",
          raw: {
            certificate: "binary",
            key: "binary",
            auto_ssl_enabled: "boolean"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,domain:string},data:{certificate:binary,key:binary,auto_ssl_enabled:boolean},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/pages/domains/:domain",
        resource: "domains",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "domain",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete a pages domain",
        query: [],
        data: null,
        /** @param {{params:{id:string,domain:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  avatar: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/avatar",
      resource: "avatar",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 16.9",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  clusters: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/clusters",
      resource: "clusters",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.7. Returns a list of project clusters.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},platform_kubernetes:{api_url:{value:{}},namespace:{value:{}},authorization_type:{value:{}},ca_cert:{value:{}}},provider_gcp:{cluster_id:{value:{}},status_name:{value:{}},gcp_project_id:{value:{}},zone:{value:{}},machine_type:{value:{}},num_nodes:{value:{}},endpoint:{value:{}}},management_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}},{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},platform_kubernetes:{api_url:{value:{}},namespace:{value:{}},authorization_type:{value:{}},ca_cert:{value:{}}},provider_gcp:{cluster_id:{value:{}},status_name:{value:{}},gcp_project_id:{value:{}},zone:{value:{}},machine_type:{value:{}},num_nodes:{value:{}},endpoint:{value:{}}},management_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}}]},{code:403}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/clusters/:cluster_id",
      resource: "clusters",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "cluster_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.7. Gets a single project cluster.",
      query: [],
      data: null,
      /** @param {{params:{id:string,cluster_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/clusters/:cluster_id",
      resource: "clusters",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "cluster_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.7. Updates an existing project cluster.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          domain: "string",
          environment_scope: "string",
          namespace_per_environment: true,
          management_project_id: "number",
          enabled: "boolean",
          managed: "boolean",
          platform_kubernetes_attributes: {
            api_url: "string",
            token: "string",
            ca_cert: "string",
            namespace: "string"
          }
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,cluster_id:string},data:{name:string,domain:string,environment_scope:string,namespace_per_environment:true,management_project_id:number,enabled:boolean,managed:boolean,platform_kubernetes_attributes:{api_url:string,token:string,ca_cert:string,namespace:string}},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:400},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/clusters/:cluster_id",
      resource: "clusters",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "cluster_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.7. Deletes an existing project cluster. Does not remove existing resources within the connected Kubernetes cluster.",
      query: [],
      data: null,
      /** @param {{params:{id:string,cluster_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    user: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/clusters/user",
        resource: "user",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 11.7. Adds an existing Kubernetes cluster to the project.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            name: "string",
            platform_kubernetes_attributes: {
              api_url: "string",
              token: "string",
              ca_cert: "string",
              namespace: "string",
              authorization_type: "rbac"
            },
            enabled: true,
            domain: "string",
            environment_scope: "*",
            namespace_per_environment: true,
            management_project_id: "number",
            managed: true
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{name:string,platform_kubernetes_attributes:{api_url:string,token:string,ca_cert:string,namespace:string,authorization_type:rbac},enabled:true,domain:string,environment_scope:*,namespace_per_environment:true,management_project_id:number,managed:true},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:string,name:string,created_at:string,domain:string,enabled:string,managed:string,provider_type:string,platform_type:string,environment_scope:string,cluster_type:string,namespace_per_environment:string,user:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},platform_kubernetes:{api_url:string,namespace:string,authorization_type:string,ca_cert:string},provider_gcp:{cluster_id:string,status_name:string,gcp_project_id:string,zone:string,machine_type:string,num_nodes:string,endpoint:string},management_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime},project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string}}},{code:400},{code:403},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  registry: {
    repositories: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/registry/repositories",
        resource: "repositories",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 11.8.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          },
          {
            name: "tags",
            type: "string"
          },
          {
            name: "tags_count",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{page:string,per_page:string,tags:string,tags_count:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,name:string,path:string,project_id:number,location:string,created_at:dateTime,cleanup_policy_started_at:dateTime,tags_count:number,tags:{name:{value:{}},path:{value:{}},location:{value:{}}},delete_api_path:string,size:number,status:string},{id:number,name:string,path:string,project_id:number,location:string,created_at:dateTime,cleanup_policy_started_at:dateTime,tags_count:number,tags:{name:{value:{}},path:{value:{}},location:{value:{}}},delete_api_path:string,size:number,status:string}]},{code:401},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/registry/repositories/:repository_id",
        resource: "repositories",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "repository_id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 11.8.",
        query: [],
        data: null,
        /** @param {{params:{id:string,repository_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      tags: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/registry/repositories/:repository_id/tags",
          resource: "tags",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "repository_id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 11.8.",
          query: [
            {
              name: "page",
              type: "string"
            },
            {
              name: "per_page",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,repository_id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{name:string,path:string,location:string},{name:string,path:string,location:string}]},{code:401},{code:404},{code:405}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        },
        delete: {
          method: "delete",
          url: "api/v4/projects/:id/registry/repositories/:repository_id/tags/:tag_name",
          resource: "tags",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "repository_id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 11.8.",
          query: [],
          data: null,
          /** @param {{params:{id:string,repository_id:string,tag_name:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        },
        getOne: {
          method: "get",
          url: "api/v4/projects/:id/registry/repositories/:repository_id/tags/:tag_name",
          resource: "tags",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "repository_id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "This feature was introduced in GitLab 11.8.",
          query: [],
          data: null,
          /** @param {{params:{id:string,repository_id:string,tag_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,path:string,location:string,revision:string,short_revision:string,digest:string,created_at:dateTime,total_size:number}},{code:400},{code:401},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    }
  },
  events: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/events",
      resource: "events",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "List a project's visible events",
      query: [
        {
          name: "action",
          type: "string"
        },
        {
          name: "target_type",
          type: "string"
        },
        {
          name: "before",
          type: "string"
        },
        {
          name: "after",
          type: "string"
        },
        {
          name: "sort",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{action:string,target_type:string,before:string,after:string,sort:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,project_id:number,action_name:string,target_id:number,target_iid:number,target_type:string,author_id:number,target_title:string,created_at:string,note:{id:string,type:string,body:string,attachment:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:string,updated_at:string,system:string,noteable_id:string,noteable_type:string,project_id:string,commit_id:string,position:string,resolvable:string,resolved:string,resolved_by:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},resolved_at:string,confidential:string,internal:string,imported:string,imported_from:string,noteable_iid:string,commands_changes:string},author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},wiki_page:{format:string,slug:string,title:string},imported:boolean,imported_from:string,push_data:{commit_count:number,action:string,ref_type:string,commit_from:string,commit_to:string,ref:string,commit_title:string,ref_count:number},author_username:string}}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  export: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/export",
      resource: "export",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,export_status:string,_links:{api_url:string,web_url:string}}},{code:401},{code:403},{code:404},{code:503}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/export",
      resource: "export",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          description: "string",
          upload: {
            url: "string",
            http_method: "PUT"
          }
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{description:string,upload:{url:string,http_method:PUT}},clientOptions:{}}} requestOptions * @return {[{code:202},{code:400},{code:401},{code:403},{code:404},{code:429},{code:503}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    download: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/export/download",
        resource: "download",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 10.6.",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:403},{code:404},{code:503}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  export_relations: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/export_relations",
      resource: "export_relations",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json"
      },
      description: "This feature was introduced in GitLab 14.4",
      query: [],
      data: {
        mode: "raw",
        raw: {
          batched: "boolean"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{batched:boolean},clientOptions:{}}} requestOptions * @return {[{code:202},{code:400},{code:401},{code:403},{code:404},{code:503}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    download: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/export_relations/download",
        resource: "download",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 14.4",
        query: [
          {
            name: "relation",
            type: "string"
          },
          {
            name: "batched",
            type: "string"
          },
          {
            name: "batch_number",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{relation:string,batched:string,batch_number:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:400},{code:401},{code:403},{code:404},{code:500},{code:503}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    },
    status: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/export_relations/status",
        resource: "status",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 14.4",
        query: [
          {
            name: "relation",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{relation:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{relation:string,status:string,error:string,updated_at:dateTime,batched:boolean,batches_count:number,total_objects_count:number,batches:{status:{value:{}},batch_number:{value:{}},objects_count:{value:{}},error:{value:{}},updated_at:{value:{}}}},{relation:string,status:string,error:string,updated_at:dateTime,batched:boolean,batches_count:number,total_objects_count:number,batches:{status:{value:{}},batch_number:{value:{}},objects_count:{value:{}},error:{value:{}},updated_at:{value:{}}}}]},{code:401},{code:403},{code:404},{code:503}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      }
    }
  },
  hooks: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/hooks",
      resource: "hooks",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of project hooks",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:string,url:string,name:string,description:string,created_at:dateTime,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:dateTime,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean},{id:string,url:string,name:string,description:string,created_at:dateTime,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:dateTime,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/hooks",
      resource: "hooks",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Adds a hook to a specified project",
      query: [],
      data: {
        mode: "raw",
        raw: {
          url: "string",
          name: "string",
          description: "string",
          push_events: "boolean",
          issues_events: "boolean",
          confidential_issues_events: "boolean",
          merge_requests_events: "boolean",
          tag_push_events: "boolean",
          note_events: "boolean",
          confidential_note_events: "boolean",
          job_events: "boolean",
          pipeline_events: "boolean",
          wiki_page_events: "boolean",
          deployment_events: "boolean",
          releases_events: "boolean",
          emoji_events: "boolean",
          resource_access_token_events: "boolean",
          enable_ssl_verification: "boolean",
          token: "string",
          push_events_branch_filter: "string",
          custom_webhook_template: "string",
          url_variables: [
            {
              key: "string",
              value: "string"
            },
            {
              key: "string",
              value: "string"
            }
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{url:string,name:string,description:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,note_events:boolean,confidential_note_events:boolean,job_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,releases_events:boolean,emoji_events:boolean,resource_access_token_events:boolean,enable_ssl_verification:boolean,token:string,push_events_branch_filter:string,custom_webhook_template:string,url_variables:[{key:string,value:string},{key:string,value:string}]},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:string,url:string,name:string,description:string,created_at:dateTime,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:dateTime,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:400},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/hooks/:hook_id",
      resource: "hooks",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "hook_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a specific hook for a project",
      query: [],
      data: null,
      /** @param {{params:{id:string,hook_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,url:string,name:string,description:string,created_at:dateTime,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:dateTime,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/hooks/:hook_id",
      resource: "hooks",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "hook_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Edits a hook for a specified project.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          url: "string",
          name: "string",
          description: "string",
          push_events: "boolean",
          issues_events: "boolean",
          confidential_issues_events: "boolean",
          merge_requests_events: "boolean",
          tag_push_events: "boolean",
          note_events: "boolean",
          confidential_note_events: "boolean",
          job_events: "boolean",
          pipeline_events: "boolean",
          wiki_page_events: "boolean",
          deployment_events: "boolean",
          releases_events: "boolean",
          emoji_events: "boolean",
          resource_access_token_events: "boolean",
          enable_ssl_verification: "boolean",
          token: "string",
          push_events_branch_filter: "string",
          custom_webhook_template: "string",
          url_variables: [
            {
              key: "string",
              value: "string"
            },
            {
              key: "string",
              value: "string"
            }
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,hook_id:string},data:{url:string,name:string,description:string,push_events:boolean,issues_events:boolean,confidential_issues_events:boolean,merge_requests_events:boolean,tag_push_events:boolean,note_events:boolean,confidential_note_events:boolean,job_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,releases_events:boolean,emoji_events:boolean,resource_access_token_events:boolean,enable_ssl_verification:boolean,token:string,push_events_branch_filter:string,custom_webhook_template:string,url_variables:[{key:string,value:string},{key:string,value:string}]},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,url:string,name:string,description:string,created_at:dateTime,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:dateTime,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:400},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/hooks/:hook_id",
      resource: "hooks",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "hook_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Removes a hook from a project. This is an idempotent method and can be called multiple times. Either the hook is available or not.",
      query: [],
      data: null,
      /** @param {{params:{id:string,hook_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:string,url:string,name:string,description:string,created_at:dateTime,push_events:boolean,tag_push_events:boolean,merge_requests_events:boolean,repository_update_events:boolean,enable_ssl_verification:boolean,alert_status:symbol,disabled_until:dateTime,url_variables:[object,object],custom_webhook_template:string,project_id:string,issues_events:boolean,confidential_issues_events:boolean,note_events:boolean,confidential_note_events:boolean,pipeline_events:boolean,wiki_page_events:boolean,deployment_events:boolean,job_events:boolean,releases_events:boolean,push_events_branch_filter:string,emoji_events:boolean,resource_access_token_events:boolean}},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    test: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/hooks/:hook_id/test/:trigger",
        resource: "test",
        variable: [
          {
            name: "hook_id",
            type: "string"
          },
          {
            name: "trigger",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "Triggers a hook test",
        query: [],
        data: null,
        /** @param {{params:{hook_id:string,trigger:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:400},{code:404},{code:422},{code:429}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    url_variables: {
      put: {
        method: "put",
        url: "api/v4/projects/:id/hooks/:hook_id/url_variables/:key",
        resource: "url_variables",
        variable: [
          {
            name: "hook_id",
            type: "string"
          },
          {
            name: "key",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json"
        },
        description: "Set a url variable",
        query: [],
        data: {
          mode: "raw",
          raw: {
            value: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{hook_id:string,key:string,id:string},data:{value:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/hooks/:hook_id/url_variables/:key",
        resource: "url_variables",
        variable: [
          {
            name: "hook_id",
            type: "string"
          },
          {
            name: "key",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "Un-Set a url variable",
        query: [],
        data: null,
        /** @param {{params:{hook_id:string,key:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  import: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/import",
      resource: "import",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:object}},{code:400},{code:401},{code:403},{code:404},{code:503}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/import",
      resource: "import",
      variable: [],
      headers: {
        "Content-Type": "multipart/form-data",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 10.6.",
      query: [],
      data: {
        mode: "formdata",
        formdata: {
          path: "string",
          name: "string",
          namespace: "string",
          overwrite: "false",
          "override_params[description]": "string",
          "override_params[build_git_strategy]": "string",
          "override_params[build_timeout]": "number",
          "override_params[auto_cancel_pending_pipelines]": "string",
          "override_params[ci_config_path]": "string",
          "override_params[service_desk_enabled]": "boolean",
          "override_params[issues_enabled]": "boolean",
          "override_params[merge_requests_enabled]": "boolean",
          "override_params[wiki_enabled]": "boolean",
          "override_params[jobs_enabled]": "boolean",
          "override_params[snippets_enabled]": "boolean",
          "override_params[issues_access_level]": "string",
          "override_params[repository_access_level]": "string",
          "override_params[merge_requests_access_level]": "string",
          "override_params[forking_access_level]": "string",
          "override_params[wiki_access_level]": "string",
          "override_params[builds_access_level]": "string",
          "override_params[snippets_access_level]": "string",
          "override_params[pages_access_level]": "string",
          "override_params[analytics_access_level]": "string",
          "override_params[container_registry_access_level]": "string",
          "override_params[security_and_compliance_access_level]": "string",
          "override_params[releases_access_level]": "string",
          "override_params[environments_access_level]": "string",
          "override_params[feature_flags_access_level]": "string",
          "override_params[infrastructure_access_level]": "string",
          "override_params[monitor_access_level]": "string",
          "override_params[model_experiments_access_level]": "string",
          "override_params[model_registry_access_level]": "string",
          "override_params[emails_disabled]": "boolean",
          "override_params[emails_enabled]": "boolean",
          "override_params[show_default_award_emojis]": "boolean",
          "override_params[show_diff_preview_in_email]": "boolean",
          "override_params[warn_about_potentially_unwanted_characters]": "boolean",
          "override_params[enforce_auth_checks_on_uploads]": "boolean",
          "override_params[shared_runners_enabled]": "boolean",
          "override_params[group_runners_enabled]": "boolean",
          "override_params[resolve_outdated_diff_discussions]": "boolean",
          "override_params[remove_source_branch_after_merge]": "boolean",
          "override_params[container_registry_enabled]": "boolean",
          "override_params[container_expiration_policy_attributes][cadence]": "string",
          "override_params[container_expiration_policy_attributes][keep_n]": "number",
          "override_params[container_expiration_policy_attributes][older_than]": "string",
          "override_params[container_expiration_policy_attributes][name_regex]": "string",
          "override_params[container_expiration_policy_attributes][name_regex_keep]": "string",
          "override_params[container_expiration_policy_attributes][enabled]": "boolean",
          "override_params[lfs_enabled]": "boolean",
          "override_params[visibility]": "string",
          "override_params[public_builds]": "boolean",
          "override_params[public_jobs]": "boolean",
          "override_params[request_access_enabled]": "boolean",
          "override_params[only_allow_merge_if_pipeline_succeeds]": "boolean",
          "override_params[allow_merge_on_skipped_pipeline]": "boolean",
          "override_params[only_allow_merge_if_all_discussions_are_resolved]": "boolean",
          "override_params[tag_list]": "[\"string\",\"string\"]",
          "override_params[topics]": "[\"string\",\"string\"]",
          "override_params[printing_merge_request_link_enabled]": "boolean",
          "override_params[merge_method]": "string",
          "override_params[suggestion_commit_message]": "string",
          "override_params[merge_commit_template]": "string",
          "override_params[squash_commit_template]": "string",
          "override_params[issue_branch_template]": "string",
          "override_params[initialize_with_readme]": "boolean",
          "override_params[auto_devops_enabled]": "boolean",
          "override_params[auto_devops_deploy_strategy]": "string",
          "override_params[autoclose_referenced_issues]": "boolean",
          "override_params[repository_storage]": "string",
          "override_params[packages_enabled]": "boolean",
          "override_params[squash_option]": "string",
          "override_params[mr_default_target_self]": "boolean",
          "override_params[only_allow_merge_if_all_status_checks_passed]": "boolean",
          "override_params[approvals_before_merge]": "number",
          "override_params[mirror]": "boolean",
          "override_params[mirror_trigger_builds]": "boolean",
          "override_params[external_authorization_classification_label]": "string",
          "override_params[requirements_access_level]": "string",
          "override_params[prevent_merge_without_jira_issue]": "boolean",
          "file.path": "string",
          "file.name": "string",
          "file.type": "string",
          "file.size": "number",
          "file.md5": "string",
          "file.sha1": "string",
          "file.sha256": "string",
          "file.etag": "string",
          "file.remote_id": "string",
          "file.remote_url": "string"
        }
      },
      /** @param {{data:{path:string,name:string,namespace:string,overwrite:false,override_params[description]:string,override_params[build_git_strategy]:string,override_params[build_timeout]:number,override_params[auto_cancel_pending_pipelines]:string,override_params[ci_config_path]:string,override_params[service_desk_enabled]:boolean,override_params[issues_enabled]:boolean,override_params[merge_requests_enabled]:boolean,override_params[wiki_enabled]:boolean,override_params[jobs_enabled]:boolean,override_params[snippets_enabled]:boolean,override_params[issues_access_level]:string,override_params[repository_access_level]:string,override_params[merge_requests_access_level]:string,override_params[forking_access_level]:string,override_params[wiki_access_level]:string,override_params[builds_access_level]:string,override_params[snippets_access_level]:string,override_params[pages_access_level]:string,override_params[analytics_access_level]:string,override_params[container_registry_access_level]:string,override_params[security_and_compliance_access_level]:string,override_params[releases_access_level]:string,override_params[environments_access_level]:string,override_params[feature_flags_access_level]:string,override_params[infrastructure_access_level]:string,override_params[monitor_access_level]:string,override_params[model_experiments_access_level]:string,override_params[model_registry_access_level]:string,override_params[emails_disabled]:boolean,override_params[emails_enabled]:boolean,override_params[show_default_award_emojis]:boolean,override_params[show_diff_preview_in_email]:boolean,override_params[warn_about_potentially_unwanted_characters]:boolean,override_params[enforce_auth_checks_on_uploads]:boolean,override_params[shared_runners_enabled]:boolean,override_params[group_runners_enabled]:boolean,override_params[resolve_outdated_diff_discussions]:boolean,override_params[remove_source_branch_after_merge]:boolean,override_params[container_registry_enabled]:boolean,override_params[container_expiration_policy_attributes][cadence]:string,override_params[container_expiration_policy_attributes][keep_n]:number,override_params[container_expiration_policy_attributes][older_than]:string,override_params[container_expiration_policy_attributes][name_regex]:string,override_params[container_expiration_policy_attributes][name_regex_keep]:string,override_params[container_expiration_policy_attributes][enabled]:boolean,override_params[lfs_enabled]:boolean,override_params[visibility]:string,override_params[public_builds]:boolean,override_params[public_jobs]:boolean,override_params[request_access_enabled]:boolean,override_params[only_allow_merge_if_pipeline_succeeds]:boolean,override_params[allow_merge_on_skipped_pipeline]:boolean,override_params[only_allow_merge_if_all_discussions_are_resolved]:boolean,override_params[tag_list]:[\\string\\,\\string\\],override_params[topics]:[\\string\\,\\string\\],override_params[printing_merge_request_link_enabled]:boolean,override_params[merge_method]:string,override_params[suggestion_commit_message]:string,override_params[merge_commit_template]:string,override_params[squash_commit_template]:string,override_params[issue_branch_template]:string,override_params[initialize_with_readme]:boolean,override_params[auto_devops_enabled]:boolean,override_params[auto_devops_deploy_strategy]:string,override_params[autoclose_referenced_issues]:boolean,override_params[repository_storage]:string,override_params[packages_enabled]:boolean,override_params[squash_option]:string,override_params[mr_default_target_self]:boolean,override_params[only_allow_merge_if_all_status_checks_passed]:boolean,override_params[approvals_before_merge]:number,override_params[mirror]:boolean,override_params[mirror_trigger_builds]:boolean,override_params[external_authorization_classification_label]:string,override_params[requirements_access_level]:string,override_params[prevent_merge_without_jira_issue]:boolean,file.path:string,file.name:string,file.type:string,file.size:number,file.md5:string,file.sha1:string,file.sha256:string,file.etag:string,file.remote_id:string,file.remote_url:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:object}},{code:400},{code:401},{code:403},{code:404},{code:503}]} */
      send({ data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { data, clientOptions }]) }
    },
    authorize: {
      post: {
        method: "post",
        url: "api/v4/projects/import/authorize",
        resource: "authorize",
        variable: [],
        headers: {},
        description: "This feature was introduced in GitLab 12.9",
        query: [],
        data: null,
        /** @param {{clientOptions:{}}} requestOptions * @return {[{code:201}]} */
        send({ clientOptions = {} } = {}) { return request.apply(this, [client, { clientOptions }]) }
      }
    }
  },
  "relation-imports": {
    get: {
      method: "get",
      url: "api/v4/projects/:id/relation-imports",
      resource: "relation-imports",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 16.11.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:object}},{code:400},{code:401},{code:403},{code:404},{code:503}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  job_token_scope: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/job_token_scope",
      resource: "job_token_scope",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Fetch CI_JOB_TOKEN access settings.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{inbound_enabled:boolean,outbound_enabled:boolean}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    patch: {
      method: "patch",
      url: "api/v4/projects/:id/job_token_scope",
      resource: "job_token_scope",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json"
      },
      description: "Patch CI_JOB_TOKEN access settings.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          enabled: "boolean"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{enabled:boolean},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    allowlist: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/job_token_scope/allowlist",
        resource: "allowlist",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Fetch project inbound allowlist for CI_JOB_TOKEN access settings.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/job_token_scope/allowlist",
        resource: "allowlist",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Add target project to allowlist.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            target_project_id: "number"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{target_project_id:number},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}},{code:400},{code:401},{code:403},{code:404},{code:422}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/job_token_scope/allowlist/:target_project_id",
        resource: "allowlist",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "target_project_id",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete project from allowlist.",
        query: [],
        data: null,
        /** @param {{params:{id:string,target_project_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    groups_allowlist: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/job_token_scope/groups_allowlist",
        resource: "groups_allowlist",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Fetch project groups allowlist for CI_JOB_TOKEN access settings.",
        query: [
          {
            name: "page",
            type: "string"
          },
          {
            name: "per_page",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/job_token_scope/groups_allowlist",
        resource: "groups_allowlist",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "Add target group to allowlist.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            target_group_id: "number"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{target_group_id:number},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:string,web_url:string,name:string}},{code:400},{code:401},{code:403},{code:404},{code:422}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/job_token_scope/groups_allowlist/:target_group_id",
        resource: "groups_allowlist",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "target_group_id",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete target group from allowlist.",
        query: [],
        data: null,
        /** @param {{params:{id:string,target_group_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  repository_storage_moves: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/repository_storage_moves",
      resource: "repository_storage_moves",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.1.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,created_at:dateTime,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}},{id:number,created_at:dateTime,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}}}}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/repository_storage_moves",
      resource: "repository_storage_moves",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.1.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          destination_storage_name: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{destination_storage_name:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,created_at:dateTime,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime}}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/repository_storage_moves/:repository_storage_move_id",
      resource: "repository_storage_moves",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "repository_storage_move_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.1.",
      query: [],
      data: null,
      /** @param {{params:{id:string,repository_storage_move_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,created_at:dateTime,state:string,source_storage_name:string,destination_storage_name:string,error_message:string,project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime}}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  snippets: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/snippets",
      resource: "snippets",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get all project snippets",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,title:string,description:string,visibility:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime,updated_at:dateTime,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string},{id:number,title:string,description:string,visibility:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},created_at:dateTime,updated_at:dateTime,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}]},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/snippets",
      resource: "snippets",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create a new project snippet",
      query: [],
      data: {
        mode: "raw",
        raw: {
          title: "string",
          visibility: "string",
          file_name: "string",
          description: "string",
          files: [
            {
              file_path: "string",
              content: "string"
            },
            {
              file_path: "string",
              content: "string"
            }
          ],
          content: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{title:string,visibility:string,file_name:string,description:string,files:[{file_path:string,content:string},{file_path:string,content:string}],content:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime,updated_at:dateTime,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:400},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/snippets/:snippet_id",
      resource: "snippets",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "snippet_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a single project snippet",
      query: [],
      data: null,
      /** @param {{params:{id:string,snippet_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime,updated_at:dateTime,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/snippets/:snippet_id",
      resource: "snippets",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "snippet_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Update an existing project snippet",
      query: [],
      data: {
        mode: "raw",
        raw: {
          content: "string",
          description: "string",
          file_name: "string",
          title: "string",
          visibility: "string",
          files: [
            {
              action: "string",
              content: "string",
              file_path: "string",
              previous_path: "string"
            },
            {
              action: "string",
              content: "string",
              file_path: "string",
              previous_path: "string"
            }
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,snippet_id:string},data:{content:string,description:string,file_name:string,title:string,visibility:string,files:[{action:string,content:string,file_path:string,previous_path:string},{action:string,content:string,file_path:string,previous_path:string}]},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime,updated_at:dateTime,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:400},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/snippets/:snippet_id",
      resource: "snippets",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "snippet_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Delete a project snippet",
      query: [],
      data: null,
      /** @param {{params:{id:string,snippet_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    raw: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/snippets/:snippet_id/raw",
        resource: "raw",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "snippet_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get a raw project snippet",
        query: [],
        data: null,
        /** @param {{params:{id:string,snippet_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime,updated_at:dateTime,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    files: {
      raw: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/snippets/:snippet_id/files/:ref/:file_path/raw",
          resource: "raw",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "file_path",
              type: "string"
            },
            {
              name: "ref",
              type: "string"
            },
            {
              name: "snippet_id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get raw project snippet file contents from the repository",
          query: [],
          data: null,
          /** @param {{params:{id:string,file_path:string,ref:string,snippet_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,title:string,description:string,visibility:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},created_at:dateTime,updated_at:dateTime,project_id:number,web_url:string,raw_url:string,ssh_url_to_repo:string,http_url_to_repo:string,file_name:string,files:[string,string],imported:boolean,imported_from:string,repository_storage:string}},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    user_agent_detail: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/snippets/:snippet_id/user_agent_detail",
        resource: "user_agent_detail",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "snippet_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Get the user agent details for a project snippet",
        query: [],
        data: null,
        /** @param {{params:{id:string,snippet_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{user_agent:string,ip_address:string,akismet_submitted:boolean}},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  snapshot: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/snapshot",
      resource: "snapshot",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/x-tar"
      },
      description: "This feature was introduced in GitLab 10.7",
      query: [
        {
          name: "wiki",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{wiki:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  statistics: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/statistics",
      resource: "statistics",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the list of project fetch statistics for the last 30 days",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{fetches:{total:number,days:[{count:{value:{}},date:{value:{}}},{count:{value:{}},date:{value:{}}}]}}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  templates: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/templates/:type",
      resource: "templates",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "type",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This endpoint was introduced in GitLab 11.4",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,type:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{key:string,name:string},{key:string,name:string}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/templates/:type/:name",
      resource: "templates",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "type",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This endpoint was introduced in GitLab 11.4",
      query: [
        {
          name: "source_template_project_id",
          type: "string"
        },
        {
          name: "project",
          type: "string"
        },
        {
          name: "fullname",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,type:string,name:string},query:{source_template_project_id:string,project:string,fullname:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{key:string,name:string,nickname:string,html_url:string,source_url:string,popular:boolean,description:string,conditions:[string,string],permissions:[string,string],limitations:[string,string],content:string}},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  custom_attributes: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/custom_attributes",
      resource: "custom_attributes",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get all custom attributes on a project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{key:string,value:string}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/custom_attributes/:key",
      resource: "custom_attributes",
      variable: [
        {
          name: "key",
          type: "string"
        },
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a custom attribute on a project",
      query: [],
      data: null,
      /** @param {{params:{key:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{key:string,value:string}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/custom_attributes/:key",
      resource: "custom_attributes",
      variable: [
        {
          name: "key",
          type: "string"
        },
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json"
      },
      description: "Set a custom attribute on a project",
      query: [],
      data: {
        mode: "raw",
        raw: {
          value: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{key:string,id:string},data:{value:string},clientOptions:{}}} requestOptions * @return {[{code:200}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/custom_attributes/:key",
      resource: "custom_attributes",
      variable: [
        {
          name: "key",
          type: "string"
        },
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Delete a custom attribute on a project",
      query: [],
      data: null,
      /** @param {{params:{key:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:204}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  share_locations: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/share_locations",
      resource: "share_locations",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Returns group that can be shared with the given project",
      query: [
        {
          name: "search",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{search:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,web_url:string,name:string,path:string,description:string,visibility:string,share_with_group_lock:string,require_two_factor_authentication:string,two_factor_grace_period:string,project_creation_level:string,auto_devops_enabled:string,subgroup_creation_level:string,emails_disabled:boolean,emails_enabled:boolean,mentions_disabled:string,lfs_enabled:string,math_rendering_limits_enabled:boolean,lock_math_rendering_limits_enabled:boolean,default_branch:string,default_branch_protection:string,default_branch_protection_defaults:string,avatar_url:string,request_access_enabled:string,full_name:string,full_path:string,created_at:string,parent_id:string,organization_id:string,shared_runners_setting:string,custom_attributes:{key:string,value:string},statistics:{storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string},ldap_cn:string,ldap_access:string,ldap_group_links:{cn:string,group_access:number,provider:string,filter:string},saml_group_links:{name:string,access_level:number,member_role_id:number},file_template_project_id:string,marked_for_deletion_on:string,wiki_access_level:string,repository_storage:string,duo_features_enabled:string,lock_duo_features_enabled:string}}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  fork: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/fork/:forked_from_id",
      resource: "fork",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "forked_from_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Mark this project as forked from another",
      query: [],
      data: null,
      /** @param {{params:{id:string,forked_from_id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/fork",
      resource: "fork",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Remove a forked_from relationship",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:304},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  forks: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/forks",
      resource: "forks",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "List forks of this project",
      query: [
        {
          name: "order_by",
          type: "string"
        },
        {
          name: "sort",
          type: "string"
        },
        {
          name: "archived",
          type: "string"
        },
        {
          name: "visibility",
          type: "string"
        },
        {
          name: "search",
          type: "string"
        },
        {
          name: "search_namespaces",
          type: "string"
        },
        {
          name: "owned",
          type: "string"
        },
        {
          name: "starred",
          type: "string"
        },
        {
          name: "imported",
          type: "string"
        },
        {
          name: "membership",
          type: "string"
        },
        {
          name: "with_issues_enabled",
          type: "string"
        },
        {
          name: "with_merge_requests_enabled",
          type: "string"
        },
        {
          name: "with_programming_language",
          type: "string"
        },
        {
          name: "min_access_level",
          type: "string"
        },
        {
          name: "id_after",
          type: "string"
        },
        {
          name: "id_before",
          type: "string"
        },
        {
          name: "last_activity_after",
          type: "string"
        },
        {
          name: "last_activity_before",
          type: "string"
        },
        {
          name: "repository_storage",
          type: "string"
        },
        {
          name: "topic",
          type: "string"
        },
        {
          name: "topic_id",
          type: "string"
        },
        {
          name: "updated_before",
          type: "string"
        },
        {
          name: "updated_after",
          type: "string"
        },
        {
          name: "include_pending_delete",
          type: "string"
        },
        {
          name: "wiki_checksum_failed",
          type: "string"
        },
        {
          name: "repository_checksum_failed",
          type: "string"
        },
        {
          name: "include_hidden",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "simple",
          type: "string"
        },
        {
          name: "with_custom_attributes",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{order_by:string,sort:string,archived:string,visibility:string,search:string,search_namespaces:string,owned:string,starred:string,imported:string,membership:string,with_issues_enabled:string,with_merge_requests_enabled:string,with_programming_language:string,min_access_level:string,id_after:string,id_before:string,last_activity_after:string,last_activity_before:string,repository_storage:string,topic:string,topic_id:string,updated_before:string,updated_after:string,include_pending_delete:string,wiki_checksum_failed:string,repository_checksum_failed:string,include_hidden:string,page:string,per_page:string,simple:string,with_custom_attributes:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:{value:{}},enabled:{value:{}},keep_n:{value:{}},older_than:{value:{}},name_regex:{value:{}},name_regex_keep:{value:{}},next_run_at:{value:{}}},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:{value:{}},storage_size:{value:{}},repository_size:{value:{}},wiki_size:{value:{}},lfs_objects_size:{value:{}},job_artifacts_size:{value:{}},pipeline_artifacts_size:{value:{}},packages_size:{value:{}},snippets_size:{value:{}},uploads_size:{value:{}},container_registry_size:{value:{}}},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string},{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:{value:{}},enabled:{value:{}},keep_n:{value:{}},older_than:{value:{}},name_regex:{value:{}},name_regex_keep:{value:{}},next_run_at:{value:{}}},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:{value:{}},description:{value:{}},name:{value:{}},name_with_namespace:{value:{}},path:{value:{}},path_with_namespace:{value:{}},created_at:{value:{}},default_branch:{value:{}},tag_list:{value:{}},topics:{value:{}},ssh_url_to_repo:{value:{}},http_url_to_repo:{value:{}},web_url:{value:{}},readme_url:{value:{}},forks_count:{value:{}},license_url:{value:{}},license:{value:{}},avatar_url:{value:{}},star_count:{value:{}},last_activity_at:{value:{}},namespace:{value:{}},custom_attributes:{value:{}},repository_storage:{value:{}}},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:{value:{}},storage_size:{value:{}},repository_size:{value:{}},wiki_size:{value:{}},lfs_objects_size:{value:{}},job_artifacts_size:{value:{}},pipeline_artifacts_size:{value:{}},packages_size:{value:{}},snippets_size:{value:{}},uploads_size:{value:{}},container_registry_size:{value:{}}},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  pages_access: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/pages_access",
      resource: "pages_access",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Check pages access of this project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  archive: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/archive",
      resource: "archive",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Archive a project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  unarchive: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/unarchive",
      resource: "unarchive",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Unarchive a project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  star: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/star",
      resource: "star",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Star a project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:304},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  unstar: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/unstar",
      resource: "unstar",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Unstar a project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:304},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  starrers: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/starrers",
      resource: "starrers",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the users who starred a project",
      query: [
        {
          name: "search",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{search:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}]},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  languages: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/languages",
      resource: "languages",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Get languages in project repository",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  share: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/share",
      resource: "share",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Share the project with a group",
      query: [],
      data: {
        mode: "raw",
        raw: {
          group_id: "number",
          group_access: "number",
          expires_at: "date"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{group_id:number,group_access:number,expires_at:date},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,project_id:number,group_id:number,group_access:number,expires_at:date}},{code:400},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/share/:group_id",
      resource: "share",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "group_id",
          type: "string"
        }
      ],
      headers: {},
      description: "Remove a group share",
      query: [],
      data: null,
      /** @param {{params:{id:string,group_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  import_project_members: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/import_project_members/:project_id",
      resource: "import_project_members",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "project_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 14.2",
      query: [],
      data: null,
      /** @param {{params:{id:string,project_id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403},{code:404},{code:422}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  uploads: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/uploads",
      resource: "uploads",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Upload a file",
      query: [],
      data: {
        mode: "raw",
        raw: {
          file: "binary"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{file:binary},clientOptions:{}}} requestOptions * @return {[{code:201,data:{alt:string,url:string,full_path:string,markdown:string}},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    authorize: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/uploads/authorize",
        resource: "authorize",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {},
        description: "This feature was introduced in GitLab 13.11",
        query: [],
        data: null,
        /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  users: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/users",
      resource: "users",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the users list of a project",
      query: [
        {
          name: "search",
          type: "string"
        },
        {
          name: "skip_users",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{search:string,skip_users:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string}]},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  groups: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/groups",
      resource: "groups",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get ancestor and shared groups for a project",
      query: [
        {
          name: "search",
          type: "string"
        },
        {
          name: "skip_groups",
          type: "string"
        },
        {
          name: "with_shared",
          type: "string"
        },
        {
          name: "shared_visible_only",
          type: "string"
        },
        {
          name: "shared_min_access_level",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{search:string,skip_groups:string,with_shared:string,shared_visible_only:string,shared_min_access_level:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string},{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string}]},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  housekeeping: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/housekeeping",
      resource: "housekeeping",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json"
      },
      description: "This feature was introduced in GitLab 9.0.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          task: "eager"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{task:eager},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:403},{code:409}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    }
  },
  repository_size: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/repository_size",
      resource: "repository_size",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 15.0.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201},{code:401},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  transfer: {
    put: {
      method: "put",
      url: "api/v4/projects/:id/transfer",
      resource: "transfer",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Transfer a project to a new namespace",
      query: [],
      data: {
        mode: "raw",
        raw: {
          namespace: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{namespace:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:400},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    }
  },
  transfer_locations: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/transfer_locations",
      resource: "transfer_locations",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get the namespaces to where the project can be transferred",
      query: [
        {
          name: "search",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{search:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string},{id:string,web_url:string,name:string,avatar_url:string,full_name:string,full_path:string}]},{code:403}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    }
  },
  storage: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/storage",
      resource: "storage",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Show the storage information",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{disk_path:string,project_id:number,repository_storage:string,created_at:dateTime}},{code:403}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  restore: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/restore",
      resource: "restore",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Restore a project",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  protected_branches: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/protected_branches",
      resource: "protected_branches",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a project's protected branches",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "search",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,search:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,name:string,push_access_levels:[{value:{}},{value:{}}],merge_access_levels:[{value:{}},{value:{}}],allow_force_push:boolean,unprotect_access_levels:[{value:{}},{value:{}}],code_owner_approval_required:boolean,inherited:boolean},{id:number,name:string,push_access_levels:[{value:{}},{value:{}}],merge_access_levels:[{value:{}},{value:{}}],allow_force_push:boolean,unprotect_access_levels:[{value:{}},{value:{}}],code_owner_approval_required:boolean,inherited:boolean}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/protected_branches",
      resource: "protected_branches",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Protect a single branch",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          push_access_level: "number",
          merge_access_level: "number",
          allow_force_push: false,
          unprotect_access_level: "number",
          allowed_to_push: [
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            },
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            }
          ],
          allowed_to_merge: [
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            },
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            }
          ],
          allowed_to_unprotect: [
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            },
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            }
          ],
          code_owner_approval_required: false
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,push_access_level:number,merge_access_level:number,allow_force_push:false,unprotect_access_level:number,allowed_to_push:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_merge:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_unprotect:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],code_owner_approval_required:false},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}},{code:401},{code:404},{code:409},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/protected_branches/:name",
      resource: "protected_branches",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a single protected branch",
      query: [],
      data: null,
      /** @param {{params:{id:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    patch: {
      method: "patch",
      url: "api/v4/projects/:id/protected_branches/:name",
      resource: "protected_branches",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Update a protected branch",
      query: [],
      data: {
        mode: "raw",
        raw: {
          allow_force_push: "boolean",
          unprotect_access_level: "number",
          allowed_to_push: [
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            },
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            }
          ],
          allowed_to_merge: [
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            },
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            }
          ],
          allowed_to_unprotect: [
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            },
            {
              access_level: "number",
              user_id: "number",
              group_id: "number",
              id: "number",
              _destroy: "boolean"
            }
          ],
          code_owner_approval_required: false
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,name:string},data:{allow_force_push:boolean,unprotect_access_level:number,allowed_to_push:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_merge:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],allowed_to_unprotect:[{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean},{access_level:number,user_id:number,group_id:number,id:number,_destroy:boolean}],code_owner_approval_required:false},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,push_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],merge_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],allow_force_push:boolean,unprotect_access_levels:[{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number},{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}],code_owner_approval_required:boolean,inherited:boolean}},{code:400},{code:401},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/protected_branches/:name",
      resource: "protected_branches",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      headers: {},
      description: "Unprotect a single branch",
      query: [],
      data: null,
      /** @param {{params:{id:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  protected_tags: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/protected_tags",
      resource: "protected_tags",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.3.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{name:string,create_access_levels:{id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},deploy_key_id:{value:{}},user_id:{value:{}},group_id:{value:{}}}},{name:string,create_access_levels:{id:{value:{}},access_level:{value:{}},access_level_description:{value:{}},deploy_key_id:{value:{}},user_id:{value:{}},group_id:{value:{}}}}]},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/protected_tags",
      resource: "protected_tags",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.3.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          create_access_level: "number",
          allowed_to_create: [
            {
              access_level: "number",
              user_id: "number",
              group_id: "number"
            },
            {
              access_level: "number",
              user_id: "number",
              group_id: "number"
            }
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,create_access_level:number,allowed_to_create:[{access_level:number,user_id:number,group_id:number},{access_level:number,user_id:number,group_id:number}]},clientOptions:{}}} requestOptions * @return {[{code:201,data:{name:string,create_access_levels:{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}}},{code:403},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/protected_tags/:name",
      resource: "protected_tags",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 11.3.",
      query: [],
      data: null,
      /** @param {{params:{id:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,create_access_levels:{id:number,access_level:number,access_level_description:string,deploy_key_id:number,user_id:number,group_id:number}}},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/protected_tags/:name",
      resource: "protected_tags",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "name",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 11.3.",
      query: [],
      data: null,
      /** @param {{params:{id:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404},{code:412}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  releases: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/releases",
      resource: "releases",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Returns a paginated list of releases. This feature was introduced in GitLab 11.7.",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "order_by",
          type: "string"
        },
        {
          name: "sort",
          type: "string"
        },
        {
          name: "include_html_description",
          type: "string"
        },
        {
          name: "updated_before",
          type: "string"
        },
        {
          name: "updated_after",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,order_by:string,sort:string,include_html_description:string,updated_before:string,updated_after:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{name:string,tag_name:string,description:string,created_at:dateTime,released_at:dateTime,upcoming_release:boolean,description_html:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},milestones:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}},issue_stats:{value:{}}},commit_path:string,tag_path:string,assets:{count:number,sources:{value:{}},links:{value:{}}},evidences:{sha:{value:{}},filepath:{value:{}},collected_at:{value:{}}},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}},{name:string,tag_name:string,description:string,created_at:dateTime,released_at:dateTime,upcoming_release:boolean,description_html:string,author:{id:{value:{}},username:{value:{}},name:{value:{}},state:{value:{}},locked:{value:{}},avatar_url:{value:{}},avatar_path:{value:{}},custom_attributes:{value:{}},web_url:{value:{}}},commit:{id:{value:{}},short_id:{value:{}},created_at:{value:{}},parent_ids:{value:{}},title:{value:{}},message:{value:{}},author_name:{value:{}},author_email:{value:{}},authored_date:{value:{}},committer_name:{value:{}},committer_email:{value:{}},committed_date:{value:{}},trailers:{value:{}},extended_trailers:{value:{}},web_url:{value:{}}},milestones:{id:{value:{}},iid:{value:{}},project_id:{value:{}},group_id:{value:{}},title:{value:{}},description:{value:{}},state:{value:{}},created_at:{value:{}},updated_at:{value:{}},due_date:{value:{}},start_date:{value:{}},expired:{value:{}},web_url:{value:{}},issue_stats:{value:{}}},commit_path:string,tag_path:string,assets:{count:number,sources:{value:{}},links:{value:{}}},evidences:{sha:{value:{}},filepath:{value:{}},collected_at:{value:{}}},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/releases",
      resource: "releases",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Creates a release. Developer level access to the project is required to create a release. This feature was introduced in GitLab 11.7.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          tag_name: "string",
          tag_message: "string",
          name: "string",
          description: "string",
          ref: "string",
          assets: {
            links: [
              {
                name: "string",
                url: "string",
                direct_asset_path: "string",
                filepath: "string",
                link_type: "string"
              },
              {
                name: "string",
                url: "string",
                direct_asset_path: "string",
                filepath: "string",
                link_type: "string"
              }
            ]
          },
          milestones: [
            "string",
            "string"
          ],
          milestone_ids: "string",
          released_at: "dateTime",
          legacy_catalog_publish: "boolean"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{tag_name:string,tag_message:string,name:string,description:string,ref:string,assets:{links:[{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string},{name:string,url:string,direct_asset_path:string,filepath:string,link_type:string}]},milestones:[string,string],milestone_ids:string,released_at:dateTime,legacy_catalog_publish:boolean},clientOptions:{}}} requestOptions * @return {[{code:201,data:{name:string,tag_name:string,description:string,created_at:dateTime,released_at:dateTime,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:dateTime},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:400},{code:401},{code:403},{code:404},{code:409},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/releases/:tag_name",
      resource: "releases",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "tag_name",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Gets a release for the given tag. This feature was introduced in GitLab 11.7.",
      query: [
        {
          name: "include_html_description",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,tag_name:string},query:{include_html_description:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,tag_name:string,description:string,created_at:dateTime,released_at:dateTime,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:dateTime},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/releases/:tag_name",
      resource: "releases",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "tag_name",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates a release. Developer level access to the project is required to update a release. This feature was introduced in GitLab 11.7.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          description: "string",
          released_at: "dateTime",
          milestones: [
            "string",
            "string"
          ],
          milestone_ids: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,tag_name:string},data:{name:string,description:string,released_at:dateTime,milestones:[string,string],milestone_ids:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,tag_name:string,description:string,created_at:dateTime,released_at:dateTime,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:dateTime},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/releases/:tag_name",
      resource: "releases",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "tag_name",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Delete a release. Deleting a release doesn't delete the associated tag. Maintainer level access to the project is required to delete a release. This feature was introduced in GitLab 11.7.",
      query: [],
      data: null,
      /** @param {{params:{id:string,tag_name:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{name:string,tag_name:string,description:string,created_at:dateTime,released_at:dateTime,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:dateTime},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    downloads: {
      "*direct_asset_path": {
        get: {
          method: "get",
          url: "api/v4/projects/:id/releases/:tag_name/downloads/*direct_asset_path",
          resource: "*direct_asset_path",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            }
          ],
          headers: {},
          description: "This feature was introduced in GitLab 15.4.",
          query: [
            {
              name: "direct_asset_path",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,tag_name:string},query:{direct_asset_path:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      }
    },
    evidence: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/releases/:tag_name/evidence",
        resource: "evidence",
        variable: [
          {
            name: "tag_name",
            type: "string"
          },
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Creates an evidence for an existing Release. This feature was introduced in GitLab 12.10.",
        query: [],
        data: null,
        /** @param {{params:{tag_name:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{name:string,tag_name:string,description:string,created_at:dateTime,released_at:dateTime,upcoming_release:boolean,description_html:string,author:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},commit:{id:string,short_id:string,created_at:dateTime,parent_ids:[string,string],title:string,message:string,author_name:string,author_email:string,authored_date:dateTime,committer_name:string,committer_email:string,committed_date:dateTime,trailers:object,extended_trailers:object,web_url:string},milestones:{id:string,iid:string,project_id:string,group_id:string,title:string,description:string,state:string,created_at:string,updated_at:string,due_date:string,start_date:string,expired:string,web_url:string,issue_stats:{total:string,closed:string}},commit_path:string,tag_path:string,assets:{count:number,sources:{format:string,url:string},links:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},evidences:{sha:string,filepath:string,collected_at:dateTime},_links:{closed_issues_url:string,closed_merge_requests_url:string,edit_url:string,merged_merge_requests_url:string,opened_issues_url:string,opened_merge_requests_url:string,self:string}}},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    },
    assets: {
      links: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/releases/:tag_name/assets/links",
          resource: "links",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get assets as links from a release. This feature was introduced in GitLab 11.7.",
          query: [
            {
              name: "page",
              type: "string"
            },
            {
              name: "per_page",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,tag_name:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,name:string,url:string,direct_asset_url:string,link_type:string},{id:number,name:string,url:string,direct_asset_url:string,link_type:string}]},{code:401},{code:404}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        },
        post: {
          method: "post",
          url: "api/v4/projects/:id/releases/:tag_name/assets/links",
          resource: "links",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          description: "Create an asset as a link from a release. This feature was introduced in GitLab 11.7.",
          query: [],
          data: {
            mode: "raw",
            raw: {
              name: "string",
              url: "string",
              direct_asset_path: "string",
              filepath: "string",
              link_type: "other"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,tag_name:string},data:{name:string,url:string,direct_asset_path:string,filepath:string,link_type:other},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:400},{code:401}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        },
        getOne: {
          method: "get",
          url: "api/v4/projects/:id/releases/:tag_name/assets/links/:link_id",
          resource: "links",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            },
            {
              name: "link_id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get an asset as a link from a release. This feature was introduced in GitLab 11.7.",
          query: [],
          data: null,
          /** @param {{params:{id:string,tag_name:string,link_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:401},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        },
        put: {
          method: "put",
          url: "api/v4/projects/:id/releases/:tag_name/assets/links/:link_id",
          resource: "links",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            },
            {
              name: "link_id",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          description: "Update an asset as a link from a release. This feature was introduced in GitLab 11.7.",
          query: [],
          data: {
            mode: "raw",
            raw: {
              name: "string",
              url: "string",
              direct_asset_path: "string",
              filepath: "string",
              link_type: "other"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,tag_name:string,link_id:string},data:{name:string,url:string,direct_asset_path:string,filepath:string,link_type:other},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:400},{code:401}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        },
        delete: {
          method: "delete",
          url: "api/v4/projects/:id/releases/:tag_name/assets/links/:link_id",
          resource: "links",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "tag_name",
              type: "string"
            },
            {
              name: "link_id",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Deletes an asset as a link from a release. This feature was introduced in GitLab 11.7.",
          query: [],
          data: null,
          /** @param {{params:{id:string,tag_name:string,link_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,name:string,url:string,direct_asset_url:string,link_type:string}},{code:400},{code:401}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    },
    permalink: {
      "latest(": {
        ")(*suffix_path)": {
          get: {
            method: "get",
            url: "api/v4/projects/:id/releases/permalink/latest(/)(*suffix_path)",
            resource: ")(*suffix_path)",
            variable: [
              {
                name: "id",
                type: "string"
              }
            ],
            headers: {},
            description: "This feature was introduced in GitLab 15.4.",
            query: [
              {
                name: "suffix_path",
                type: "string"
              }
            ],
            data: null,
            /** @param {{params:{id:string},query:{suffix_path:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:401},{code:404}]} */
            send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
          }
        }
      }
    }
  },
  remote_mirrors: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/remote_mirrors",
      resource: "remote_mirrors",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "List the project's remote mirrors",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,enabled:boolean,url:string,update_status:string,last_update_at:dateTime,last_update_started_at:dateTime,last_successful_update_at:dateTime,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string},{id:number,enabled:boolean,url:string,update_status:string,last_update_at:dateTime,last_update_started_at:dateTime,last_successful_update_at:dateTime,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/remote_mirrors",
      resource: "remote_mirrors",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create remote mirror for a project",
      query: [],
      data: {
        mode: "raw",
        raw: {
          url: "string",
          enabled: "boolean",
          auth_method: "string",
          keep_divergent_refs: "boolean",
          only_protected_branches: "boolean",
          mirror_branch_regex: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{url:string,enabled:boolean,auth_method:string,keep_divergent_refs:boolean,only_protected_branches:boolean,mirror_branch_regex:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,enabled:boolean,url:string,update_status:string,last_update_at:dateTime,last_update_started_at:dateTime,last_successful_update_at:dateTime,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/remote_mirrors/:mirror_id",
      resource: "remote_mirrors",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "mirror_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a single remote mirror",
      query: [],
      data: null,
      /** @param {{params:{id:string,mirror_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,enabled:boolean,url:string,update_status:string,last_update_at:dateTime,last_update_started_at:dateTime,last_successful_update_at:dateTime,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/remote_mirrors/:mirror_id",
      resource: "remote_mirrors",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "mirror_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Update the attributes of a single remote mirror",
      query: [],
      data: {
        mode: "raw",
        raw: {
          enabled: "boolean",
          auth_method: "string",
          keep_divergent_refs: "boolean",
          only_protected_branches: "boolean",
          mirror_branch_regex: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,mirror_id:string},data:{enabled:boolean,auth_method:string,keep_divergent_refs:boolean,only_protected_branches:boolean,mirror_branch_regex:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,enabled:boolean,url:string,update_status:string,last_update_at:dateTime,last_update_started_at:dateTime,last_successful_update_at:dateTime,last_error:number,only_protected_branches:boolean,keep_divergent_refs:boolean,auth_method:string,mirror_branch_regex:string}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/remote_mirrors/:mirror_id",
      resource: "remote_mirrors",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "mirror_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 14.10",
      query: [],
      data: null,
      /** @param {{params:{id:string,mirror_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    sync: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/remote_mirrors/:mirror_id/sync",
        resource: "sync",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "mirror_id",
            type: "string"
          }
        ],
        headers: {},
        description: "Triggers a push mirror operation",
        query: [],
        data: null,
        /** @param {{params:{id:string,mirror_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:401},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  access_tokens: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/access_tokens",
      resource: "access_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.9.",
      query: [],
      data: null,
      /** @param {{params:{id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,name:string,revoked:boolean,created_at:dateTime,user_id:number,last_used_at:dateTime,active:boolean,expires_at:dateTime,access_level:number},{id:number,name:string,revoked:boolean,created_at:dateTime,user_id:number,last_used_at:dateTime,active:boolean,expires_at:dateTime,access_level:number}]}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/access_tokens",
      resource: "access_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.9.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          scopes: [
            "string",
            "string"
          ],
          expires_at: "2025-05-23T21:13:09.000Z",
          access_level: 40
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,scopes:[string,string],expires_at:2025-05-23T21:13:09.000Z,access_level:40},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,revoked:boolean,created_at:dateTime,user_id:number,last_used_at:dateTime,active:boolean,expires_at:dateTime,access_level:number,token:string}}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/access_tokens/:token_id",
      resource: "access_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "token_id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 14.10.",
      query: [],
      data: null,
      /** @param {{params:{id:string,token_id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,name:string,revoked:boolean,created_at:dateTime,user_id:number,last_used_at:dateTime,active:boolean,expires_at:dateTime,access_level:number}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/access_tokens/:token_id",
      resource: "access_tokens",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "token_id",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in GitLab 13.9.",
      query: [],
      data: null,
      /** @param {{params:{id:string,token_id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    rotate: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/access_tokens/:token_id/rotate",
        resource: "rotate",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "token_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 16.0.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            expires_at: "date"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string,token_id:string},data:{expires_at:date},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,name:string,revoked:boolean,created_at:dateTime,user_id:number,last_used_at:dateTime,active:boolean,expires_at:dateTime,access_level:number,token:string}}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  wikis: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/wikis",
      resource: "wikis",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of wiki pages",
      query: [
        {
          name: "with_content",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{with_content:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{format:string,slug:string,title:string},{format:string,slug:string,title:string}]},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/wikis",
      resource: "wikis",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create a wiki page",
      query: [],
      data: {
        mode: "raw",
        raw: {
          title: "string",
          content: "string",
          front_matter: {
            title: "string"
          },
          format: "markdown"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{title:string,content:string,front_matter:{title:string},format:markdown},clientOptions:{}}} requestOptions * @return {[{code:201,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:object}},{code:400},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/wikis/:slug",
      resource: "wikis",
      variable: [
        {
          name: "slug",
          type: "string"
        },
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a wiki page",
      query: [
        {
          name: "version",
          type: "string"
        },
        {
          name: "render_html",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{slug:string,id:string},query:{version:string,render_html:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:object}},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/wikis/:slug",
      resource: "wikis",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "slug",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Update a wiki page",
      query: [],
      data: {
        mode: "raw",
        raw: {
          title: "string",
          front_matter: {
            title: "string"
          },
          content: "string",
          format: "markdown"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,slug:string},data:{title:string,front_matter:{title:string},content:string,format:markdown},clientOptions:{}}} requestOptions * @return {[{code:200,data:{format:string,slug:string,title:string,content:string,encoding:string,front_matter:object}},{code:400},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/wikis/:slug",
      resource: "wikis",
      variable: [
        {
          name: "slug",
          type: "string"
        },
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {},
      description: "Delete a wiki page",
      query: [],
      data: null,
      /** @param {{params:{slug:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:400},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    attachments: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/wikis/attachments",
        resource: "attachments",
        variable: [
          {
            name: "id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        description: "This feature was introduced in GitLab 11.3.",
        query: [],
        data: {
          mode: "raw",
          raw: {
            file: "binary",
            branch: "string"
          },
          options: {
            raw: {
              language: "json"
            }
          }
        },
        /** @param {{params:{id:string},data:{file:binary,branch:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{file_name:string,file_path:string,branch:string,link:{url:string,markdown:string}}},{code:404}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      }
    }
  },
  alert_management_alerts: {
    metric_images: {
      post: {
        method: "post",
        url: "api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images",
        resource: "metric_images",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "alert_iid",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "multipart/form-data",
          Accept: "application/json"
        },
        description: "Upload a metric image for an alert",
        query: [],
        data: {
          mode: "formdata",
          formdata: {
            url: "string",
            url_text: "string"
          }
        },
        /** @param {{params:{id:string,alert_iid:string},data:{url:string,url_text:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,created_at:dateTime,filename:string,file_path:string,url:string,url_text:string}},{code:403}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      get: {
        method: "get",
        url: "api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images",
        resource: "metric_images",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "alert_iid",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Metric Images for alert",
        query: [],
        data: null,
        /** @param {{params:{id:string,alert_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,created_at:dateTime,filename:string,file_path:string,url:string,url_text:string},{id:number,created_at:dateTime,filename:string,file_path:string,url:string,url_text:string}]},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      authorize: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/authorize",
          resource: "authorize",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "alert_iid",
              type: "string"
            }
          ],
          headers: {},
          description: "Workhorse authorize metric image file upload",
          query: [],
          data: null,
          /** @param {{params:{id:string,alert_iid:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      },
      put: {
        method: "put",
        url: "api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/:metric_image_id",
        resource: "metric_images",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "alert_iid",
            type: "string"
          },
          {
            name: "metric_image_id",
            type: "string"
          }
        ],
        headers: {
          "Content-Type": "multipart/form-data",
          Accept: "application/json"
        },
        description: "Update a metric image for an alert",
        query: [],
        data: {
          mode: "formdata",
          formdata: {
            url: "string",
            url_text: "string"
          }
        },
        /** @param {{params:{id:string,alert_iid:string,metric_image_id:string},data:{url:string,url_text:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,created_at:dateTime,filename:string,file_path:string,url:string,url_text:string}},{code:403},{code:422}]} */
        send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/alert_management_alerts/:alert_iid/metric_images/:metric_image_id",
        resource: "metric_images",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "alert_iid",
            type: "string"
          },
          {
            name: "metric_image_id",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "Remove a metric image for an alert",
        query: [],
        data: null,
        /** @param {{params:{id:string,alert_iid:string,metric_image_id:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{id:number,created_at:dateTime,filename:string,file_path:string,url:string,url_text:string}},{code:403},{code:422}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  feature_flags: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/feature_flags",
      resource: "feature_flags",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Gets all feature flags of the requested project. This feature was introduced in GitLab 12.5.",
      query: [
        {
          name: "scope",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{scope:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{name:string,description:string,active:boolean,version:string,created_at:dateTime,updated_at:dateTime,scopes:string,strategies:{id:{value:{}},name:{value:{}},parameters:{value:{}},scopes:{value:{}},user_list:{value:{}}}},{name:string,description:string,active:boolean,version:string,created_at:dateTime,updated_at:dateTime,scopes:string,strategies:{id:{value:{}},name:{value:{}},parameters:{value:{}},scopes:{value:{}},user_list:{value:{}}}}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/feature_flags",
      resource: "feature_flags",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Creates a new feature flag. This feature was introduced in GitLab 12.5.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          description: "string",
          active: "boolean",
          version: "string",
          strategies: [
            {
              name: "string",
              parameters: "string",
              user_list_id: "number",
              scopes: [
                {
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                },
                {
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                }
              ]
            },
            {
              name: "string",
              parameters: "string",
              user_list_id: "number",
              scopes: [
                {
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                },
                {
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                }
              ]
            }
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,description:string,active:boolean,version:string,strategies:[{name:string,parameters:string,user_list_id:number,scopes:[{environment_scope:{value:Error: Too many levels of nesting to fake this schema}},{environment_scope:{value:Error: Too many levels of nesting to fake this schema}}]},{name:string,parameters:string,user_list_id:number,scopes:[{environment_scope:{value:Error: Too many levels of nesting to fake this schema}},{environment_scope:{value:Error: Too many levels of nesting to fake this schema}}]}]},clientOptions:{}}} requestOptions * @return {[{code:201,data:{name:string,description:string,active:boolean,version:string,created_at:dateTime,updated_at:dateTime,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:400},{code:401},{code:403}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/feature_flags/:feature_flag_name",
      resource: "feature_flags",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "feature_flag_name",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Gets a single feature flag. This feature was introduced in GitLab 12.5.",
      query: [],
      data: null,
      /** @param {{params:{id:string,feature_flag_name:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,description:string,active:boolean,version:string,created_at:dateTime,updated_at:dateTime,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/feature_flags/:feature_flag_name",
      resource: "feature_flags",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "feature_flag_name",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates a feature flag. This feature was introduced in GitLab 13.2.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          description: "string",
          active: "boolean",
          strategies: [
            {
              id: "number",
              name: "string",
              parameters: "string",
              user_list_id: "number",
              _destroy: "boolean",
              scopes: [
                {
                  id: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  _destroy: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                },
                {
                  id: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  _destroy: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                }
              ]
            },
            {
              id: "number",
              name: "string",
              parameters: "string",
              user_list_id: "number",
              _destroy: "boolean",
              scopes: [
                {
                  id: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  _destroy: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                },
                {
                  id: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  environment_scope: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  },
                  _destroy: {
                    value: "Error: Too many levels of nesting to fake this schema"
                  }
                }
              ]
            }
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,feature_flag_name:string},data:{name:string,description:string,active:boolean,strategies:[{id:number,name:string,parameters:string,user_list_id:number,_destroy:boolean,scopes:[{id:{value:Error: Too many levels of nesting to fake this schema},environment_scope:{value:Error: Too many levels of nesting to fake this schema},_destroy:{value:Error: Too many levels of nesting to fake this schema}},{id:{value:Error: Too many levels of nesting to fake this schema},environment_scope:{value:Error: Too many levels of nesting to fake this schema},_destroy:{value:Error: Too many levels of nesting to fake this schema}}]},{id:number,name:string,parameters:string,user_list_id:number,_destroy:boolean,scopes:[{id:{value:Error: Too many levels of nesting to fake this schema},environment_scope:{value:Error: Too many levels of nesting to fake this schema},_destroy:{value:Error: Too many levels of nesting to fake this schema}},{id:{value:Error: Too many levels of nesting to fake this schema},environment_scope:{value:Error: Too many levels of nesting to fake this schema},_destroy:{value:Error: Too many levels of nesting to fake this schema}}]}]},clientOptions:{}}} requestOptions * @return {[{code:200,data:{name:string,description:string,active:boolean,version:string,created_at:dateTime,updated_at:dateTime,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:401},{code:403},{code:404},{code:422}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/feature_flags/:feature_flag_name",
      resource: "feature_flags",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "feature_flag_name",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Deletes a feature flag. This feature was introduced in GitLab 12.5.",
      query: [],
      data: null,
      /** @param {{params:{id:string,feature_flag_name:string},clientOptions:{}}} requestOptions * @return {[{code:204,data:{name:string,description:string,active:boolean,version:string,created_at:dateTime,updated_at:dateTime,scopes:string,strategies:{id:number,name:string,parameters:string,scopes:{id:{value:{}},environment_scope:{value:{}}},user_list:{id:{value:{}},iid:{value:{}},name:{value:{}},user_xids:{value:{}}}}}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  feature_flags_user_lists: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/feature_flags_user_lists",
      resource: "feature_flags_user_lists",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Gets all feature flag user lists for the requested project. This feature was introduced in GitLab 12.10.",
      query: [
        {
          name: "search",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{search:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:dateTime,updated_at:dateTime,path:string,edit_path:string},{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:dateTime,updated_at:dateTime,path:string,edit_path:string}]},{code:401},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    post: {
      method: "post",
      url: "api/v4/projects/:id/feature_flags_user_lists",
      resource: "feature_flags_user_lists",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Creates a feature flag user list. This feature was introduced in GitLab 12.10.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          user_xids: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{name:string,user_xids:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:dateTime,updated_at:dateTime,path:string,edit_path:string}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/feature_flags_user_lists/:iid",
      resource: "feature_flags_user_lists",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "iid",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Gets a feature flag user list. This feature was introduced in GitLab 12.10.",
      query: [],
      data: null,
      /** @param {{params:{id:string,iid:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:dateTime,updated_at:dateTime,path:string,edit_path:string}},{code:401},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/feature_flags_user_lists/:iid",
      resource: "feature_flags_user_lists",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "iid",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Updates a feature flag user list. This feature was introduced in GitLab 12.10.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          user_xids: "string"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,iid:string},data:{name:string,user_xids:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,iid:number,name:string,user_xids:string,project_id:number,created_at:dateTime,updated_at:dateTime,path:string,edit_path:string}},{code:400},{code:401},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/feature_flags_user_lists/:iid",
      resource: "feature_flags_user_lists",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "iid",
          type: "string"
        }
      ],
      headers: {},
      description: "Deletes a feature flag user list. This feature was introduced in GitLab 12.10.",
      query: [],
      data: null,
      /** @param {{params:{id:string,iid:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:401},{code:404},{code:409}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  debian_distributions: {
    post: {
      method: "post",
      url: "api/v4/projects/:id/debian_distributions",
      resource: "debian_distributions",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in 14.0",
      query: [],
      data: {
        mode: "raw",
        raw: {
          codename: "string",
          suite: "string",
          origin: "string",
          label: "string",
          version: "string",
          description: "string",
          valid_time_duration_seconds: "number",
          components: [
            "string",
            "string"
          ],
          architectures: [
            "string",
            "string"
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string},data:{codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    get: {
      method: "get",
      url: "api/v4/projects/:id/debian_distributions",
      resource: "debian_distributions",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in 14.0",
      query: [
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        },
        {
          name: "codename",
          type: "string"
        },
        {
          name: "suite",
          type: "string"
        },
        {
          name: "origin",
          type: "string"
        },
        {
          name: "label",
          type: "string"
        },
        {
          name: "version",
          type: "string"
        },
        {
          name: "description",
          type: "string"
        },
        {
          name: "valid_time_duration_seconds",
          type: "string"
        },
        {
          name: "components",
          type: "string"
        },
        {
          name: "architectures",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{page:string,per_page:string,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:string,components:string,architectures:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/debian_distributions/:codename",
      resource: "debian_distributions",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "codename",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "This feature was introduced in 14.0",
      query: [],
      data: null,
      /** @param {{params:{id:string,codename:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:401},{code:403},{code:404}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    },
    put: {
      method: "put",
      url: "api/v4/projects/:id/debian_distributions/:codename",
      resource: "debian_distributions",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "codename",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "This feature was introduced in 14.0",
      query: [],
      data: {
        mode: "raw",
        raw: {
          suite: "string",
          origin: "string",
          label: "string",
          version: "string",
          description: "string",
          valid_time_duration_seconds: "number",
          components: [
            "string",
            "string"
          ],
          architectures: [
            "string",
            "string"
          ]
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{id:string,codename:string},data:{suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    },
    delete: {
      method: "delete",
      url: "api/v4/projects/:id/debian_distributions/:codename",
      resource: "debian_distributions",
      variable: [
        {
          name: "id",
          type: "string"
        },
        {
          name: "codename",
          type: "string"
        }
      ],
      headers: {},
      description: "This feature was introduced in 14.0",
      query: [
        {
          name: "suite",
          type: "string"
        },
        {
          name: "origin",
          type: "string"
        },
        {
          name: "label",
          type: "string"
        },
        {
          name: "version",
          type: "string"
        },
        {
          name: "description",
          type: "string"
        },
        {
          name: "valid_time_duration_seconds",
          type: "string"
        },
        {
          name: "components",
          type: "string"
        },
        {
          name: "architectures",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string,codename:string},query:{suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:string,components:string,architectures:string},clientOptions:{}}} requestOptions * @return {[{code:202},{code:400},{code:401},{code:403},{code:404}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    "key.asc": {
      get: {
        method: "get",
        url: "api/v4/projects/:id/debian_distributions/:codename/key.asc",
        resource: "key.asc",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "codename",
            type: "string"
          }
        ],
        headers: {
          Accept: "application/json"
        },
        description: "This feature was introduced in 14.4",
        query: [],
        data: null,
        /** @param {{params:{id:string,codename:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:number,codename:string,suite:string,origin:string,label:string,version:string,description:string,valid_time_duration_seconds:number,components:[string,string],architectures:[string,string]}},{code:401},{code:403},{code:404}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      }
    }
  },
  audit_events: {
    get: {
      method: "get",
      url: "api/v4/projects/:id/audit_events",
      resource: "audit_events",
      variable: [
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a list of audit events in this project.",
      query: [
        {
          name: "created_after",
          type: "string"
        },
        {
          name: "created_before",
          type: "string"
        },
        {
          name: "page",
          type: "string"
        },
        {
          name: "per_page",
          type: "string"
        }
      ],
      data: null,
      /** @param {{params:{id:string},query:{created_after:string,created_before:string,page:string,per_page:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:[{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string},{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string}]}]} */
      send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
    },
    getOne: {
      method: "get",
      url: "api/v4/projects/:id/audit_events/:audit_event_id",
      resource: "audit_events",
      variable: [
        {
          name: "audit_event_id",
          type: "string"
        },
        {
          name: "id",
          type: "string"
        }
      ],
      headers: {
        Accept: "application/json"
      },
      description: "Get a specific audit event in this project.",
      query: [],
      data: null,
      /** @param {{params:{audit_event_id:string,id:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:{id:string,author_id:string,entity_id:string,entity_type:string,details:string,created_at:string}}]} */
      send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
    }
  },
  terraform: {
    state: {
      get: {
        method: "get",
        url: "api/v4/projects/:id/terraform/state/:name",
        resource: "state",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "name",
            type: "string"
          }
        ],
        headers: {},
        description: "Get a Terraform state by its name",
        query: [
          {
            name: "ID",
            type: "string"
          }
        ],
        data: null,
        /** @param {{params:{id:string,name:string},query:{ID:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:204},{code:403},{code:404},{code:422}]} */
        send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
      },
      post: {
        method: "post",
        url: "api/v4/projects/:id/terraform/state/:name",
        resource: "state",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "name",
            type: "string"
          }
        ],
        headers: {},
        description: "Add a new Terraform state or update an existing one",
        query: [],
        data: null,
        /** @param {{params:{id:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:204},{code:403},{code:413},{code:422}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      delete: {
        method: "delete",
        url: "api/v4/projects/:id/terraform/state/:name",
        resource: "state",
        variable: [
          {
            name: "id",
            type: "string"
          },
          {
            name: "name",
            type: "string"
          }
        ],
        headers: {},
        description: "Delete a Terraform state of a certain name",
        query: [],
        data: null,
        /** @param {{params:{id:string,name:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404},{code:422}]} */
        send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
      },
      lock: {
        post: {
          method: "post",
          url: "api/v4/projects/:id/terraform/state/:name/lock",
          resource: "lock",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "name",
              type: "string"
            }
          ],
          headers: {
            "Content-Type": "application/json"
          },
          description: "Lock a Terraform state of a certain name",
          query: [],
          data: {
            mode: "raw",
            raw: {
              ID: "string",
              Operation: "string",
              Info: "string",
              Who: "string",
              Version: "string",
              Created: "string",
              Path: "string"
            },
            options: {
              raw: {
                language: "json"
              }
            }
          },
          /** @param {{params:{id:string,name:string},data:{ID:string,Operation:string,Info:string,Who:string,Version:string,Created:string,Path:string},clientOptions:{}}} requestOptions * @return {[{code:200},{code:403},{code:404},{code:409},{code:422}]} */
          send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
        },
        delete: {
          method: "delete",
          url: "api/v4/projects/:id/terraform/state/:name/lock",
          resource: "lock",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "name",
              type: "string"
            }
          ],
          headers: {},
          description: "Unlock a Terraform state of a certain name",
          query: [
            {
              name: "ID",
              type: "string"
            }
          ],
          data: null,
          /** @param {{params:{id:string,name:string},query:{ID:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404},{code:409},{code:422}]} */
          send({ params = {}, query = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, query, clientOptions }]) }
        }
      },
      versions: {
        get: {
          method: "get",
          url: "api/v4/projects/:id/terraform/state/:name/versions/:serial",
          resource: "versions",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "name",
              type: "string"
            },
            {
              name: "serial",
              type: "string"
            }
          ],
          headers: {
            Accept: "application/json"
          },
          description: "Get a Terraform state version",
          query: [],
          data: null,
          /** @param {{params:{id:string,name:string,serial:string},clientOptions:{}}} requestOptions * @return {[{code:200,data:binary},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        },
        delete: {
          method: "delete",
          url: "api/v4/projects/:id/terraform/state/:name/versions/:serial",
          resource: "versions",
          variable: [
            {
              name: "id",
              type: "string"
            },
            {
              name: "name",
              type: "string"
            },
            {
              name: "serial",
              type: "string"
            }
          ],
          headers: {},
          description: "Delete a Terraform state version",
          query: [],
          data: null,
          /** @param {{params:{id:string,name:string,serial:string},clientOptions:{}}} requestOptions * @return {[{code:204},{code:403},{code:404}]} */
          send({ params = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, clientOptions }]) }
        }
      }
    }
  },
  "remote-import": {
    post: {
      method: "post",
      url: "api/v4/projects/remote-import",
      resource: "remote-import",
      variable: [],
      headers: {
        "Content-Type": "multipart/form-data",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 13.2.",
      query: [],
      data: {
        mode: "formdata",
        formdata: {
          url: "string",
          path: "string",
          name: "string",
          namespace: "string",
          overwrite: "false",
          "override_params[description]": "string",
          "override_params[build_git_strategy]": "string",
          "override_params[build_timeout]": "number",
          "override_params[auto_cancel_pending_pipelines]": "string",
          "override_params[ci_config_path]": "string",
          "override_params[service_desk_enabled]": "boolean",
          "override_params[issues_enabled]": "boolean",
          "override_params[merge_requests_enabled]": "boolean",
          "override_params[wiki_enabled]": "boolean",
          "override_params[jobs_enabled]": "boolean",
          "override_params[snippets_enabled]": "boolean",
          "override_params[issues_access_level]": "string",
          "override_params[repository_access_level]": "string",
          "override_params[merge_requests_access_level]": "string",
          "override_params[forking_access_level]": "string",
          "override_params[wiki_access_level]": "string",
          "override_params[builds_access_level]": "string",
          "override_params[snippets_access_level]": "string",
          "override_params[pages_access_level]": "string",
          "override_params[analytics_access_level]": "string",
          "override_params[container_registry_access_level]": "string",
          "override_params[security_and_compliance_access_level]": "string",
          "override_params[releases_access_level]": "string",
          "override_params[environments_access_level]": "string",
          "override_params[feature_flags_access_level]": "string",
          "override_params[infrastructure_access_level]": "string",
          "override_params[monitor_access_level]": "string",
          "override_params[model_experiments_access_level]": "string",
          "override_params[model_registry_access_level]": "string",
          "override_params[emails_disabled]": "boolean",
          "override_params[emails_enabled]": "boolean",
          "override_params[show_default_award_emojis]": "boolean",
          "override_params[show_diff_preview_in_email]": "boolean",
          "override_params[warn_about_potentially_unwanted_characters]": "boolean",
          "override_params[enforce_auth_checks_on_uploads]": "boolean",
          "override_params[shared_runners_enabled]": "boolean",
          "override_params[group_runners_enabled]": "boolean",
          "override_params[resolve_outdated_diff_discussions]": "boolean",
          "override_params[remove_source_branch_after_merge]": "boolean",
          "override_params[container_registry_enabled]": "boolean",
          "override_params[container_expiration_policy_attributes][cadence]": "string",
          "override_params[container_expiration_policy_attributes][keep_n]": "number",
          "override_params[container_expiration_policy_attributes][older_than]": "string",
          "override_params[container_expiration_policy_attributes][name_regex]": "string",
          "override_params[container_expiration_policy_attributes][name_regex_keep]": "string",
          "override_params[container_expiration_policy_attributes][enabled]": "boolean",
          "override_params[lfs_enabled]": "boolean",
          "override_params[visibility]": "string",
          "override_params[public_builds]": "boolean",
          "override_params[public_jobs]": "boolean",
          "override_params[request_access_enabled]": "boolean",
          "override_params[only_allow_merge_if_pipeline_succeeds]": "boolean",
          "override_params[allow_merge_on_skipped_pipeline]": "boolean",
          "override_params[only_allow_merge_if_all_discussions_are_resolved]": "boolean",
          "override_params[tag_list]": "[\"string\",\"string\"]",
          "override_params[topics]": "[\"string\",\"string\"]",
          "override_params[printing_merge_request_link_enabled]": "boolean",
          "override_params[merge_method]": "string",
          "override_params[suggestion_commit_message]": "string",
          "override_params[merge_commit_template]": "string",
          "override_params[squash_commit_template]": "string",
          "override_params[issue_branch_template]": "string",
          "override_params[initialize_with_readme]": "boolean",
          "override_params[auto_devops_enabled]": "boolean",
          "override_params[auto_devops_deploy_strategy]": "string",
          "override_params[autoclose_referenced_issues]": "boolean",
          "override_params[repository_storage]": "string",
          "override_params[packages_enabled]": "boolean",
          "override_params[squash_option]": "string",
          "override_params[mr_default_target_self]": "boolean",
          "override_params[only_allow_merge_if_all_status_checks_passed]": "boolean",
          "override_params[approvals_before_merge]": "number",
          "override_params[mirror]": "boolean",
          "override_params[mirror_trigger_builds]": "boolean",
          "override_params[external_authorization_classification_label]": "string",
          "override_params[requirements_access_level]": "string",
          "override_params[prevent_merge_without_jira_issue]": "boolean"
        }
      },
      /** @param {{data:{url:string,path:string,name:string,namespace:string,overwrite:false,override_params[description]:string,override_params[build_git_strategy]:string,override_params[build_timeout]:number,override_params[auto_cancel_pending_pipelines]:string,override_params[ci_config_path]:string,override_params[service_desk_enabled]:boolean,override_params[issues_enabled]:boolean,override_params[merge_requests_enabled]:boolean,override_params[wiki_enabled]:boolean,override_params[jobs_enabled]:boolean,override_params[snippets_enabled]:boolean,override_params[issues_access_level]:string,override_params[repository_access_level]:string,override_params[merge_requests_access_level]:string,override_params[forking_access_level]:string,override_params[wiki_access_level]:string,override_params[builds_access_level]:string,override_params[snippets_access_level]:string,override_params[pages_access_level]:string,override_params[analytics_access_level]:string,override_params[container_registry_access_level]:string,override_params[security_and_compliance_access_level]:string,override_params[releases_access_level]:string,override_params[environments_access_level]:string,override_params[feature_flags_access_level]:string,override_params[infrastructure_access_level]:string,override_params[monitor_access_level]:string,override_params[model_experiments_access_level]:string,override_params[model_registry_access_level]:string,override_params[emails_disabled]:boolean,override_params[emails_enabled]:boolean,override_params[show_default_award_emojis]:boolean,override_params[show_diff_preview_in_email]:boolean,override_params[warn_about_potentially_unwanted_characters]:boolean,override_params[enforce_auth_checks_on_uploads]:boolean,override_params[shared_runners_enabled]:boolean,override_params[group_runners_enabled]:boolean,override_params[resolve_outdated_diff_discussions]:boolean,override_params[remove_source_branch_after_merge]:boolean,override_params[container_registry_enabled]:boolean,override_params[container_expiration_policy_attributes][cadence]:string,override_params[container_expiration_policy_attributes][keep_n]:number,override_params[container_expiration_policy_attributes][older_than]:string,override_params[container_expiration_policy_attributes][name_regex]:string,override_params[container_expiration_policy_attributes][name_regex_keep]:string,override_params[container_expiration_policy_attributes][enabled]:boolean,override_params[lfs_enabled]:boolean,override_params[visibility]:string,override_params[public_builds]:boolean,override_params[public_jobs]:boolean,override_params[request_access_enabled]:boolean,override_params[only_allow_merge_if_pipeline_succeeds]:boolean,override_params[allow_merge_on_skipped_pipeline]:boolean,override_params[only_allow_merge_if_all_discussions_are_resolved]:boolean,override_params[tag_list]:[\\string\\,\\string\\],override_params[topics]:[\\string\\,\\string\\],override_params[printing_merge_request_link_enabled]:boolean,override_params[merge_method]:string,override_params[suggestion_commit_message]:string,override_params[merge_commit_template]:string,override_params[squash_commit_template]:string,override_params[issue_branch_template]:string,override_params[initialize_with_readme]:boolean,override_params[auto_devops_enabled]:boolean,override_params[auto_devops_deploy_strategy]:string,override_params[autoclose_referenced_issues]:boolean,override_params[repository_storage]:string,override_params[packages_enabled]:boolean,override_params[squash_option]:string,override_params[mr_default_target_self]:boolean,override_params[only_allow_merge_if_all_status_checks_passed]:boolean,override_params[approvals_before_merge]:number,override_params[mirror]:boolean,override_params[mirror_trigger_builds]:boolean,override_params[external_authorization_classification_label]:string,override_params[requirements_access_level]:string,override_params[prevent_merge_without_jira_issue]:boolean},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:object}},{code:400},{code:401},{code:403},{code:404},{code:429},{code:503}]} */
      send({ data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { data, clientOptions }]) }
    }
  },
  "import-relation": {
    post: {
      method: "post",
      url: "api/v4/projects/import-relation",
      resource: "import-relation",
      variable: [],
      headers: {
        "Content-Type": "multipart/form-data",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 16.11.",
      query: [],
      data: {
        mode: "formdata",
        formdata: {
          path: "string",
          relation: "string",
          "file.path": "string",
          "file.name": "string",
          "file.type": "string",
          "file.size": "number",
          "file.md5": "string",
          "file.sha1": "string",
          "file.sha256": "string",
          "file.etag": "string",
          "file.remote_id": "string",
          "file.remote_url": "string"
        }
      },
      /** @param {{data:{path:string,relation:string,file.path:string,file.name:string,file.type:string,file.size:number,file.md5:string,file.sha1:string,file.sha256:string,file.etag:string,file.remote_id:string,file.remote_url:string},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,project_path:string,relation:string,status:string,created_at:dateTime,updated_at:dateTime}},{code:400},{code:401},{code:403},{code:404},{code:503}]} */
      send({ data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { data, clientOptions }]) }
    },
    authorize: {
      post: {
        method: "post",
        url: "api/v4/projects/import-relation/authorize",
        resource: "authorize",
        variable: [],
        headers: {},
        description: "This feature was introduced in GitLab 16.11",
        query: [],
        data: null,
        /** @param {{clientOptions:{}}} requestOptions * @return {[{code:201}]} */
        send({ clientOptions = {} } = {}) { return request.apply(this, [client, { clientOptions }]) }
      }
    }
  },
  "remote-import-s3": {
    post: {
      method: "post",
      url: "api/v4/projects/remote-import-s3",
      resource: "remote-import-s3",
      variable: [],
      headers: {
        "Content-Type": "multipart/form-data",
        Accept: "application/json"
      },
      description: "This feature was introduced in GitLab 14.9.",
      query: [],
      data: {
        mode: "formdata",
        formdata: {
          region: "string",
          bucket_name: "string",
          file_key: "string",
          access_key_id: "string",
          secret_access_key: "string",
          path: "string",
          name: "string",
          namespace: "string",
          overwrite: "false",
          "override_params[description]": "string",
          "override_params[build_git_strategy]": "string",
          "override_params[build_timeout]": "number",
          "override_params[auto_cancel_pending_pipelines]": "string",
          "override_params[ci_config_path]": "string",
          "override_params[service_desk_enabled]": "boolean",
          "override_params[issues_enabled]": "boolean",
          "override_params[merge_requests_enabled]": "boolean",
          "override_params[wiki_enabled]": "boolean",
          "override_params[jobs_enabled]": "boolean",
          "override_params[snippets_enabled]": "boolean",
          "override_params[issues_access_level]": "string",
          "override_params[repository_access_level]": "string",
          "override_params[merge_requests_access_level]": "string",
          "override_params[forking_access_level]": "string",
          "override_params[wiki_access_level]": "string",
          "override_params[builds_access_level]": "string",
          "override_params[snippets_access_level]": "string",
          "override_params[pages_access_level]": "string",
          "override_params[analytics_access_level]": "string",
          "override_params[container_registry_access_level]": "string",
          "override_params[security_and_compliance_access_level]": "string",
          "override_params[releases_access_level]": "string",
          "override_params[environments_access_level]": "string",
          "override_params[feature_flags_access_level]": "string",
          "override_params[infrastructure_access_level]": "string",
          "override_params[monitor_access_level]": "string",
          "override_params[model_experiments_access_level]": "string",
          "override_params[model_registry_access_level]": "string",
          "override_params[emails_disabled]": "boolean",
          "override_params[emails_enabled]": "boolean",
          "override_params[show_default_award_emojis]": "boolean",
          "override_params[show_diff_preview_in_email]": "boolean",
          "override_params[warn_about_potentially_unwanted_characters]": "boolean",
          "override_params[enforce_auth_checks_on_uploads]": "boolean",
          "override_params[shared_runners_enabled]": "boolean",
          "override_params[group_runners_enabled]": "boolean",
          "override_params[resolve_outdated_diff_discussions]": "boolean",
          "override_params[remove_source_branch_after_merge]": "boolean",
          "override_params[container_registry_enabled]": "boolean",
          "override_params[container_expiration_policy_attributes][cadence]": "string",
          "override_params[container_expiration_policy_attributes][keep_n]": "number",
          "override_params[container_expiration_policy_attributes][older_than]": "string",
          "override_params[container_expiration_policy_attributes][name_regex]": "string",
          "override_params[container_expiration_policy_attributes][name_regex_keep]": "string",
          "override_params[container_expiration_policy_attributes][enabled]": "boolean",
          "override_params[lfs_enabled]": "boolean",
          "override_params[visibility]": "string",
          "override_params[public_builds]": "boolean",
          "override_params[public_jobs]": "boolean",
          "override_params[request_access_enabled]": "boolean",
          "override_params[only_allow_merge_if_pipeline_succeeds]": "boolean",
          "override_params[allow_merge_on_skipped_pipeline]": "boolean",
          "override_params[only_allow_merge_if_all_discussions_are_resolved]": "boolean",
          "override_params[tag_list]": "[\"string\",\"string\"]",
          "override_params[topics]": "[\"string\",\"string\"]",
          "override_params[printing_merge_request_link_enabled]": "boolean",
          "override_params[merge_method]": "string",
          "override_params[suggestion_commit_message]": "string",
          "override_params[merge_commit_template]": "string",
          "override_params[squash_commit_template]": "string",
          "override_params[issue_branch_template]": "string",
          "override_params[initialize_with_readme]": "boolean",
          "override_params[auto_devops_enabled]": "boolean",
          "override_params[auto_devops_deploy_strategy]": "string",
          "override_params[autoclose_referenced_issues]": "boolean",
          "override_params[repository_storage]": "string",
          "override_params[packages_enabled]": "boolean",
          "override_params[squash_option]": "string",
          "override_params[mr_default_target_self]": "boolean",
          "override_params[only_allow_merge_if_all_status_checks_passed]": "boolean",
          "override_params[approvals_before_merge]": "number",
          "override_params[mirror]": "boolean",
          "override_params[mirror_trigger_builds]": "boolean",
          "override_params[external_authorization_classification_label]": "string",
          "override_params[requirements_access_level]": "string",
          "override_params[prevent_merge_without_jira_issue]": "boolean"
        }
      },
      /** @param {{data:{region:string,bucket_name:string,file_key:string,access_key_id:string,secret_access_key:string,path:string,name:string,namespace:string,overwrite:false,override_params[description]:string,override_params[build_git_strategy]:string,override_params[build_timeout]:number,override_params[auto_cancel_pending_pipelines]:string,override_params[ci_config_path]:string,override_params[service_desk_enabled]:boolean,override_params[issues_enabled]:boolean,override_params[merge_requests_enabled]:boolean,override_params[wiki_enabled]:boolean,override_params[jobs_enabled]:boolean,override_params[snippets_enabled]:boolean,override_params[issues_access_level]:string,override_params[repository_access_level]:string,override_params[merge_requests_access_level]:string,override_params[forking_access_level]:string,override_params[wiki_access_level]:string,override_params[builds_access_level]:string,override_params[snippets_access_level]:string,override_params[pages_access_level]:string,override_params[analytics_access_level]:string,override_params[container_registry_access_level]:string,override_params[security_and_compliance_access_level]:string,override_params[releases_access_level]:string,override_params[environments_access_level]:string,override_params[feature_flags_access_level]:string,override_params[infrastructure_access_level]:string,override_params[monitor_access_level]:string,override_params[model_experiments_access_level]:string,override_params[model_registry_access_level]:string,override_params[emails_disabled]:boolean,override_params[emails_enabled]:boolean,override_params[show_default_award_emojis]:boolean,override_params[show_diff_preview_in_email]:boolean,override_params[warn_about_potentially_unwanted_characters]:boolean,override_params[enforce_auth_checks_on_uploads]:boolean,override_params[shared_runners_enabled]:boolean,override_params[group_runners_enabled]:boolean,override_params[resolve_outdated_diff_discussions]:boolean,override_params[remove_source_branch_after_merge]:boolean,override_params[container_registry_enabled]:boolean,override_params[container_expiration_policy_attributes][cadence]:string,override_params[container_expiration_policy_attributes][keep_n]:number,override_params[container_expiration_policy_attributes][older_than]:string,override_params[container_expiration_policy_attributes][name_regex]:string,override_params[container_expiration_policy_attributes][name_regex_keep]:string,override_params[container_expiration_policy_attributes][enabled]:boolean,override_params[lfs_enabled]:boolean,override_params[visibility]:string,override_params[public_builds]:boolean,override_params[public_jobs]:boolean,override_params[request_access_enabled]:boolean,override_params[only_allow_merge_if_pipeline_succeeds]:boolean,override_params[allow_merge_on_skipped_pipeline]:boolean,override_params[only_allow_merge_if_all_discussions_are_resolved]:boolean,override_params[tag_list]:[\\string\\,\\string\\],override_params[topics]:[\\string\\,\\string\\],override_params[printing_merge_request_link_enabled]:boolean,override_params[merge_method]:string,override_params[suggestion_commit_message]:string,override_params[merge_commit_template]:string,override_params[squash_commit_template]:string,override_params[issue_branch_template]:string,override_params[initialize_with_readme]:boolean,override_params[auto_devops_enabled]:boolean,override_params[auto_devops_deploy_strategy]:string,override_params[autoclose_referenced_issues]:boolean,override_params[repository_storage]:string,override_params[packages_enabled]:boolean,override_params[squash_option]:string,override_params[mr_default_target_self]:boolean,override_params[only_allow_merge_if_all_status_checks_passed]:boolean,override_params[approvals_before_merge]:number,override_params[mirror]:boolean,override_params[mirror_trigger_builds]:boolean,override_params[external_authorization_classification_label]:string,override_params[requirements_access_level]:string,override_params[prevent_merge_without_jira_issue]:boolean},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,import_status:string,import_type:string,correlation_id:string,failed_relations:[{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number},{id:string,created_at:dateTime,exception_class:string,source:string,exception_message:string,relation_name:string,line_number:number}],import_error:string,stats:object}},{code:400},{code:401},{code:403},{code:404},{code:429},{code:503}]} */
      send({ data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { data, clientOptions }]) }
    }
  },
  user: {
    post: {
      method: "post",
      url: "api/v4/projects/user/:user_id",
      resource: "user",
      variable: [
        {
          name: "user_id",
          type: "string"
        }
      ],
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      description: "Create new project for a specified user. Only available to admin users.",
      query: [],
      data: {
        mode: "raw",
        raw: {
          name: "string",
          path: "string",
          default_branch: "string",
          description: "string",
          build_git_strategy: "string",
          build_timeout: "number",
          auto_cancel_pending_pipelines: "string",
          ci_config_path: "string",
          service_desk_enabled: "boolean",
          issues_enabled: "boolean",
          merge_requests_enabled: "boolean",
          wiki_enabled: "boolean",
          jobs_enabled: "boolean",
          snippets_enabled: "boolean",
          issues_access_level: "string",
          repository_access_level: "string",
          merge_requests_access_level: "string",
          forking_access_level: "string",
          wiki_access_level: "string",
          builds_access_level: "string",
          snippets_access_level: "string",
          pages_access_level: "string",
          analytics_access_level: "string",
          container_registry_access_level: "string",
          security_and_compliance_access_level: "string",
          releases_access_level: "string",
          environments_access_level: "string",
          feature_flags_access_level: "string",
          infrastructure_access_level: "string",
          monitor_access_level: "string",
          model_experiments_access_level: "string",
          model_registry_access_level: "string",
          emails_disabled: "boolean",
          emails_enabled: "boolean",
          show_default_award_emojis: "boolean",
          show_diff_preview_in_email: "boolean",
          warn_about_potentially_unwanted_characters: "boolean",
          enforce_auth_checks_on_uploads: "boolean",
          shared_runners_enabled: "boolean",
          group_runners_enabled: "boolean",
          resolve_outdated_diff_discussions: "boolean",
          remove_source_branch_after_merge: "boolean",
          container_registry_enabled: "boolean",
          container_expiration_policy_attributes: {
            cadence: "string",
            keep_n: "number",
            older_than: "string",
            name_regex: "string",
            name_regex_keep: "string",
            enabled: "boolean"
          },
          lfs_enabled: "boolean",
          visibility: "string",
          public_builds: "boolean",
          public_jobs: "boolean",
          request_access_enabled: "boolean",
          only_allow_merge_if_pipeline_succeeds: "boolean",
          allow_merge_on_skipped_pipeline: "boolean",
          only_allow_merge_if_all_discussions_are_resolved: "boolean",
          tag_list: [
            "string",
            "string"
          ],
          topics: [
            "string",
            "string"
          ],
          avatar: "binary",
          printing_merge_request_link_enabled: "boolean",
          merge_method: "string",
          suggestion_commit_message: "string",
          merge_commit_template: "string",
          squash_commit_template: "string",
          issue_branch_template: "string",
          initialize_with_readme: "boolean",
          auto_devops_enabled: "boolean",
          auto_devops_deploy_strategy: "string",
          autoclose_referenced_issues: "boolean",
          repository_storage: "string",
          packages_enabled: "boolean",
          squash_option: "string",
          mr_default_target_self: "boolean",
          only_allow_merge_if_all_status_checks_passed: "boolean",
          approvals_before_merge: "number",
          mirror: "boolean",
          mirror_trigger_builds: "boolean",
          external_authorization_classification_label: "string",
          requirements_access_level: "string",
          prevent_merge_without_jira_issue: "boolean",
          repository_object_format: "string",
          use_custom_template: "boolean",
          group_with_project_templates_id: "number",
          namespace_id: "number",
          import_url: "string",
          template_name: "string",
          template_project_id: "number"
        },
        options: {
          raw: {
            language: "json"
          }
        }
      },
      /** @param {{params:{user_id:string},data:{name:string,path:string,default_branch:string,description:string,build_git_strategy:string,build_timeout:number,auto_cancel_pending_pipelines:string,ci_config_path:string,service_desk_enabled:boolean,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,show_default_award_emojis:boolean,show_diff_preview_in_email:boolean,warn_about_potentially_unwanted_characters:boolean,enforce_auth_checks_on_uploads:boolean,shared_runners_enabled:boolean,group_runners_enabled:boolean,resolve_outdated_diff_discussions:boolean,remove_source_branch_after_merge:boolean,container_registry_enabled:boolean,container_expiration_policy_attributes:{cadence:string,keep_n:number,older_than:string,name_regex:string,name_regex_keep:string,enabled:boolean},lfs_enabled:boolean,visibility:string,public_builds:boolean,public_jobs:boolean,request_access_enabled:boolean,only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,tag_list:[string,string],topics:[string,string],avatar:binary,printing_merge_request_link_enabled:boolean,merge_method:string,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,initialize_with_readme:boolean,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,autoclose_referenced_issues:boolean,repository_storage:string,packages_enabled:boolean,squash_option:string,mr_default_target_self:boolean,only_allow_merge_if_all_status_checks_passed:boolean,approvals_before_merge:number,mirror:boolean,mirror_trigger_builds:boolean,external_authorization_classification_label:string,requirements_access_level:string,prevent_merge_without_jira_issue:boolean,repository_object_format:string,use_custom_template:boolean,group_with_project_templates_id:number,namespace_id:number,import_url:string,template_name:string,template_project_id:number},clientOptions:{}}} requestOptions * @return {[{code:201,data:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:string,name:string,nickname:string,html_url:string,source_url:string},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:number,name:string,path:string,kind:string,full_path:string,parent_id:number,avatar_url:string,web_url:string},custom_attributes:{key:string,value:string},repository_storage:string,container_registry_image_prefix:string,_links:{self:string,issues:string,merge_requests:string,repo_branches:string,labels:string,events:string,members:string,cluster_agents:string},packages_enabled:boolean,empty_repo:boolean,archived:boolean,visibility:string,owner:{id:number,username:string,name:string,state:string,locked:boolean,avatar_url:string,avatar_path:string,custom_attributes:[{value:{}},{value:{}}],web_url:string},resolve_outdated_diff_discussions:boolean,container_expiration_policy:{cadence:string,enabled:string,keep_n:string,older_than:string,name_regex:string,name_regex_keep:string,next_run_at:string},repository_object_format:string,issues_enabled:boolean,merge_requests_enabled:boolean,wiki_enabled:boolean,jobs_enabled:boolean,snippets_enabled:boolean,container_registry_enabled:boolean,service_desk_enabled:boolean,service_desk_address:string,can_create_merge_request_in:boolean,issues_access_level:string,repository_access_level:string,merge_requests_access_level:string,forking_access_level:string,wiki_access_level:string,builds_access_level:string,snippets_access_level:string,pages_access_level:string,analytics_access_level:string,container_registry_access_level:string,security_and_compliance_access_level:string,releases_access_level:string,environments_access_level:string,feature_flags_access_level:string,infrastructure_access_level:string,monitor_access_level:string,model_experiments_access_level:string,model_registry_access_level:string,emails_disabled:boolean,emails_enabled:boolean,shared_runners_enabled:boolean,lfs_enabled:boolean,creator_id:number,forked_from_project:{id:number,description:string,name:string,name_with_namespace:string,path:string,path_with_namespace:string,created_at:dateTime,default_branch:string,tag_list:[string,string],topics:[string,string],ssh_url_to_repo:string,http_url_to_repo:string,web_url:string,readme_url:string,forks_count:number,license_url:string,license:{key:{value:{}},name:{value:{}},nickname:{value:{}},html_url:{value:{}},source_url:{value:{}}},avatar_url:string,star_count:number,last_activity_at:dateTime,namespace:{id:{value:{}},name:{value:{}},path:{value:{}},kind:{value:{}},full_path:{value:{}},parent_id:{value:{}},avatar_url:{value:{}},web_url:{value:{}}},custom_attributes:{key:{value:{}},value:{value:{}}},repository_storage:string},mr_default_target_self:boolean,import_url:string,import_type:string,import_status:string,import_error:string,open_issues_count:number,description_html:string,updated_at:dateTime,ci_default_git_depth:number,ci_forward_deployment_enabled:boolean,ci_forward_deployment_rollback_allowed:boolean,ci_job_token_scope_enabled:boolean,ci_separated_caches:boolean,ci_allow_fork_pipelines_to_run_in_parent_project:boolean,build_git_strategy:string,keep_latest_artifact:boolean,restrict_user_defined_variables:boolean,ci_pipeline_variables_minimum_override_role:string,runners_token:string,runner_token_expiration_interval:number,group_runners_enabled:boolean,auto_cancel_pending_pipelines:string,build_timeout:number,auto_devops_enabled:boolean,auto_devops_deploy_strategy:string,ci_config_path:string,public_jobs:boolean,shared_with_groups:[string,string],only_allow_merge_if_pipeline_succeeds:boolean,allow_merge_on_skipped_pipeline:boolean,request_access_enabled:boolean,only_allow_merge_if_all_discussions_are_resolved:boolean,remove_source_branch_after_merge:boolean,printing_merge_request_link_enabled:boolean,merge_method:string,squash_option:string,enforce_auth_checks_on_uploads:boolean,suggestion_commit_message:string,merge_commit_template:string,squash_commit_template:string,issue_branch_template:string,statistics:{commit_count:string,storage_size:string,repository_size:string,wiki_size:string,lfs_objects_size:string,job_artifacts_size:string,pipeline_artifacts_size:string,packages_size:string,snippets_size:string,uploads_size:string,container_registry_size:string},warn_about_potentially_unwanted_characters:boolean,autoclose_referenced_issues:boolean,approvals_before_merge:string,mirror:string,mirror_user_id:string,mirror_trigger_builds:string,only_mirror_protected_branches:string,mirror_overwrites_diverged_branches:string,external_authorization_classification_label:string,marked_for_deletion_at:string,marked_for_deletion_on:string,requirements_enabled:string,requirements_access_level:string,security_and_compliance_enabled:string,compliance_frameworks:string,issues_template:string,merge_requests_template:string,ci_restrict_pipeline_cancellation_role:string,merge_pipelines_enabled:string,merge_trains_enabled:string,merge_trains_skip_train_allowed:string,only_allow_merge_if_all_status_checks_passed:string,allow_pipeline_trigger_approve_deployment:boolean,prevent_merge_without_jira_issue:string}},{code:400},{code:403},{code:404}]} */
      send({ params = {}, data = {}, clientOptions = {} } = {}) { return request.apply(this, [client, { params, data, clientOptions }]) }
    }
  }
});